
PSW_Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000994c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e4  08009af0  08009af0  0000aaf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ed4  08009ed4  0000b1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009ed4  08009ed4  0000aed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009edc  08009edc  0000b1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009edc  08009edc  0000aedc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ee0  08009ee0  0000aee0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08009ee4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1f0  2**0
                  CONTENTS
 10 .bss          00000394  200001f0  200001f0  0000b1f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  20000584  0000b1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000148f3  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a9  00000000  00000000  0001fb13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b0  00000000  00000000  000223c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eb9  00000000  00000000  00023670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f91  00000000  00000000  00024529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018805  00000000  00000000  000474ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6e78  00000000  00000000  0005fcbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136b37  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006020  00000000  00000000  00136b7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0013cb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009ad4 	.word	0x08009ad4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	08009ad4 	.word	0x08009ad4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:
void CalculateRPM(void);

uint16_t Joystick[] = {0, 0};

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d102      	bne.n	8000bcc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff fff6 	bl	8000bb8 <__io_putchar>
  }
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <__io_putchar+0x2c>)
 8000bd6:	f005 fe71 	bl	80068bc <HAL_UART_Transmit>
  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	2000038c 	.word	0x2000038c

08000be8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == enkoder_Pin){
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b10      	cmp	r3, #16
 8000bf6:	d104      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0x1a>
		edgeCount++;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x38>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x38>)
 8000c00:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == encoder1_Pin){
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	2b40      	cmp	r3, #64	@ 0x40
 8000c06:	d104      	bne.n	8000c12 <HAL_GPIO_EXTI_Callback+0x2a>
			edgeCount1++;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000c10:	6013      	str	r3, [r2, #0]
		}

}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	20000414 	.word	0x20000414
 8000c24:	20000418 	.word	0x20000418

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b08e      	sub	sp, #56	@ 0x38
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c2e:	f000 ffbb 	bl	8001ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c32:	f000 f923 	bl	8000e7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c36:	f000 fbe5 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3a:	f000 fbc5 	bl	80013c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c3e:	f000 fb93 	bl	8001368 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000c42:	f000 f981 	bl	8000f48 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000c46:	f000 fa2b 	bl	80010a0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000c4a:	f000 fae3 	bl	8001214 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000c4e:	f000 f9e7 	bl	8001020 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (long unsigned int *)Joystick, 2);
 8000c52:	2202      	movs	r2, #2
 8000c54:	4975      	ldr	r1, [pc, #468]	@ (8000e2c <main+0x204>)
 8000c56:	4876      	ldr	r0, [pc, #472]	@ (8000e30 <main+0x208>)
 8000c58:	f001 fa24 	bl	80020a4 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4875      	ldr	r0, [pc, #468]	@ (8000e34 <main+0x20c>)
 8000c60:	f004 fa10 	bl	8005084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000c64:	2104      	movs	r1, #4
 8000c66:	4873      	ldr	r0, [pc, #460]	@ (8000e34 <main+0x20c>)
 8000c68:	f004 fa0c 	bl	8005084 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	4872      	ldr	r0, [pc, #456]	@ (8000e38 <main+0x210>)
 8000c70:	f004 fa08 	bl	8005084 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000c74:	2100      	movs	r1, #0
 8000c76:	4870      	ldr	r0, [pc, #448]	@ (8000e38 <main+0x210>)
 8000c78:	f004 fb72 	bl	8005360 <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000c7c:	2104      	movs	r1, #4
 8000c7e:	486e      	ldr	r0, [pc, #440]	@ (8000e38 <main+0x210>)
 8000c80:	f004 fb6e 	bl	8005360 <HAL_TIM_IC_Start>
  HAL_Init();
 8000c84:	f000 ff90 	bl	8001ba8 <HAL_Init>
	  // PB4 input1
	  // PB5 input2
	  // PB3 input3
	  // PA 10 input4
//	    printf("%f \n", rpm);
	 currentTC = HAL_GetTick();
 8000c88:	f000 ffe8 	bl	8001c5c <HAL_GetTick>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	4a6b      	ldr	r2, [pc, #428]	@ (8000e3c <main+0x214>)
 8000c90:	6013      	str	r3, [r2, #0]
	 if ((currentTC - previousTC) > period){
 8000c92:	4b6a      	ldr	r3, [pc, #424]	@ (8000e3c <main+0x214>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b6a      	ldr	r3, [pc, #424]	@ (8000e40 <main+0x218>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	1ad2      	subs	r2, r2, r3
 8000c9c:	4b69      	ldr	r3, [pc, #420]	@ (8000e44 <main+0x21c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d9f1      	bls.n	8000c88 <main+0x60>
		 //printf("%d %d \n", Joystick[0], Joystick[1]);
//		 	 printf("%ld\n", edgeCount);
//		 	 temp = (int)roundf(200.0f * (1.0f - ((float)Joystick[0] / 4096.0f))-2);
		 	//__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);

			uint32_t start = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4864      	ldr	r0, [pc, #400]	@ (8000e38 <main+0x210>)
 8000ca8:	f004 fed0 	bl	8005a4c <HAL_TIM_ReadCapturedValue>
 8000cac:	62f8      	str	r0, [r7, #44]	@ 0x2c
			uint32_t stop = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_2);
 8000cae:	2104      	movs	r1, #4
 8000cb0:	4861      	ldr	r0, [pc, #388]	@ (8000e38 <main+0x210>)
 8000cb2:	f004 fecb 	bl	8005a4c <HAL_TIM_ReadCapturedValue>
 8000cb6:	62b8      	str	r0, [r7, #40]	@ 0x28
			//printf("%d %d \n", Joystick[0], Joystick[1]);
			//silnik pierwszy
			uint32_t pulse_count = edgeCount;
 8000cb8:	4b63      	ldr	r3, [pc, #396]	@ (8000e48 <main+0x220>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	627b      	str	r3, [r7, #36]	@ 0x24
			edgeCount = 0;
 8000cbe:	4b62      	ldr	r3, [pc, #392]	@ (8000e48 <main+0x220>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]

			float eerror = set_count - (float)pulse_count;
 8000cc4:	4b61      	ldr	r3, [pc, #388]	@ (8000e4c <main+0x224>)
 8000cc6:	ed93 7a00 	vldr	s14, [r3]
 8000cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ccc:	ee07 3a90 	vmov	s15, r3
 8000cd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cd8:	edc7 7a08 	vstr	s15, [r7, #32]


			float P_reg = Kp * eerror;
 8000cdc:	4b5c      	ldr	r3, [pc, #368]	@ (8000e50 <main+0x228>)
 8000cde:	edd3 7a00 	vldr	s15, [r3]
 8000ce2:	ed97 7a08 	vldr	s14, [r7, #32]
 8000ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000cea:	edc7 7a07 	vstr	s15, [r7, #28]

			float I_reg = I_reg_p + Ki *(float)eerror * Ts;
 8000cee:	4b59      	ldr	r3, [pc, #356]	@ (8000e54 <main+0x22c>)
 8000cf0:	ed93 7a00 	vldr	s14, [r3]
 8000cf4:	edd7 7a08 	vldr	s15, [r7, #32]
 8000cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfc:	4b56      	ldr	r3, [pc, #344]	@ (8000e58 <main+0x230>)
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d06:	4b55      	ldr	r3, [pc, #340]	@ (8000e5c <main+0x234>)
 8000d08:	edd3 7a00 	vldr	s15, [r3]
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d10:	edc7 7a06 	vstr	s15, [r7, #24]

			float u = P_reg + I_reg;
 8000d14:	ed97 7a07 	vldr	s14, [r7, #28]
 8000d18:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d20:	edc7 7a05 	vstr	s15, [r7, #20]

			uint32_t u_sat = (uint32_t) u;
 8000d24:	edd7 7a05 	vldr	s15, [r7, #20]
 8000d28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d2c:	ee17 3a90 	vmov	r3, s15
 8000d30:	637b      	str	r3, [r7, #52]	@ 0x34
			if (u_sat > 100){
 8000d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000d34:	2b64      	cmp	r3, #100	@ 0x64
 8000d36:	d902      	bls.n	8000d3e <main+0x116>
				u_sat = 100;
 8000d38:	2364      	movs	r3, #100	@ 0x64
 8000d3a:	637b      	str	r3, [r7, #52]	@ 0x34
 8000d3c:	e002      	b.n	8000d44 <main+0x11c>
			} else if (u_sat < 0){
				u_sat = 0;
			}else {
				I_reg_p =I_reg;
 8000d3e:	4a47      	ldr	r2, [pc, #284]	@ (8000e5c <main+0x234>)
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	6013      	str	r3, [r2, #0]
			}

			printf("Duty: %ld, speed: %ld \n", u_sat, pulse_count);
 8000d44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d46:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000d48:	4845      	ldr	r0, [pc, #276]	@ (8000e60 <main+0x238>)
 8000d4a:	f006 ff47 	bl	8007bdc <iprintf>
			// silnik drugi
			uint32_t pulse_count1 = edgeCount1;
 8000d4e:	4b45      	ldr	r3, [pc, #276]	@ (8000e64 <main+0x23c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	613b      	str	r3, [r7, #16]
						edgeCount1 = 0;
 8000d54:	4b43      	ldr	r3, [pc, #268]	@ (8000e64 <main+0x23c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	601a      	str	r2, [r3, #0]

						float eerror1 = set_count - (float)pulse_count1;
 8000d5a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e4c <main+0x224>)
 8000d5c:	ed93 7a00 	vldr	s14, [r3]
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	ee07 3a90 	vmov	s15, r3
 8000d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d6e:	edc7 7a03 	vstr	s15, [r7, #12]


						float P_reg1 = Kp1 * eerror1;
 8000d72:	4b3d      	ldr	r3, [pc, #244]	@ (8000e68 <main+0x240>)
 8000d74:	edd3 7a00 	vldr	s15, [r3]
 8000d78:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000d80:	edc7 7a02 	vstr	s15, [r7, #8]

						float I_reg1 = I_reg_p1 + Ki1 *(float)eerror1 * Ts;
 8000d84:	4b39      	ldr	r3, [pc, #228]	@ (8000e6c <main+0x244>)
 8000d86:	ed93 7a00 	vldr	s14, [r3]
 8000d8a:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d92:	4b31      	ldr	r3, [pc, #196]	@ (8000e58 <main+0x230>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d9c:	4b34      	ldr	r3, [pc, #208]	@ (8000e70 <main+0x248>)
 8000d9e:	edd3 7a00 	vldr	s15, [r3]
 8000da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000da6:	edc7 7a01 	vstr	s15, [r7, #4]

						float u1 = P_reg1 + I_reg1;
 8000daa:	ed97 7a02 	vldr	s14, [r7, #8]
 8000dae:	edd7 7a01 	vldr	s15, [r7, #4]
 8000db2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000db6:	edc7 7a00 	vstr	s15, [r7]

						uint32_t u_sat1 = (uint32_t) u1;
 8000dba:	edd7 7a00 	vldr	s15, [r7]
 8000dbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dc2:	ee17 3a90 	vmov	r3, s15
 8000dc6:	633b      	str	r3, [r7, #48]	@ 0x30
						if (u_sat1 > 100){
 8000dc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000dca:	2b64      	cmp	r3, #100	@ 0x64
 8000dcc:	d902      	bls.n	8000dd4 <main+0x1ac>
							u_sat1 = 100;
 8000dce:	2364      	movs	r3, #100	@ 0x64
 8000dd0:	633b      	str	r3, [r7, #48]	@ 0x30
 8000dd2:	e002      	b.n	8000dda <main+0x1b2>
						} else if (u_sat1 < 0){
							u_sat1 = 0;
						}else {
							I_reg_p1 =I_reg1;
 8000dd4:	4a26      	ldr	r2, [pc, #152]	@ (8000e70 <main+0x248>)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6013      	str	r3, [r2, #0]
						}
			printf("Duty1: %ld, speed1: %ld \n", u_sat1, pulse_count1);
 8000dda:	693a      	ldr	r2, [r7, #16]
 8000ddc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000dde:	4825      	ldr	r0, [pc, #148]	@ (8000e74 <main+0x24c>)
 8000de0:	f006 fefc 	bl	8007bdc <iprintf>

//			printf("%ld\n", u_sat);
		 	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000de4:	2201      	movs	r2, #1
 8000de6:	2110      	movs	r1, #16
 8000de8:	4823      	ldr	r0, [pc, #140]	@ (8000e78 <main+0x250>)
 8000dea:	f002 fadf 	bl	80033ac <HAL_GPIO_WritePin>
		 	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df4:	4820      	ldr	r0, [pc, #128]	@ (8000e78 <main+0x250>)
 8000df6:	f002 fad9 	bl	80033ac <HAL_GPIO_WritePin>
		 	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	2108      	movs	r1, #8
 8000dfe:	481e      	ldr	r0, [pc, #120]	@ (8000e78 <main+0x250>)
 8000e00:	f002 fad4 	bl	80033ac <HAL_GPIO_WritePin>
		 	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000e04:	2200      	movs	r2, #0
 8000e06:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e0e:	f002 facd 	bl	80033ac <HAL_GPIO_WritePin>
		 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100);//usat1
 8000e12:	4b08      	ldr	r3, [pc, #32]	@ (8000e34 <main+0x20c>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	2264      	movs	r2, #100	@ 0x64
 8000e18:	635a      	str	r2, [r3, #52]	@ 0x34
		 	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 100);
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <main+0x20c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	2264      	movs	r2, #100	@ 0x64
 8000e20:	639a      	str	r2, [r3, #56]	@ 0x38
//				HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
//				HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
//				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty);
//				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, duty);
//			}
		 previousTC = currentTC;
 8000e22:	4b06      	ldr	r3, [pc, #24]	@ (8000e3c <main+0x214>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4a06      	ldr	r2, [pc, #24]	@ (8000e40 <main+0x218>)
 8000e28:	6013      	str	r3, [r2, #0]
	 currentTC = HAL_GetTick();
 8000e2a:	e72d      	b.n	8000c88 <main+0x60>
 8000e2c:	2000042c 	.word	0x2000042c
 8000e30:	2000020c 	.word	0x2000020c
 8000e34:	200002f4 	.word	0x200002f4
 8000e38:	20000340 	.word	0x20000340
 8000e3c:	2000041c 	.word	0x2000041c
 8000e40:	20000420 	.word	0x20000420
 8000e44:	20000000 	.word	0x20000000
 8000e48:	20000414 	.word	0x20000414
 8000e4c:	20000004 	.word	0x20000004
 8000e50:	20000008 	.word	0x20000008
 8000e54:	2000000c 	.word	0x2000000c
 8000e58:	20000018 	.word	0x20000018
 8000e5c:	20000424 	.word	0x20000424
 8000e60:	08009af0 	.word	0x08009af0
 8000e64:	20000418 	.word	0x20000418
 8000e68:	20000010 	.word	0x20000010
 8000e6c:	20000014 	.word	0x20000014
 8000e70:	20000428 	.word	0x20000428
 8000e74:	08009b08 	.word	0x08009b08
 8000e78:	48000400 	.word	0x48000400

08000e7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b0a6      	sub	sp, #152	@ 0x98
 8000e80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e82:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000e86:	2228      	movs	r2, #40	@ 0x28
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f006 fefb 	bl	8007c86 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e90:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ea0:	1d3b      	adds	r3, r7, #4
 8000ea2:	2258      	movs	r2, #88	@ 0x58
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f006 feed 	bl	8007c86 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eac:	2302      	movs	r3, #2
 8000eae:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eb4:	2310      	movs	r3, #16
 8000eb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000ec4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000ec8:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000ecc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000eda:	4618      	mov	r0, r3
 8000edc:	f002 fbc8 	bl	8003670 <HAL_RCC_OscConfig>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ee6:	f000 fb2b 	bl	8001540 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000eea:	230f      	movs	r3, #15
 8000eec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ef6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000efa:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000efc:	2300      	movs	r3, #0
 8000efe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f00:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000f04:	2102      	movs	r1, #2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fbd6 	bl	80046b8 <HAL_RCC_ClockConfig>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f12:	f000 fb15 	bl	8001540 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8000f16:	4b0b      	ldr	r3, [pc, #44]	@ (8000f44 <SystemClock_Config+0xc8>)
 8000f18:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000f22:	2300      	movs	r3, #0
 8000f24:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2a:	1d3b      	adds	r3, r7, #4
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f003 fdd5 	bl	8004adc <HAL_RCCEx_PeriphCLKConfig>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f38:	f000 fb02 	bl	8001540 <Error_Handler>
  }
}
 8000f3c:	bf00      	nop
 8000f3e:	3798      	adds	r7, #152	@ 0x98
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	00101022 	.word	0x00101022

08000f48 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f4e:	463b      	mov	r3, r7
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]
 8000f5c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f5e:	4b2e      	ldr	r3, [pc, #184]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f60:	4a2e      	ldr	r2, [pc, #184]	@ (800101c <MX_ADC2_Init+0xd4>)
 8000f62:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f64:	4b2c      	ldr	r3, [pc, #176]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f66:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f6a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000f72:	4b29      	ldr	r3, [pc, #164]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f78:	4b27      	ldr	r3, [pc, #156]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f7e:	4b26      	ldr	r3, [pc, #152]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f86:	4b24      	ldr	r3, [pc, #144]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f8c:	4b22      	ldr	r3, [pc, #136]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f92:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000f9a:	2202      	movs	r2, #2
 8000f9c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000fa8:	2204      	movs	r2, #4
 8000faa:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000fb2:	4b19      	ldr	r3, [pc, #100]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fb8:	4817      	ldr	r0, [pc, #92]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000fba:	f000 fe79 	bl	8001cb0 <HAL_ADC_Init>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000fc4:	f000 fabc 	bl	8001540 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	480c      	ldr	r0, [pc, #48]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8000fe6:	f001 f979 	bl	80022dc <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000ff0:	f000 faa6 	bl	8001540 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ff4:	2307      	movs	r3, #7
 8000ff6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ff8:	2302      	movs	r3, #2
 8000ffa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4619      	mov	r1, r3
 8001000:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_ADC2_Init+0xd0>)
 8001002:	f001 f96b 	bl	80022dc <HAL_ADC_ConfigChannel>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 800100c:	f000 fa98 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	2000020c 	.word	0x2000020c
 800101c:	50000100 	.word	0x50000100

08001020 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001024:	4b1b      	ldr	r3, [pc, #108]	@ (8001094 <MX_I2C1_Init+0x74>)
 8001026:	4a1c      	ldr	r2, [pc, #112]	@ (8001098 <MX_I2C1_Init+0x78>)
 8001028:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 800102a:	4b1a      	ldr	r3, [pc, #104]	@ (8001094 <MX_I2C1_Init+0x74>)
 800102c:	4a1b      	ldr	r2, [pc, #108]	@ (800109c <MX_I2C1_Init+0x7c>)
 800102e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001030:	4b18      	ldr	r3, [pc, #96]	@ (8001094 <MX_I2C1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001036:	4b17      	ldr	r3, [pc, #92]	@ (8001094 <MX_I2C1_Init+0x74>)
 8001038:	2201      	movs	r2, #1
 800103a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800103c:	4b15      	ldr	r3, [pc, #84]	@ (8001094 <MX_I2C1_Init+0x74>)
 800103e:	2200      	movs	r2, #0
 8001040:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001042:	4b14      	ldr	r3, [pc, #80]	@ (8001094 <MX_I2C1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001048:	4b12      	ldr	r3, [pc, #72]	@ (8001094 <MX_I2C1_Init+0x74>)
 800104a:	2200      	movs	r2, #0
 800104c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800104e:	4b11      	ldr	r3, [pc, #68]	@ (8001094 <MX_I2C1_Init+0x74>)
 8001050:	2200      	movs	r2, #0
 8001052:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001054:	4b0f      	ldr	r3, [pc, #60]	@ (8001094 <MX_I2C1_Init+0x74>)
 8001056:	2200      	movs	r2, #0
 8001058:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800105a:	480e      	ldr	r0, [pc, #56]	@ (8001094 <MX_I2C1_Init+0x74>)
 800105c:	f002 f9d6 	bl	800340c <HAL_I2C_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001066:	f000 fa6b 	bl	8001540 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800106a:	2100      	movs	r1, #0
 800106c:	4809      	ldr	r0, [pc, #36]	@ (8001094 <MX_I2C1_Init+0x74>)
 800106e:	f002 fa68 	bl	8003542 <HAL_I2CEx_ConfigAnalogFilter>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001078:	f000 fa62 	bl	8001540 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800107c:	2100      	movs	r1, #0
 800107e:	4805      	ldr	r0, [pc, #20]	@ (8001094 <MX_I2C1_Init+0x74>)
 8001080:	f002 faaa 	bl	80035d8 <HAL_I2CEx_ConfigDigitalFilter>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800108a:	f000 fa59 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200002a0 	.word	0x200002a0
 8001098:	40005400 	.word	0x40005400
 800109c:	00201d2b 	.word	0x00201d2b

080010a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b09a      	sub	sp, #104	@ 0x68
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010a6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
 80010b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	222c      	movs	r2, #44	@ 0x2c
 80010d8:	2100      	movs	r1, #0
 80010da:	4618      	mov	r0, r3
 80010dc:	f006 fdd3 	bl	8007c86 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e0:	4b4a      	ldr	r3, [pc, #296]	@ (800120c <MX_TIM1_Init+0x16c>)
 80010e2:	4a4b      	ldr	r2, [pc, #300]	@ (8001210 <MX_TIM1_Init+0x170>)
 80010e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 27;
 80010e6:	4b49      	ldr	r3, [pc, #292]	@ (800120c <MX_TIM1_Init+0x16c>)
 80010e8:	221b      	movs	r2, #27
 80010ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b47      	ldr	r3, [pc, #284]	@ (800120c <MX_TIM1_Init+0x16c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 80010f2:	4b46      	ldr	r3, [pc, #280]	@ (800120c <MX_TIM1_Init+0x16c>)
 80010f4:	2264      	movs	r2, #100	@ 0x64
 80010f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f8:	4b44      	ldr	r3, [pc, #272]	@ (800120c <MX_TIM1_Init+0x16c>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010fe:	4b43      	ldr	r3, [pc, #268]	@ (800120c <MX_TIM1_Init+0x16c>)
 8001100:	2200      	movs	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001104:	4b41      	ldr	r3, [pc, #260]	@ (800120c <MX_TIM1_Init+0x16c>)
 8001106:	2200      	movs	r2, #0
 8001108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800110a:	4840      	ldr	r0, [pc, #256]	@ (800120c <MX_TIM1_Init+0x16c>)
 800110c:	f003 ff02 	bl	8004f14 <HAL_TIM_Base_Init>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001116:	f000 fa13 	bl	8001540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800111a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800111e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001120:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001124:	4619      	mov	r1, r3
 8001126:	4839      	ldr	r0, [pc, #228]	@ (800120c <MX_TIM1_Init+0x16c>)
 8001128:	f004 fbc6 	bl	80058b8 <HAL_TIM_ConfigClockSource>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001132:	f000 fa05 	bl	8001540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001136:	4835      	ldr	r0, [pc, #212]	@ (800120c <MX_TIM1_Init+0x16c>)
 8001138:	f003 ff43 	bl	8004fc2 <HAL_TIM_PWM_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001142:	f000 f9fd 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001146:	2300      	movs	r3, #0
 8001148:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800114a:	2300      	movs	r3, #0
 800114c:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001152:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001156:	4619      	mov	r1, r3
 8001158:	482c      	ldr	r0, [pc, #176]	@ (800120c <MX_TIM1_Init+0x16c>)
 800115a:	f005 fa4f 	bl	80065fc <HAL_TIMEx_MasterConfigSynchronization>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001164:	f000 f9ec 	bl	8001540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001168:	2360      	movs	r3, #96	@ 0x60
 800116a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 50;
 800116c:	2332      	movs	r3, #50	@ 0x32
 800116e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001174:	2300      	movs	r3, #0
 8001176:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001178:	2300      	movs	r3, #0
 800117a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001184:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	481f      	ldr	r0, [pc, #124]	@ (800120c <MX_TIM1_Init+0x16c>)
 800118e:	f004 fa7f 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001198:	f000 f9d2 	bl	8001540 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 800119c:	2300      	movs	r3, #0
 800119e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011a0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011a4:	2204      	movs	r2, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4818      	ldr	r0, [pc, #96]	@ (800120c <MX_TIM1_Init+0x16c>)
 80011aa:	f004 fa71 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80011b4:	f000 f9c4 	bl	8001540 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011c8:	2300      	movs	r3, #0
 80011ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80011da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80011de:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80011e0:	2300      	movs	r3, #0
 80011e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011e8:	1d3b      	adds	r3, r7, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	@ (800120c <MX_TIM1_Init+0x16c>)
 80011ee:	f005 fa91 	bl	8006714 <HAL_TIMEx_ConfigBreakDeadTime>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 80011f8:	f000 f9a2 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011fc:	4803      	ldr	r0, [pc, #12]	@ (800120c <MX_TIM1_Init+0x16c>)
 80011fe:	f000 faeb 	bl	80017d8 <HAL_TIM_MspPostInit>

}
 8001202:	bf00      	nop
 8001204:	3768      	adds	r7, #104	@ 0x68
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002f4 	.word	0x200002f4
 8001210:	40012c00 	.word	0x40012c00

08001214 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b092      	sub	sp, #72	@ 0x48
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001234:	f107 031c 	add.w	r3, r7, #28
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001242:	463b      	mov	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
 8001250:	615a      	str	r2, [r3, #20]
 8001252:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001254:	4b42      	ldr	r3, [pc, #264]	@ (8001360 <MX_TIM2_Init+0x14c>)
 8001256:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800125a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 800125c:	4b40      	ldr	r3, [pc, #256]	@ (8001360 <MX_TIM2_Init+0x14c>)
 800125e:	224f      	movs	r2, #79	@ 0x4f
 8001260:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001262:	4b3f      	ldr	r3, [pc, #252]	@ (8001360 <MX_TIM2_Init+0x14c>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001268:	4b3d      	ldr	r3, [pc, #244]	@ (8001360 <MX_TIM2_Init+0x14c>)
 800126a:	4a3e      	ldr	r2, [pc, #248]	@ (8001364 <MX_TIM2_Init+0x150>)
 800126c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	4b3c      	ldr	r3, [pc, #240]	@ (8001360 <MX_TIM2_Init+0x14c>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <MX_TIM2_Init+0x14c>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800127a:	4839      	ldr	r0, [pc, #228]	@ (8001360 <MX_TIM2_Init+0x14c>)
 800127c:	f003 fe4a 	bl	8004f14 <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8001286:	f000 f95b 	bl	8001540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800128e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001294:	4619      	mov	r1, r3
 8001296:	4832      	ldr	r0, [pc, #200]	@ (8001360 <MX_TIM2_Init+0x14c>)
 8001298:	f004 fb0e 	bl	80058b8 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80012a2:	f000 f94d 	bl	8001540 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80012a6:	482e      	ldr	r0, [pc, #184]	@ (8001360 <MX_TIM2_Init+0x14c>)
 80012a8:	f003 fff8 	bl	800529c <HAL_TIM_IC_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80012b2:	f000 f945 	bl	8001540 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80012b6:	482a      	ldr	r0, [pc, #168]	@ (8001360 <MX_TIM2_Init+0x14c>)
 80012b8:	f003 fe83 	bl	8004fc2 <HAL_TIM_PWM_Init>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80012c2:	f000 f93d 	bl	8001540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c6:	2300      	movs	r3, #0
 80012c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ca:	2300      	movs	r3, #0
 80012cc:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012ce:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80012d2:	4619      	mov	r1, r3
 80012d4:	4822      	ldr	r0, [pc, #136]	@ (8001360 <MX_TIM2_Init+0x14c>)
 80012d6:	f005 f991 	bl	80065fc <HAL_TIMEx_MasterConfigSynchronization>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80012e0:	f000 f92e 	bl	8001540 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80012e8:	2301      	movs	r3, #1
 80012ea:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICFilter = 0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	2200      	movs	r2, #0
 80012fa:	4619      	mov	r1, r3
 80012fc:	4818      	ldr	r0, [pc, #96]	@ (8001360 <MX_TIM2_Init+0x14c>)
 80012fe:	f004 f92b 	bl	8005558 <HAL_TIM_IC_ConfigChannel>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001308:	f000 f91a 	bl	8001540 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800130c:	2302      	movs	r3, #2
 800130e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2204      	movs	r2, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4810      	ldr	r0, [pc, #64]	@ (8001360 <MX_TIM2_Init+0x14c>)
 800131e:	f004 f91b 	bl	8005558 <HAL_TIM_IC_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8001328:	f000 f90a 	bl	8001540 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132c:	2360      	movs	r3, #96	@ 0x60
 800132e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001330:	230a      	movs	r3, #10
 8001332:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800133c:	463b      	mov	r3, r7
 800133e:	2208      	movs	r2, #8
 8001340:	4619      	mov	r1, r3
 8001342:	4807      	ldr	r0, [pc, #28]	@ (8001360 <MX_TIM2_Init+0x14c>)
 8001344:	f004 f9a4 	bl	8005690 <HAL_TIM_PWM_ConfigChannel>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 800134e:	f000 f8f7 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001352:	4803      	ldr	r0, [pc, #12]	@ (8001360 <MX_TIM2_Init+0x14c>)
 8001354:	f000 fa40 	bl	80017d8 <HAL_TIM_MspPostInit>

}
 8001358:	bf00      	nop
 800135a:	3748      	adds	r7, #72	@ 0x48
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000340 	.word	0x20000340
 8001364:	0001869f 	.word	0x0001869f

08001368 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 800136e:	4a15      	ldr	r2, [pc, #84]	@ (80013c4 <MX_USART2_UART_Init+0x5c>)
 8001370:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 8001374:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001378:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137a:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001380:	4b0f      	ldr	r3, [pc, #60]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 8001382:	2200      	movs	r2, #0
 8001384:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001386:	4b0e      	ldr	r3, [pc, #56]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 8001388:	2200      	movs	r2, #0
 800138a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800138c:	4b0c      	ldr	r3, [pc, #48]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 800138e:	220c      	movs	r2, #12
 8001390:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001398:	4b09      	ldr	r3, [pc, #36]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 800139a:	2200      	movs	r2, #0
 800139c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800139e:	4b08      	ldr	r3, [pc, #32]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a4:	4b06      	ldr	r3, [pc, #24]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	@ (80013c0 <MX_USART2_UART_Init+0x58>)
 80013ac:	f005 fa38 	bl	8006820 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013b6:	f000 f8c3 	bl	8001540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000038c 	.word	0x2000038c
 80013c4:	40004400 	.word	0x40004400

080013c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <MX_DMA_Init+0x38>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <MX_DMA_Init+0x38>)
 80013d4:	f043 0302 	orr.w	r3, r3, #2
 80013d8:	6153      	str	r3, [r2, #20]
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <MX_DMA_Init+0x38>)
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2038      	movs	r0, #56	@ 0x38
 80013ec:	f001 fc6b 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 80013f0:	2038      	movs	r0, #56	@ 0x38
 80013f2:	f001 fc84 	bl	8002cfe <HAL_NVIC_EnableIRQ>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	@ 0x28
 8001408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0314 	add.w	r3, r7, #20
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b46      	ldr	r3, [pc, #280]	@ (8001534 <MX_GPIO_Init+0x130>)
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	4a45      	ldr	r2, [pc, #276]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001420:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001424:	6153      	str	r3, [r2, #20]
 8001426:	4b43      	ldr	r3, [pc, #268]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800142e:	613b      	str	r3, [r7, #16]
 8001430:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001432:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	4a3f      	ldr	r2, [pc, #252]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001438:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800143c:	6153      	str	r3, [r2, #20]
 800143e:	4b3d      	ldr	r3, [pc, #244]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001446:	60fb      	str	r3, [r7, #12]
 8001448:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800144a:	4b3a      	ldr	r3, [pc, #232]	@ (8001534 <MX_GPIO_Init+0x130>)
 800144c:	695b      	ldr	r3, [r3, #20]
 800144e:	4a39      	ldr	r2, [pc, #228]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001454:	6153      	str	r3, [r2, #20]
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001458:	695b      	ldr	r3, [r3, #20]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001462:	4b34      	ldr	r3, [pc, #208]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001464:	695b      	ldr	r3, [r3, #20]
 8001466:	4a33      	ldr	r2, [pc, #204]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800146c:	6153      	str	r3, [r2, #20]
 800146e:	4b31      	ldr	r3, [pc, #196]	@ (8001534 <MX_GPIO_Init+0x130>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_Pin|IN3_Pin|IN1_Pin, GPIO_PIN_RESET);
 800147a:	2200      	movs	r2, #0
 800147c:	f242 0118 	movw	r1, #8216	@ 0x2018
 8001480:	482d      	ldr	r0, [pc, #180]	@ (8001538 <MX_GPIO_Init+0x134>)
 8001482:	f001 ff93 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800148c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001490:	f001 ff8c 	bl	80033ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001494:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800149a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800149e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4824      	ldr	r0, [pc, #144]	@ (800153c <MX_GPIO_Init+0x138>)
 80014ac:	f001 fdf4 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pins : enkoder_Pin encoder1_Pin */
  GPIO_InitStruct.Pin = enkoder_Pin|encoder1_Pin;
 80014b0:	2350      	movs	r3, #80	@ 0x50
 80014b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80014b4:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80014b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80014ba:	2302      	movs	r3, #2
 80014bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	4619      	mov	r1, r3
 80014c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014c8:	f001 fde6 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN3_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin|IN1_Pin;
 80014cc:	f242 0318 	movw	r3, #8216	@ 0x2018
 80014d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d2:	2301      	movs	r3, #1
 80014d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014de:	f107 0314 	add.w	r3, r7, #20
 80014e2:	4619      	mov	r1, r3
 80014e4:	4814      	ldr	r0, [pc, #80]	@ (8001538 <MX_GPIO_Init+0x134>)
 80014e6:	f001 fdd7 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN4_Pin */
  GPIO_InitStruct.Pin = IN4_Pin;
 80014ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001506:	f001 fdc7 	bl	8003098 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	200a      	movs	r0, #10
 8001510:	f001 fbd9 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001514:	200a      	movs	r0, #10
 8001516:	f001 fbf2 	bl	8002cfe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2100      	movs	r1, #0
 800151e:	2017      	movs	r0, #23
 8001520:	f001 fbd1 	bl	8002cc6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001524:	2017      	movs	r0, #23
 8001526:	f001 fbea 	bl	8002cfe <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	@ 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000
 8001538:	48000400 	.word	0x48000400
 800153c:	48000800 	.word	0x48000800

08001540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001544:	b672      	cpsid	i
}
 8001546:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001548:	bf00      	nop
 800154a:	e7fd      	b.n	8001548 <Error_Handler+0x8>

0800154c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <HAL_MspInit+0x44>)
 8001554:	699b      	ldr	r3, [r3, #24]
 8001556:	4a0e      	ldr	r2, [pc, #56]	@ (8001590 <HAL_MspInit+0x44>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6193      	str	r3, [r2, #24]
 800155e:	4b0c      	ldr	r3, [pc, #48]	@ (8001590 <HAL_MspInit+0x44>)
 8001560:	699b      	ldr	r3, [r3, #24]
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	@ (8001590 <HAL_MspInit+0x44>)
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	4a08      	ldr	r2, [pc, #32]	@ (8001590 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001574:	61d3      	str	r3, [r2, #28]
 8001576:	4b06      	ldr	r3, [pc, #24]	@ (8001590 <HAL_MspInit+0x44>)
 8001578:	69db      	ldr	r3, [r3, #28]
 800157a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001582:	2007      	movs	r0, #7
 8001584:	f001 fb94 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001588:	bf00      	nop
 800158a:	3708      	adds	r7, #8
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08a      	sub	sp, #40	@ 0x28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	605a      	str	r2, [r3, #4]
 80015a6:	609a      	str	r2, [r3, #8]
 80015a8:	60da      	str	r2, [r3, #12]
 80015aa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a29      	ldr	r2, [pc, #164]	@ (8001658 <HAL_ADC_MspInit+0xc4>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d14b      	bne.n	800164e <HAL_ADC_MspInit+0xba>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <HAL_ADC_MspInit+0xc8>)
 80015b8:	695b      	ldr	r3, [r3, #20]
 80015ba:	4a28      	ldr	r2, [pc, #160]	@ (800165c <HAL_ADC_MspInit+0xc8>)
 80015bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015c0:	6153      	str	r3, [r2, #20]
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <HAL_ADC_MspInit+0xc8>)
 80015c4:	695b      	ldr	r3, [r3, #20]
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	4b23      	ldr	r3, [pc, #140]	@ (800165c <HAL_ADC_MspInit+0xc8>)
 80015d0:	695b      	ldr	r3, [r3, #20]
 80015d2:	4a22      	ldr	r2, [pc, #136]	@ (800165c <HAL_ADC_MspInit+0xc8>)
 80015d4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80015d8:	6153      	str	r3, [r2, #20]
 80015da:	4b20      	ldr	r3, [pc, #128]	@ (800165c <HAL_ADC_MspInit+0xc8>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80015e6:	2303      	movs	r3, #3
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	2303      	movs	r3, #3
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4819      	ldr	r0, [pc, #100]	@ (8001660 <HAL_ADC_MspInit+0xcc>)
 80015fa:	f001 fd4d 	bl	8003098 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 80015fe:	4b19      	ldr	r3, [pc, #100]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001600:	4a19      	ldr	r2, [pc, #100]	@ (8001668 <HAL_ADC_MspInit+0xd4>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001604:	4b17      	ldr	r3, [pc, #92]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800160a:	4b16      	ldr	r3, [pc, #88]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001612:	2280      	movs	r2, #128	@ 0x80
 8001614:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001616:	4b13      	ldr	r3, [pc, #76]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001618:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800161c:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800161e:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001620:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001624:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001626:	4b0f      	ldr	r3, [pc, #60]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001628:	2220      	movs	r2, #32
 800162a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800162c:	4b0d      	ldr	r3, [pc, #52]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 800162e:	2200      	movs	r2, #0
 8001630:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001632:	480c      	ldr	r0, [pc, #48]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001634:	f001 fb7d 	bl	8002d32 <HAL_DMA_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 800163e:	f7ff ff7f 	bl	8001540 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a07      	ldr	r2, [pc, #28]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 8001646:	639a      	str	r2, [r3, #56]	@ 0x38
 8001648:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <HAL_ADC_MspInit+0xd0>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 800164e:	bf00      	nop
 8001650:	3728      	adds	r7, #40	@ 0x28
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	50000100 	.word	0x50000100
 800165c:	40021000 	.word	0x40021000
 8001660:	48000800 	.word	0x48000800
 8001664:	2000025c 	.word	0x2000025c
 8001668:	40020408 	.word	0x40020408

0800166c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a26      	ldr	r2, [pc, #152]	@ (8001724 <HAL_I2C_MspInit+0xb8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d145      	bne.n	800171a <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b26      	ldr	r3, [pc, #152]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 8001690:	695b      	ldr	r3, [r3, #20]
 8001692:	4a25      	ldr	r2, [pc, #148]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 8001694:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001698:	6153      	str	r3, [r2, #20]
 800169a:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 80016a8:	695b      	ldr	r3, [r3, #20]
 80016aa:	4a1f      	ldr	r2, [pc, #124]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b0:	6153      	str	r3, [r2, #20]
 80016b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80016be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c4:	2312      	movs	r3, #18
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016cc:	2303      	movs	r3, #3
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016d0:	2304      	movs	r3, #4
 80016d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016de:	f001 fcdb 	bl	8003098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016e2:	2380      	movs	r3, #128	@ 0x80
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016e6:	2312      	movs	r3, #18
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ee:	2303      	movs	r3, #3
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016f2:	2304      	movs	r3, #4
 80016f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	480b      	ldr	r0, [pc, #44]	@ (800172c <HAL_I2C_MspInit+0xc0>)
 80016fe:	f001 fccb 	bl	8003098 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001702:	4b09      	ldr	r3, [pc, #36]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	4a08      	ldr	r2, [pc, #32]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 8001708:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800170c:	61d3      	str	r3, [r2, #28]
 800170e:	4b06      	ldr	r3, [pc, #24]	@ (8001728 <HAL_I2C_MspInit+0xbc>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001716:	60bb      	str	r3, [r7, #8]
 8001718:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800171a:	bf00      	nop
 800171c:	3728      	adds	r7, #40	@ 0x28
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40005400 	.word	0x40005400
 8001728:	40021000 	.word	0x40021000
 800172c:	48000400 	.word	0x48000400

08001730 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	@ 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a20      	ldr	r2, [pc, #128]	@ (80017d0 <HAL_TIM_Base_MspInit+0xa0>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d10c      	bne.n	800176c <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001752:	4b20      	ldr	r3, [pc, #128]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001754:	699b      	ldr	r3, [r3, #24]
 8001756:	4a1f      	ldr	r2, [pc, #124]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001758:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800175c:	6193      	str	r3, [r2, #24]
 800175e:	4b1d      	ldr	r3, [pc, #116]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001760:	699b      	ldr	r3, [r3, #24]
 8001762:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001766:	613b      	str	r3, [r7, #16]
 8001768:	693b      	ldr	r3, [r7, #16]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800176a:	e02d      	b.n	80017c8 <HAL_TIM_Base_MspInit+0x98>
  else if(htim_base->Instance==TIM2)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001774:	d128      	bne.n	80017c8 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001776:	4b17      	ldr	r3, [pc, #92]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	4a16      	ldr	r2, [pc, #88]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	61d3      	str	r3, [r2, #28]
 8001782:	4b14      	ldr	r3, [pc, #80]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	4a10      	ldr	r2, [pc, #64]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001794:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001798:	6153      	str	r3, [r2, #20]
 800179a:	4b0e      	ldr	r3, [pc, #56]	@ (80017d4 <HAL_TIM_Base_MspInit+0xa4>)
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017a6:	2301      	movs	r3, #1
 80017a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b2:	2300      	movs	r3, #0
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017b6:	2301      	movs	r3, #1
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 0314 	add.w	r3, r7, #20
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017c4:	f001 fc68 	bl	8003098 <HAL_GPIO_Init>
}
 80017c8:	bf00      	nop
 80017ca:	3728      	adds	r7, #40	@ 0x28
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40012c00 	.word	0x40012c00
 80017d4:	40021000 	.word	0x40021000

080017d8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b08a      	sub	sp, #40	@ 0x28
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a23      	ldr	r2, [pc, #140]	@ (8001884 <HAL_TIM_MspPostInit+0xac>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d11e      	bne.n	8001838 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017fa:	4b23      	ldr	r3, [pc, #140]	@ (8001888 <HAL_TIM_MspPostInit+0xb0>)
 80017fc:	695b      	ldr	r3, [r3, #20]
 80017fe:	4a22      	ldr	r2, [pc, #136]	@ (8001888 <HAL_TIM_MspPostInit+0xb0>)
 8001800:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001804:	6153      	str	r3, [r2, #20]
 8001806:	4b20      	ldr	r3, [pc, #128]	@ (8001888 <HAL_TIM_MspPostInit+0xb0>)
 8001808:	695b      	ldr	r3, [r3, #20]
 800180a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180e:	613b      	str	r3, [r7, #16]
 8001810:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001812:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001818:	2302      	movs	r3, #2
 800181a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181c:	2300      	movs	r3, #0
 800181e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001824:	2306      	movs	r3, #6
 8001826:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001828:	f107 0314 	add.w	r3, r7, #20
 800182c:	4619      	mov	r1, r3
 800182e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001832:	f001 fc31 	bl	8003098 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001836:	e021      	b.n	800187c <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001840:	d11c      	bne.n	800187c <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_TIM_MspPostInit+0xb0>)
 8001844:	695b      	ldr	r3, [r3, #20]
 8001846:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_TIM_MspPostInit+0xb0>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800184c:	6153      	str	r3, [r2, #20]
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_TIM_MspPostInit+0xb0>)
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800185a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800185e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001860:	2302      	movs	r3, #2
 8001862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186c:	2301      	movs	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_TIM_MspPostInit+0xb4>)
 8001878:	f001 fc0e 	bl	8003098 <HAL_GPIO_Init>
}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	@ 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40012c00 	.word	0x40012c00
 8001888:	40021000 	.word	0x40021000
 800188c:	48000400 	.word	0x48000400

08001890 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b08a      	sub	sp, #40	@ 0x28
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a17      	ldr	r2, [pc, #92]	@ (800190c <HAL_UART_MspInit+0x7c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d128      	bne.n	8001904 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b2:	4b17      	ldr	r3, [pc, #92]	@ (8001910 <HAL_UART_MspInit+0x80>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	4a16      	ldr	r2, [pc, #88]	@ (8001910 <HAL_UART_MspInit+0x80>)
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018bc:	61d3      	str	r3, [r2, #28]
 80018be:	4b14      	ldr	r3, [pc, #80]	@ (8001910 <HAL_UART_MspInit+0x80>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	4b11      	ldr	r3, [pc, #68]	@ (8001910 <HAL_UART_MspInit+0x80>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	4a10      	ldr	r2, [pc, #64]	@ (8001910 <HAL_UART_MspInit+0x80>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d4:	6153      	str	r3, [r2, #20]
 80018d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001910 <HAL_UART_MspInit+0x80>)
 80018d8:	695b      	ldr	r3, [r3, #20]
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018e2:	230c      	movs	r3, #12
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f2:	2307      	movs	r3, #7
 80018f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001900:	f001 fbca 	bl	8003098 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	@ 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40004400 	.word	0x40004400
 8001910:	40021000 	.word	0x40021000

08001914 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <NMI_Handler+0x4>

0800191c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <HardFault_Handler+0x4>

08001924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <MemManage_Handler+0x4>

0800192c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	bf00      	nop
 800193a:	e7fd      	b.n	8001938 <UsageFault_Handler+0x4>

0800193c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800196a:	f000 f963 	bl	8001c34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}

08001972 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enkoder_Pin);
 8001976:	2010      	movs	r0, #16
 8001978:	f001 fd30 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder1_Pin);
 8001984:	2040      	movs	r0, #64	@ 0x40
 8001986:	f001 fd29 	bl	80033dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001994:	4802      	ldr	r0, [pc, #8]	@ (80019a0 <DMA2_Channel1_IRQHandler+0x10>)
 8001996:	f001 fa72 	bl	8002e7e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	2000025c 	.word	0x2000025c

080019a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  return 1;
 80019a8:	2301      	movs	r3, #1
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <_kill>:

int _kill(int pid, int sig)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019be:	f006 f9b5 	bl	8007d2c <__errno>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2216      	movs	r2, #22
 80019c6:	601a      	str	r2, [r3, #0]
  return -1;
 80019c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <_exit>:

void _exit (int status)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019dc:	f04f 31ff 	mov.w	r1, #4294967295
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f7ff ffe7 	bl	80019b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019e6:	bf00      	nop
 80019e8:	e7fd      	b.n	80019e6 <_exit+0x12>

080019ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	60f8      	str	r0, [r7, #12]
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
 80019fa:	e00a      	b.n	8001a12 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019fc:	f3af 8000 	nop.w
 8001a00:	4601      	mov	r1, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1c5a      	adds	r2, r3, #1
 8001a06:	60ba      	str	r2, [r7, #8]
 8001a08:	b2ca      	uxtb	r2, r1
 8001a0a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	dbf0      	blt.n	80019fc <_read+0x12>
  }

  return len;
 8001a1a:	687b      	ldr	r3, [r7, #4]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
 8001a34:	e009      	b.n	8001a4a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	1c5a      	adds	r2, r3, #1
 8001a3a:	60ba      	str	r2, [r7, #8]
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7ff f8ba 	bl	8000bb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	3301      	adds	r3, #1
 8001a48:	617b      	str	r3, [r7, #20]
 8001a4a:	697a      	ldr	r2, [r7, #20]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dbf1      	blt.n	8001a36 <_write+0x12>
  }
  return len;
 8001a52:	687b      	ldr	r3, [r7, #4]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_close>:

int _close(int file)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a84:	605a      	str	r2, [r3, #4]
  return 0;
 8001a86:	2300      	movs	r3, #0
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <_isatty>:

int _isatty(int file)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a9c:	2301      	movs	r3, #1
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b085      	sub	sp, #20
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ab6:	2300      	movs	r3, #0
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3714      	adds	r7, #20
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001acc:	4a14      	ldr	r2, [pc, #80]	@ (8001b20 <_sbrk+0x5c>)
 8001ace:	4b15      	ldr	r3, [pc, #84]	@ (8001b24 <_sbrk+0x60>)
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <_sbrk+0x64>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d102      	bne.n	8001ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <_sbrk+0x64>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <_sbrk+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <_sbrk+0x64>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4413      	add	r3, r2
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d207      	bcs.n	8001b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001af4:	f006 f91a 	bl	8007d2c <__errno>
 8001af8:	4603      	mov	r3, r0
 8001afa:	220c      	movs	r2, #12
 8001afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e009      	b.n	8001b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b04:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <_sbrk+0x64>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b0a:	4b07      	ldr	r3, [pc, #28]	@ (8001b28 <_sbrk+0x64>)
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	4a05      	ldr	r2, [pc, #20]	@ (8001b28 <_sbrk+0x64>)
 8001b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b16:	68fb      	ldr	r3, [r7, #12]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	20010000 	.word	0x20010000
 8001b24:	00000400 	.word	0x00000400
 8001b28:	20000430 	.word	0x20000430
 8001b2c:	20000588 	.word	0x20000588

08001b30 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b34:	4b06      	ldr	r3, [pc, #24]	@ (8001b50 <SystemInit+0x20>)
 8001b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3a:	4a05      	ldr	r2, [pc, #20]	@ (8001b50 <SystemInit+0x20>)
 8001b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b44:	bf00      	nop
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	e000ed00 	.word	0xe000ed00

08001b54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b8c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b58:	f7ff ffea 	bl	8001b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b5c:	480c      	ldr	r0, [pc, #48]	@ (8001b90 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b5e:	490d      	ldr	r1, [pc, #52]	@ (8001b94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b60:	4a0d      	ldr	r2, [pc, #52]	@ (8001b98 <LoopForever+0xe>)
  movs r3, #0
 8001b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b64:	e002      	b.n	8001b6c <LoopCopyDataInit>

08001b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b6a:	3304      	adds	r3, #4

08001b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b70:	d3f9      	bcc.n	8001b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b72:	4a0a      	ldr	r2, [pc, #40]	@ (8001b9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b74:	4c0a      	ldr	r4, [pc, #40]	@ (8001ba0 <LoopForever+0x16>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b78:	e001      	b.n	8001b7e <LoopFillZerobss>

08001b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b7c:	3204      	adds	r2, #4

08001b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b80:	d3fb      	bcc.n	8001b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b82:	f006 f8d9 	bl	8007d38 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b86:	f7ff f84f 	bl	8000c28 <main>

08001b8a <LoopForever>:

LoopForever:
    b LoopForever
 8001b8a:	e7fe      	b.n	8001b8a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b8c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b94:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001b98:	08009ee4 	.word	0x08009ee4
  ldr r2, =_sbss
 8001b9c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001ba0:	20000584 	.word	0x20000584

08001ba4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ba4:	e7fe      	b.n	8001ba4 <ADC1_2_IRQHandler>
	...

08001ba8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bac:	4b08      	ldr	r3, [pc, #32]	@ (8001bd0 <HAL_Init+0x28>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a07      	ldr	r2, [pc, #28]	@ (8001bd0 <HAL_Init+0x28>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bb8:	2003      	movs	r0, #3
 8001bba:	f001 f879 	bl	8002cb0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f000 f808 	bl	8001bd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc4:	f7ff fcc2 	bl	800154c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bc8:	2300      	movs	r3, #0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40022000 	.word	0x40022000

08001bd4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bdc:	4b12      	ldr	r3, [pc, #72]	@ (8001c28 <HAL_InitTick+0x54>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b12      	ldr	r3, [pc, #72]	@ (8001c2c <HAL_InitTick+0x58>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	4619      	mov	r1, r3
 8001be6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bea:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f001 f891 	bl	8002d1a <HAL_SYSTICK_Config>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00e      	b.n	8001c20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2b0f      	cmp	r3, #15
 8001c06:	d80a      	bhi.n	8001c1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c08:	2200      	movs	r2, #0
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f001 f859 	bl	8002cc6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c14:	4a06      	ldr	r2, [pc, #24]	@ (8001c30 <HAL_InitTick+0x5c>)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000001c 	.word	0x2000001c
 8001c2c:	20000024 	.word	0x20000024
 8001c30:	20000020 	.word	0x20000020

08001c34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c38:	4b06      	ldr	r3, [pc, #24]	@ (8001c54 <HAL_IncTick+0x20>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	4b06      	ldr	r3, [pc, #24]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4413      	add	r3, r2
 8001c44:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <HAL_IncTick+0x24>)
 8001c46:	6013      	str	r3, [r2, #0]
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	20000024 	.word	0x20000024
 8001c58:	20000434 	.word	0x20000434

08001c5c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <HAL_GetTick+0x14>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	20000434 	.word	0x20000434

08001c74 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b09a      	sub	sp, #104	@ 0x68
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e1e3      	b.n	8002098 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d176      	bne.n	8001dd0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d152      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff fc45 	bl	8001594 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d13b      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 fe93 	bl	8002a44 <ADC_Disable>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f003 0310 	and.w	r3, r3, #16
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d12f      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
 8001d30:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d12b      	bne.n	8001d90 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d40:	f023 0302 	bic.w	r3, r3, #2
 8001d44:	f043 0202 	orr.w	r2, r3, #2
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d5a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	689a      	ldr	r2, [r3, #8]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001d6a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d6c:	4b92      	ldr	r3, [pc, #584]	@ (8001fb8 <HAL_ADC_Init+0x308>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a92      	ldr	r2, [pc, #584]	@ (8001fbc <HAL_ADC_Init+0x30c>)
 8001d72:	fba2 2303 	umull	r2, r3, r2, r3
 8001d76:	0c9a      	lsrs	r2, r3, #18
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	005b      	lsls	r3, r3, #1
 8001d80:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d82:	e002      	b.n	8001d8a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	3b01      	subs	r3, #1
 8001d88:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d1f9      	bne.n	8001d84 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d007      	beq.n	8001dae <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689b      	ldr	r3, [r3, #8]
 8001da4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001da8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001dac:	d110      	bne.n	8001dd0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	f023 0312 	bic.w	r3, r3, #18
 8001db6:	f043 0210 	orr.w	r2, r3, #16
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc2:	f043 0201 	orr.w	r2, r3, #1
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	f040 8150 	bne.w	800207e <HAL_ADC_Init+0x3ce>
 8001dde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	f040 814b 	bne.w	800207e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	f040 8143 	bne.w	800207e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dfc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001e00:	f043 0202 	orr.w	r2, r3, #2
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e10:	d004      	beq.n	8001e1c <HAL_ADC_Init+0x16c>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a6a      	ldr	r2, [pc, #424]	@ (8001fc0 <HAL_ADC_Init+0x310>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_ADC_Init+0x170>
 8001e1c:	4b69      	ldr	r3, [pc, #420]	@ (8001fc4 <HAL_ADC_Init+0x314>)
 8001e1e:	e000      	b.n	8001e22 <HAL_ADC_Init+0x172>
 8001e20:	4b69      	ldr	r3, [pc, #420]	@ (8001fc8 <HAL_ADC_Init+0x318>)
 8001e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e2c:	d102      	bne.n	8001e34 <HAL_ADC_Init+0x184>
 8001e2e:	4b64      	ldr	r3, [pc, #400]	@ (8001fc0 <HAL_ADC_Init+0x310>)
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	e01a      	b.n	8001e6a <HAL_ADC_Init+0x1ba>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a61      	ldr	r2, [pc, #388]	@ (8001fc0 <HAL_ADC_Init+0x310>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d103      	bne.n	8001e46 <HAL_ADC_Init+0x196>
 8001e3e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	e011      	b.n	8001e6a <HAL_ADC_Init+0x1ba>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a60      	ldr	r2, [pc, #384]	@ (8001fcc <HAL_ADC_Init+0x31c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d102      	bne.n	8001e56 <HAL_ADC_Init+0x1a6>
 8001e50:	4b5f      	ldr	r3, [pc, #380]	@ (8001fd0 <HAL_ADC_Init+0x320>)
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	e009      	b.n	8001e6a <HAL_ADC_Init+0x1ba>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a5d      	ldr	r2, [pc, #372]	@ (8001fd0 <HAL_ADC_Init+0x320>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d102      	bne.n	8001e66 <HAL_ADC_Init+0x1b6>
 8001e60:	4b5a      	ldr	r3, [pc, #360]	@ (8001fcc <HAL_ADC_Init+0x31c>)
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e001      	b.n	8001e6a <HAL_ADC_Init+0x1ba>
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 0303 	and.w	r3, r3, #3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d108      	bne.n	8001e8a <HAL_ADC_Init+0x1da>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d101      	bne.n	8001e8a <HAL_ADC_Init+0x1da>
 8001e86:	2301      	movs	r3, #1
 8001e88:	e000      	b.n	8001e8c <HAL_ADC_Init+0x1dc>
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d11c      	bne.n	8001eca <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001e90:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d010      	beq.n	8001eb8 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0303 	and.w	r3, r3, #3
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d107      	bne.n	8001eb2 <HAL_ADC_Init+0x202>
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Init+0x202>
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e000      	b.n	8001eb4 <HAL_ADC_Init+0x204>
 8001eb2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d108      	bne.n	8001eca <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001eb8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	431a      	orrs	r2, r3
 8001ec6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ec8:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7e5b      	ldrb	r3, [r3, #25]
 8001ece:	035b      	lsls	r3, r3, #13
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001ed4:	2a01      	cmp	r2, #1
 8001ed6:	d002      	beq.n	8001ede <HAL_ADC_Init+0x22e>
 8001ed8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001edc:	e000      	b.n	8001ee0 <HAL_ADC_Init+0x230>
 8001ede:	2200      	movs	r2, #0
 8001ee0:	431a      	orrs	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d11b      	bne.n	8001f36 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7e5b      	ldrb	r3, [r3, #25]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d109      	bne.n	8001f1a <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	045a      	lsls	r2, r3, #17
 8001f0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8001f18:	e00d      	b.n	8001f36 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8001f22:	f043 0220 	orr.w	r2, r3, #32
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d054      	beq.n	8001fe8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a22      	ldr	r2, [pc, #136]	@ (8001fcc <HAL_ADC_Init+0x31c>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d004      	beq.n	8001f52 <HAL_ADC_Init+0x2a2>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a20      	ldr	r2, [pc, #128]	@ (8001fd0 <HAL_ADC_Init+0x320>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d140      	bne.n	8001fd4 <HAL_ADC_Init+0x324>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f56:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 8001f5a:	d02a      	beq.n	8001fb2 <HAL_ADC_Init+0x302>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f64:	d022      	beq.n	8001fac <HAL_ADC_Init+0x2fc>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f6a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 8001f6e:	d01a      	beq.n	8001fa6 <HAL_ADC_Init+0x2f6>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f74:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001f78:	d012      	beq.n	8001fa0 <HAL_ADC_Init+0x2f0>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f7e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001f82:	d00a      	beq.n	8001f9a <HAL_ADC_Init+0x2ea>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f88:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001f8c:	d002      	beq.n	8001f94 <HAL_ADC_Init+0x2e4>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	e023      	b.n	8001fdc <HAL_ADC_Init+0x32c>
 8001f94:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001f98:	e020      	b.n	8001fdc <HAL_ADC_Init+0x32c>
 8001f9a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001f9e:	e01d      	b.n	8001fdc <HAL_ADC_Init+0x32c>
 8001fa0:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001fa4:	e01a      	b.n	8001fdc <HAL_ADC_Init+0x32c>
 8001fa6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001faa:	e017      	b.n	8001fdc <HAL_ADC_Init+0x32c>
 8001fac:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001fb0:	e014      	b.n	8001fdc <HAL_ADC_Init+0x32c>
 8001fb2:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001fb6:	e011      	b.n	8001fdc <HAL_ADC_Init+0x32c>
 8001fb8:	2000001c 	.word	0x2000001c
 8001fbc:	431bde83 	.word	0x431bde83
 8001fc0:	50000100 	.word	0x50000100
 8001fc4:	50000300 	.word	0x50000300
 8001fc8:	50000700 	.word	0x50000700
 8001fcc:	50000400 	.word	0x50000400
 8001fd0:	50000500 	.word	0x50000500
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d114      	bne.n	8002020 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	6812      	ldr	r2, [r2, #0]
 8002000:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002004:	f023 0302 	bic.w	r3, r3, #2
 8002008:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	7e1b      	ldrb	r3, [r3, #24]
 800200e:	039a      	lsls	r2, r3, #14
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	4313      	orrs	r3, r2
 800201a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800201c:	4313      	orrs	r3, r2
 800201e:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	4b1e      	ldr	r3, [pc, #120]	@ (80020a0 <HAL_ADC_Init+0x3f0>)
 8002028:	4013      	ands	r3, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8002030:	430b      	orrs	r3, r1
 8002032:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691b      	ldr	r3, [r3, #16]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d10c      	bne.n	8002056 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f023 010f 	bic.w	r1, r3, #15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	69db      	ldr	r3, [r3, #28]
 800204a:	1e5a      	subs	r2, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	430a      	orrs	r2, r1
 8002052:	631a      	str	r2, [r3, #48]	@ 0x30
 8002054:	e007      	b.n	8002066 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f022 020f 	bic.w	r2, r2, #15
 8002064:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002070:	f023 0303 	bic.w	r3, r3, #3
 8002074:	f043 0201 	orr.w	r2, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	641a      	str	r2, [r3, #64]	@ 0x40
 800207c:	e00a      	b.n	8002094 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002082:	f023 0312 	bic.w	r3, r3, #18
 8002086:	f043 0210 	orr.w	r2, r3, #16
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800208e:	2301      	movs	r3, #1
 8002090:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8002094:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002098:	4618      	mov	r0, r3
 800209a:	3768      	adds	r7, #104	@ 0x68
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	fff0c007 	.word	0xfff0c007

080020a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020b0:	2300      	movs	r3, #0
 80020b2:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	f003 0304 	and.w	r3, r3, #4
 80020be:	2b00      	cmp	r3, #0
 80020c0:	f040 80f7 	bne.w	80022b2 <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_ADC_Start_DMA+0x2e>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e0f2      	b.n	80022b8 <HAL_ADC_Start_DMA+0x214>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020e2:	d004      	beq.n	80020ee <HAL_ADC_Start_DMA+0x4a>
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a75      	ldr	r2, [pc, #468]	@ (80022c0 <HAL_ADC_Start_DMA+0x21c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d109      	bne.n	8002102 <HAL_ADC_Start_DMA+0x5e>
 80020ee:	4b75      	ldr	r3, [pc, #468]	@ (80022c4 <HAL_ADC_Start_DMA+0x220>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 031f 	and.w	r3, r3, #31
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	bf0c      	ite	eq
 80020fa:	2301      	moveq	r3, #1
 80020fc:	2300      	movne	r3, #0
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	e008      	b.n	8002114 <HAL_ADC_Start_DMA+0x70>
 8002102:	4b71      	ldr	r3, [pc, #452]	@ (80022c8 <HAL_ADC_Start_DMA+0x224>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	f003 031f 	and.w	r3, r3, #31
 800210a:	2b00      	cmp	r3, #0
 800210c:	bf0c      	ite	eq
 800210e:	2301      	moveq	r3, #1
 8002110:	2300      	movne	r3, #0
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	f000 80c5 	beq.w	80022a4 <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800211a:	68f8      	ldr	r0, [r7, #12]
 800211c:	f000 fc2e 	bl	800297c <ADC_Enable>
 8002120:	4603      	mov	r3, r0
 8002122:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002124:	7dfb      	ldrb	r3, [r7, #23]
 8002126:	2b00      	cmp	r3, #0
 8002128:	f040 80b7 	bne.w	800229a <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002148:	d004      	beq.n	8002154 <HAL_ADC_Start_DMA+0xb0>
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a5c      	ldr	r2, [pc, #368]	@ (80022c0 <HAL_ADC_Start_DMA+0x21c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d106      	bne.n	8002162 <HAL_ADC_Start_DMA+0xbe>
 8002154:	4b5b      	ldr	r3, [pc, #364]	@ (80022c4 <HAL_ADC_Start_DMA+0x220>)
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f003 031f 	and.w	r3, r3, #31
 800215c:	2b00      	cmp	r3, #0
 800215e:	d010      	beq.n	8002182 <HAL_ADC_Start_DMA+0xde>
 8002160:	e005      	b.n	800216e <HAL_ADC_Start_DMA+0xca>
 8002162:	4b59      	ldr	r3, [pc, #356]	@ (80022c8 <HAL_ADC_Start_DMA+0x224>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	2b00      	cmp	r3, #0
 800216c:	d009      	beq.n	8002182 <HAL_ADC_Start_DMA+0xde>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002176:	d004      	beq.n	8002182 <HAL_ADC_Start_DMA+0xde>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a53      	ldr	r2, [pc, #332]	@ (80022cc <HAL_ADC_Start_DMA+0x228>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d115      	bne.n	80021ae <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002186:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d036      	beq.n	800220a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80021a4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80021ac:	e02d      	b.n	800220a <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021c2:	d004      	beq.n	80021ce <HAL_ADC_Start_DMA+0x12a>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a3d      	ldr	r2, [pc, #244]	@ (80022c0 <HAL_ADC_Start_DMA+0x21c>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d10a      	bne.n	80021e4 <HAL_ADC_Start_DMA+0x140>
 80021ce:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	bf14      	ite	ne
 80021dc:	2301      	movne	r3, #1
 80021de:	2300      	moveq	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	e008      	b.n	80021f6 <HAL_ADC_Start_DMA+0x152>
 80021e4:	4b39      	ldr	r3, [pc, #228]	@ (80022cc <HAL_ADC_Start_DMA+0x228>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d007      	beq.n	800220a <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021fe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002202:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800220e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002216:	d106      	bne.n	8002226 <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221c:	f023 0206 	bic.w	r2, r3, #6
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	645a      	str	r2, [r3, #68]	@ 0x44
 8002224:	e002      	b.n	800222c <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2200      	movs	r2, #0
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	2200      	movs	r2, #0
 8002230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002238:	4a25      	ldr	r2, [pc, #148]	@ (80022d0 <HAL_ADC_Start_DMA+0x22c>)
 800223a:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002240:	4a24      	ldr	r2, [pc, #144]	@ (80022d4 <HAL_ADC_Start_DMA+0x230>)
 8002242:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002248:	4a23      	ldr	r2, [pc, #140]	@ (80022d8 <HAL_ADC_Start_DMA+0x234>)
 800224a:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	221c      	movs	r2, #28
 8002252:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f042 0210 	orr.w	r2, r2, #16
 8002262:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f042 0201 	orr.w	r2, r2, #1
 8002272:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	3340      	adds	r3, #64	@ 0x40
 800227e:	4619      	mov	r1, r3
 8002280:	68ba      	ldr	r2, [r7, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	f000 fd9c 	bl	8002dc0 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689a      	ldr	r2, [r3, #8]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0204 	orr.w	r2, r2, #4
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	e00d      	b.n	80022b6 <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2200      	movs	r2, #0
 800229e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80022a2:	e008      	b.n	80022b6 <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	2200      	movs	r2, #0
 80022ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80022b0:	e001      	b.n	80022b6 <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022b2:	2302      	movs	r3, #2
 80022b4:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	50000100 	.word	0x50000100
 80022c4:	50000300 	.word	0x50000300
 80022c8:	50000700 	.word	0x50000700
 80022cc:	50000400 	.word	0x50000400
 80022d0:	080028b1 	.word	0x080028b1
 80022d4:	0800292b 	.word	0x0800292b
 80022d8:	08002947 	.word	0x08002947

080022dc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022dc:	b480      	push	{r7}
 80022de:	b09b      	sub	sp, #108	@ 0x6c
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e6:	2300      	movs	r3, #0
 80022e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d101      	bne.n	80022fe <HAL_ADC_ConfigChannel+0x22>
 80022fa:	2302      	movs	r3, #2
 80022fc:	e2c8      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5b4>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2201      	movs	r2, #1
 8002302:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	f040 82ac 	bne.w	800286e <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b04      	cmp	r3, #4
 800231c:	d81c      	bhi.n	8002358 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	461a      	mov	r2, r3
 8002332:	231f      	movs	r3, #31
 8002334:	4093      	lsls	r3, r2
 8002336:	43db      	mvns	r3, r3
 8002338:	4019      	ands	r1, r3
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	6818      	ldr	r0, [r3, #0]
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	4613      	mov	r3, r2
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	4413      	add	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	fa00 f203 	lsl.w	r2, r0, r3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	631a      	str	r2, [r3, #48]	@ 0x30
 8002356:	e063      	b.n	8002420 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	2b09      	cmp	r3, #9
 800235e:	d81e      	bhi.n	800239e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	3b1e      	subs	r3, #30
 8002374:	221f      	movs	r2, #31
 8002376:	fa02 f303 	lsl.w	r3, r2, r3
 800237a:	43db      	mvns	r3, r3
 800237c:	4019      	ands	r1, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685a      	ldr	r2, [r3, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	4413      	add	r3, r2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	3b1e      	subs	r3, #30
 8002390:	fa00 f203 	lsl.w	r2, r0, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	430a      	orrs	r2, r1
 800239a:	635a      	str	r2, [r3, #52]	@ 0x34
 800239c:	e040      	b.n	8002420 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b0e      	cmp	r3, #14
 80023a4:	d81e      	bhi.n	80023e4 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	4613      	mov	r3, r2
 80023b2:	005b      	lsls	r3, r3, #1
 80023b4:	4413      	add	r3, r2
 80023b6:	005b      	lsls	r3, r3, #1
 80023b8:	3b3c      	subs	r3, #60	@ 0x3c
 80023ba:	221f      	movs	r2, #31
 80023bc:	fa02 f303 	lsl.w	r3, r2, r3
 80023c0:	43db      	mvns	r3, r3
 80023c2:	4019      	ands	r1, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	3b3c      	subs	r3, #60	@ 0x3c
 80023d6:	fa00 f203 	lsl.w	r2, r0, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	430a      	orrs	r2, r1
 80023e0:	639a      	str	r2, [r3, #56]	@ 0x38
 80023e2:	e01d      	b.n	8002420 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	3b5a      	subs	r3, #90	@ 0x5a
 80023f8:	221f      	movs	r2, #31
 80023fa:	fa02 f303 	lsl.w	r3, r2, r3
 80023fe:	43db      	mvns	r3, r3
 8002400:	4019      	ands	r1, r3
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	6818      	ldr	r0, [r3, #0]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685a      	ldr	r2, [r3, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	3b5a      	subs	r3, #90	@ 0x5a
 8002414:	fa00 f203 	lsl.w	r2, r0, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 80e5 	bne.w	80025fa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b09      	cmp	r3, #9
 8002436:	d91c      	bls.n	8002472 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6999      	ldr	r1, [r3, #24]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	4413      	add	r3, r2
 8002448:	3b1e      	subs	r3, #30
 800244a:	2207      	movs	r2, #7
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	4019      	ands	r1, r3
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	6898      	ldr	r0, [r3, #8]
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4613      	mov	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	4413      	add	r3, r2
 8002462:	3b1e      	subs	r3, #30
 8002464:	fa00 f203 	lsl.w	r2, r0, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	619a      	str	r2, [r3, #24]
 8002470:	e019      	b.n	80024a6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6959      	ldr	r1, [r3, #20]
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4613      	mov	r3, r2
 800247e:	005b      	lsls	r3, r3, #1
 8002480:	4413      	add	r3, r2
 8002482:	2207      	movs	r2, #7
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	4019      	ands	r1, r3
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	6898      	ldr	r0, [r3, #8]
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4613      	mov	r3, r2
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	4413      	add	r3, r2
 800249a:	fa00 f203 	lsl.w	r2, r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695a      	ldr	r2, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	08db      	lsrs	r3, r3, #3
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	3b01      	subs	r3, #1
 80024c4:	2b03      	cmp	r3, #3
 80024c6:	d84f      	bhi.n	8002568 <HAL_ADC_ConfigChannel+0x28c>
 80024c8:	a201      	add	r2, pc, #4	@ (adr r2, 80024d0 <HAL_ADC_ConfigChannel+0x1f4>)
 80024ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ce:	bf00      	nop
 80024d0:	080024e1 	.word	0x080024e1
 80024d4:	08002503 	.word	0x08002503
 80024d8:	08002525 	.word	0x08002525
 80024dc:	08002547 	.word	0x08002547
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024e6:	4b99      	ldr	r3, [pc, #612]	@ (800274c <HAL_ADC_ConfigChannel+0x470>)
 80024e8:	4013      	ands	r3, r2
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	0691      	lsls	r1, r2, #26
 80024f0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024f2:	430a      	orrs	r2, r1
 80024f4:	431a      	orrs	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80024fe:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002500:	e07b      	b.n	80025fa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002508:	4b90      	ldr	r3, [pc, #576]	@ (800274c <HAL_ADC_ConfigChannel+0x470>)
 800250a:	4013      	ands	r3, r2
 800250c:	683a      	ldr	r2, [r7, #0]
 800250e:	6812      	ldr	r2, [r2, #0]
 8002510:	0691      	lsls	r1, r2, #26
 8002512:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002514:	430a      	orrs	r2, r1
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002520:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002522:	e06a      	b.n	80025fa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800252a:	4b88      	ldr	r3, [pc, #544]	@ (800274c <HAL_ADC_ConfigChannel+0x470>)
 800252c:	4013      	ands	r3, r2
 800252e:	683a      	ldr	r2, [r7, #0]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	0691      	lsls	r1, r2, #26
 8002534:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002536:	430a      	orrs	r2, r1
 8002538:	431a      	orrs	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002542:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002544:	e059      	b.n	80025fa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800254c:	4b7f      	ldr	r3, [pc, #508]	@ (800274c <HAL_ADC_ConfigChannel+0x470>)
 800254e:	4013      	ands	r3, r2
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	0691      	lsls	r1, r2, #26
 8002556:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002558:	430a      	orrs	r2, r1
 800255a:	431a      	orrs	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002564:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002566:	e048      	b.n	80025fa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800256e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	069b      	lsls	r3, r3, #26
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800258a:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002592:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	069b      	lsls	r3, r3, #26
 800259c:	429a      	cmp	r2, r3
 800259e:	d107      	bne.n	80025b0 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ae:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025b6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	069b      	lsls	r3, r3, #26
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d107      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025d2:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025da:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	069b      	lsls	r3, r3, #26
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d107      	bne.n	80025f8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025f6:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 80025f8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0303 	and.w	r3, r3, #3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d108      	bne.n	800261a <HAL_ADC_ConfigChannel+0x33e>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b01      	cmp	r3, #1
 8002614:	d101      	bne.n	800261a <HAL_ADC_ConfigChannel+0x33e>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <HAL_ADC_ConfigChannel+0x340>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 8131 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d00f      	beq.n	800264a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2201      	movs	r2, #1
 8002638:	fa02 f303 	lsl.w	r3, r2, r3
 800263c:	43da      	mvns	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	400a      	ands	r2, r1
 8002644:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002648:	e049      	b.n	80026de <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2201      	movs	r2, #1
 8002658:	409a      	lsls	r2, r3
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2b09      	cmp	r3, #9
 800266a:	d91c      	bls.n	80026a6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6999      	ldr	r1, [r3, #24]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	3b1b      	subs	r3, #27
 800267e:	2207      	movs	r2, #7
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	43db      	mvns	r3, r3
 8002686:	4019      	ands	r1, r3
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	6898      	ldr	r0, [r3, #8]
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4613      	mov	r3, r2
 8002692:	005b      	lsls	r3, r3, #1
 8002694:	4413      	add	r3, r2
 8002696:	3b1b      	subs	r3, #27
 8002698:	fa00 f203 	lsl.w	r2, r0, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	619a      	str	r2, [r3, #24]
 80026a4:	e01b      	b.n	80026de <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	4613      	mov	r3, r2
 80026b4:	005b      	lsls	r3, r3, #1
 80026b6:	4413      	add	r3, r2
 80026b8:	2207      	movs	r2, #7
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	4019      	ands	r1, r3
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6898      	ldr	r0, [r3, #8]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	4613      	mov	r3, r2
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	4413      	add	r3, r2
 80026d2:	fa00 f203 	lsl.w	r2, r0, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	430a      	orrs	r2, r1
 80026dc:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026e6:	d004      	beq.n	80026f2 <HAL_ADC_ConfigChannel+0x416>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a18      	ldr	r2, [pc, #96]	@ (8002750 <HAL_ADC_ConfigChannel+0x474>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_ADC_ConfigChannel+0x41a>
 80026f2:	4b18      	ldr	r3, [pc, #96]	@ (8002754 <HAL_ADC_ConfigChannel+0x478>)
 80026f4:	e000      	b.n	80026f8 <HAL_ADC_ConfigChannel+0x41c>
 80026f6:	4b18      	ldr	r3, [pc, #96]	@ (8002758 <HAL_ADC_ConfigChannel+0x47c>)
 80026f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2b10      	cmp	r3, #16
 8002700:	d105      	bne.n	800270e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002702:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800270a:	2b00      	cmp	r3, #0
 800270c:	d015      	beq.n	800273a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002712:	2b11      	cmp	r3, #17
 8002714:	d105      	bne.n	8002722 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002716:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00b      	beq.n	800273a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002726:	2b12      	cmp	r3, #18
 8002728:	f040 80ac 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800272c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002734:	2b00      	cmp	r3, #0
 8002736:	f040 80a5 	bne.w	8002884 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002742:	d10b      	bne.n	800275c <HAL_ADC_ConfigChannel+0x480>
 8002744:	4b02      	ldr	r3, [pc, #8]	@ (8002750 <HAL_ADC_ConfigChannel+0x474>)
 8002746:	60fb      	str	r3, [r7, #12]
 8002748:	e023      	b.n	8002792 <HAL_ADC_ConfigChannel+0x4b6>
 800274a:	bf00      	nop
 800274c:	83fff000 	.word	0x83fff000
 8002750:	50000100 	.word	0x50000100
 8002754:	50000300 	.word	0x50000300
 8002758:	50000700 	.word	0x50000700
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a4e      	ldr	r2, [pc, #312]	@ (800289c <HAL_ADC_ConfigChannel+0x5c0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d103      	bne.n	800276e <HAL_ADC_ConfigChannel+0x492>
 8002766:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	e011      	b.n	8002792 <HAL_ADC_ConfigChannel+0x4b6>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a4b      	ldr	r2, [pc, #300]	@ (80028a0 <HAL_ADC_ConfigChannel+0x5c4>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d102      	bne.n	800277e <HAL_ADC_ConfigChannel+0x4a2>
 8002778:	4b4a      	ldr	r3, [pc, #296]	@ (80028a4 <HAL_ADC_ConfigChannel+0x5c8>)
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e009      	b.n	8002792 <HAL_ADC_ConfigChannel+0x4b6>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a48      	ldr	r2, [pc, #288]	@ (80028a4 <HAL_ADC_ConfigChannel+0x5c8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d102      	bne.n	800278e <HAL_ADC_ConfigChannel+0x4b2>
 8002788:	4b45      	ldr	r3, [pc, #276]	@ (80028a0 <HAL_ADC_ConfigChannel+0x5c4>)
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e001      	b.n	8002792 <HAL_ADC_ConfigChannel+0x4b6>
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 0303 	and.w	r3, r3, #3
 800279c:	2b01      	cmp	r3, #1
 800279e:	d108      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x4d6>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_ADC_ConfigChannel+0x4d6>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e000      	b.n	80027b4 <HAL_ADC_ConfigChannel+0x4d8>
 80027b2:	2300      	movs	r3, #0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d150      	bne.n	800285a <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027b8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d010      	beq.n	80027e0 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d107      	bne.n	80027da <HAL_ADC_ConfigChannel+0x4fe>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d101      	bne.n	80027da <HAL_ADC_ConfigChannel+0x4fe>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_ADC_ConfigChannel+0x500>
 80027da:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d13c      	bne.n	800285a <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d11d      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x548>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027f0:	d118      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80027f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80027fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80027fc:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027fe:	4b2a      	ldr	r3, [pc, #168]	@ (80028a8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a2a      	ldr	r2, [pc, #168]	@ (80028ac <HAL_ADC_ConfigChannel+0x5d0>)
 8002804:	fba2 2303 	umull	r2, r3, r2, r3
 8002808:	0c9a      	lsrs	r2, r3, #18
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002814:	e002      	b.n	800281c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	3b01      	subs	r3, #1
 800281a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f9      	bne.n	8002816 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002822:	e02e      	b.n	8002882 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b11      	cmp	r3, #17
 800282a:	d10b      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x568>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002834:	d106      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002836:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800283e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002840:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002842:	e01e      	b.n	8002882 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b12      	cmp	r3, #18
 800284a:	d11a      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800284c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002854:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002856:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002858:	e013      	b.n	8002882 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800285e:	f043 0220 	orr.w	r2, r3, #32
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800286c:	e00a      	b.n	8002884 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002872:	f043 0220 	orr.w	r2, r3, #32
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002880:	e000      	b.n	8002884 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002882:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800288c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002890:	4618      	mov	r0, r3
 8002892:	376c      	adds	r7, #108	@ 0x6c
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	50000100 	.word	0x50000100
 80028a0:	50000400 	.word	0x50000400
 80028a4:	50000500 	.word	0x50000500
 80028a8:	2000001c 	.word	0x2000001c
 80028ac:	431bde83 	.word	0x431bde83

080028b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b084      	sub	sp, #16
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d126      	bne.n	8002918 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d115      	bne.n	8002910 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d111      	bne.n	8002910 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d105      	bne.n	8002910 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f7ff f9af 	bl	8001c74 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002916:	e004      	b.n	8002922 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	4798      	blx	r3
}
 8002922:	bf00      	nop
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800292a:	b580      	push	{r7, lr}
 800292c:	b084      	sub	sp, #16
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002938:	68f8      	ldr	r0, [r7, #12]
 800293a:	f7ff f9a5 	bl	8001c88 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b084      	sub	sp, #16
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002952:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002958:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002964:	f043 0204 	orr.w	r2, r3, #4
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800296c:	68f8      	ldr	r0, [r7, #12]
 800296e:	f7ff f995 	bl	8001c9c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002972:	bf00      	nop
 8002974:	3710      	adds	r7, #16
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	2b01      	cmp	r3, #1
 8002994:	d108      	bne.n	80029a8 <ADC_Enable+0x2c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <ADC_Enable+0x2c>
 80029a4:	2301      	movs	r3, #1
 80029a6:	e000      	b.n	80029aa <ADC_Enable+0x2e>
 80029a8:	2300      	movs	r3, #0
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d143      	bne.n	8002a36 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	689a      	ldr	r2, [r3, #8]
 80029b4:	4b22      	ldr	r3, [pc, #136]	@ (8002a40 <ADC_Enable+0xc4>)
 80029b6:	4013      	ands	r3, r2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00d      	beq.n	80029d8 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029c0:	f043 0210 	orr.w	r2, r3, #16
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029cc:	f043 0201 	orr.w	r2, r3, #1
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e02f      	b.n	8002a38 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689a      	ldr	r2, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f042 0201 	orr.w	r2, r2, #1
 80029e6:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80029e8:	f7ff f938 	bl	8001c5c <HAL_GetTick>
 80029ec:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029ee:	e01b      	b.n	8002a28 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80029f0:	f7ff f934 	bl	8001c5c <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d914      	bls.n	8002a28 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d00d      	beq.n	8002a28 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f043 0210 	orr.w	r2, r3, #16
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e007      	b.n	8002a38 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d1dc      	bne.n	80029f0 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a36:	2300      	movs	r3, #0
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3710      	adds	r7, #16
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	8000003f 	.word	0x8000003f

08002a44 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d108      	bne.n	8002a70 <ADC_Disable+0x2c>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <ADC_Disable+0x2c>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <ADC_Disable+0x2e>
 8002a70:	2300      	movs	r3, #0
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d047      	beq.n	8002b06 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030d 	and.w	r3, r3, #13
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d10f      	bne.n	8002aa4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0202 	orr.w	r2, r2, #2
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a9c:	f7ff f8de 	bl	8001c5c <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002aa2:	e029      	b.n	8002af8 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa8:	f043 0210 	orr.w	r2, r3, #16
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e023      	b.n	8002b08 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002ac0:	f7ff f8cc 	bl	8001c5c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d914      	bls.n	8002af8 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 0301 	and.w	r3, r3, #1
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d10d      	bne.n	8002af8 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	f043 0210 	orr.w	r2, r3, #16
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e007      	b.n	8002b08 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d0dc      	beq.n	8002ac0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b42:	4a04      	ldr	r2, [pc, #16]	@ (8002b54 <__NVIC_SetPriorityGrouping+0x44>)
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	60d3      	str	r3, [r2, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	e000ed00 	.word	0xe000ed00

08002b58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b5c:	4b04      	ldr	r3, [pc, #16]	@ (8002b70 <__NVIC_GetPriorityGrouping+0x18>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	0a1b      	lsrs	r3, r3, #8
 8002b62:	f003 0307 	and.w	r3, r3, #7
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000ed00 	.word	0xe000ed00

08002b74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	db0b      	blt.n	8002b9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	f003 021f 	and.w	r2, r3, #31
 8002b8c:	4907      	ldr	r1, [pc, #28]	@ (8002bac <__NVIC_EnableIRQ+0x38>)
 8002b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2001      	movs	r0, #1
 8002b96:	fa00 f202 	lsl.w	r2, r0, r2
 8002b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b9e:	bf00      	nop
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	e000e100 	.word	0xe000e100

08002bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	6039      	str	r1, [r7, #0]
 8002bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	db0a      	blt.n	8002bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	b2da      	uxtb	r2, r3
 8002bc8:	490c      	ldr	r1, [pc, #48]	@ (8002bfc <__NVIC_SetPriority+0x4c>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	0112      	lsls	r2, r2, #4
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	440b      	add	r3, r1
 8002bd4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bd8:	e00a      	b.n	8002bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	b2da      	uxtb	r2, r3
 8002bde:	4908      	ldr	r1, [pc, #32]	@ (8002c00 <__NVIC_SetPriority+0x50>)
 8002be0:	79fb      	ldrb	r3, [r7, #7]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	3b04      	subs	r3, #4
 8002be8:	0112      	lsls	r2, r2, #4
 8002bea:	b2d2      	uxtb	r2, r2
 8002bec:	440b      	add	r3, r1
 8002bee:	761a      	strb	r2, [r3, #24]
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	e000e100 	.word	0xe000e100
 8002c00:	e000ed00 	.word	0xe000ed00

08002c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	f1c3 0307 	rsb	r3, r3, #7
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	bf28      	it	cs
 8002c22:	2304      	movcs	r3, #4
 8002c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	3304      	adds	r3, #4
 8002c2a:	2b06      	cmp	r3, #6
 8002c2c:	d902      	bls.n	8002c34 <NVIC_EncodePriority+0x30>
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3b03      	subs	r3, #3
 8002c32:	e000      	b.n	8002c36 <NVIC_EncodePriority+0x32>
 8002c34:	2300      	movs	r3, #0
 8002c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c38:	f04f 32ff 	mov.w	r2, #4294967295
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43da      	mvns	r2, r3
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	401a      	ands	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	fa01 f303 	lsl.w	r3, r1, r3
 8002c56:	43d9      	mvns	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c5c:	4313      	orrs	r3, r2
         );
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3724      	adds	r7, #36	@ 0x24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c7c:	d301      	bcc.n	8002c82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e00f      	b.n	8002ca2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c82:	4a0a      	ldr	r2, [pc, #40]	@ (8002cac <SysTick_Config+0x40>)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	3b01      	subs	r3, #1
 8002c88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c8a:	210f      	movs	r1, #15
 8002c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c90:	f7ff ff8e 	bl	8002bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c94:	4b05      	ldr	r3, [pc, #20]	@ (8002cac <SysTick_Config+0x40>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c9a:	4b04      	ldr	r3, [pc, #16]	@ (8002cac <SysTick_Config+0x40>)
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000e010 	.word	0xe000e010

08002cb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f7ff ff29 	bl	8002b10 <__NVIC_SetPriorityGrouping>
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b086      	sub	sp, #24
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	4603      	mov	r3, r0
 8002cce:	60b9      	str	r1, [r7, #8]
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cd8:	f7ff ff3e 	bl	8002b58 <__NVIC_GetPriorityGrouping>
 8002cdc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cde:	687a      	ldr	r2, [r7, #4]
 8002ce0:	68b9      	ldr	r1, [r7, #8]
 8002ce2:	6978      	ldr	r0, [r7, #20]
 8002ce4:	f7ff ff8e 	bl	8002c04 <NVIC_EncodePriority>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cee:	4611      	mov	r1, r2
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff ff5d 	bl	8002bb0 <__NVIC_SetPriority>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b082      	sub	sp, #8
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff ff31 	bl	8002b74 <__NVIC_EnableIRQ>
}
 8002d12:	bf00      	nop
 8002d14:	3708      	adds	r7, #8
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d1a:	b580      	push	{r7, lr}
 8002d1c:	b082      	sub	sp, #8
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffa2 	bl	8002c6c <SysTick_Config>
 8002d28:	4603      	mov	r3, r0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3708      	adds	r7, #8
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}

08002d32 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d32:	b580      	push	{r7, lr}
 8002d34:	b084      	sub	sp, #16
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d101      	bne.n	8002d48 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e037      	b.n	8002db8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2202      	movs	r2, #2
 8002d4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002d5e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002d62:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002d6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	69db      	ldr	r3, [r3, #28]
 8002d8a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f940 	bl	8003020 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2200      	movs	r2, #0
 8002da4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_DMA_Start_IT+0x20>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e04a      	b.n	8002e76 <HAL_DMA_Start_IT+0xb6>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d13a      	bne.n	8002e68 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2202      	movs	r2, #2
 8002df6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681a      	ldr	r2, [r3, #0]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f022 0201 	bic.w	r2, r2, #1
 8002e0e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	68b9      	ldr	r1, [r7, #8]
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f000 f8d4 	bl	8002fc4 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d008      	beq.n	8002e36 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f042 020e 	orr.w	r2, r2, #14
 8002e32:	601a      	str	r2, [r3, #0]
 8002e34:	e00f      	b.n	8002e56 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f042 020a 	orr.w	r2, r2, #10
 8002e44:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f022 0204 	bic.w	r2, r2, #4
 8002e54:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f042 0201 	orr.w	r2, r2, #1
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	e005      	b.n	8002e74 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e70:	2302      	movs	r3, #2
 8002e72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b084      	sub	sp, #16
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	2204      	movs	r2, #4
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d024      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x72>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d01f      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0320 	and.w	r3, r3, #32
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0204 	bic.w	r2, r2, #4
 8002ecc:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed6:	2104      	movs	r1, #4
 8002ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8002edc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d06a      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8002eee:	e065      	b.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d02c      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xdc>
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d027      	beq.n	8002f5a <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0320 	and.w	r3, r3, #32
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 020a 	bic.w	r2, r2, #10
 8002f26:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f38:	2102      	movs	r1, #2
 8002f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f3e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d035      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002f58:	e030      	b.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	2208      	movs	r2, #8
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d028      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	f003 0308 	and.w	r3, r3, #8
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d023      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 020e 	bic.w	r2, r2, #14
 8002f82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002f92:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d004      	beq.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	4798      	blx	r3
    }
  }
}
 8002fba:	e7ff      	b.n	8002fbc <HAL_DMA_IRQHandler+0x13e>
 8002fbc:	bf00      	nop
 8002fbe:	3710      	adds	r7, #16
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	bd80      	pop	{r7, pc}

08002fc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b085      	sub	sp, #20
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
 8002fd0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fda:	2101      	movs	r1, #1
 8002fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002fe0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	683a      	ldr	r2, [r7, #0]
 8002fe8:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2b10      	cmp	r3, #16
 8002ff0:	d108      	bne.n	8003004 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	68ba      	ldr	r2, [r7, #8]
 8003000:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003002:	e007      	b.n	8003014 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68ba      	ldr	r2, [r7, #8]
 800300a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	60da      	str	r2, [r3, #12]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	461a      	mov	r2, r3
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <DMA_CalcBaseAndBitshift+0x60>)
 8003030:	429a      	cmp	r2, r3
 8003032:	d80f      	bhi.n	8003054 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	4b12      	ldr	r3, [pc, #72]	@ (8003084 <DMA_CalcBaseAndBitshift+0x64>)
 800303c:	4413      	add	r3, r2
 800303e:	4a12      	ldr	r2, [pc, #72]	@ (8003088 <DMA_CalcBaseAndBitshift+0x68>)
 8003040:	fba2 2303 	umull	r2, r3, r2, r3
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	009a      	lsls	r2, r3, #2
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a0f      	ldr	r2, [pc, #60]	@ (800308c <DMA_CalcBaseAndBitshift+0x6c>)
 8003050:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8003052:	e00e      	b.n	8003072 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	461a      	mov	r2, r3
 800305a:	4b0d      	ldr	r3, [pc, #52]	@ (8003090 <DMA_CalcBaseAndBitshift+0x70>)
 800305c:	4413      	add	r3, r2
 800305e:	4a0a      	ldr	r2, [pc, #40]	@ (8003088 <DMA_CalcBaseAndBitshift+0x68>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	091b      	lsrs	r3, r3, #4
 8003066:	009a      	lsls	r2, r3, #2
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a09      	ldr	r2, [pc, #36]	@ (8003094 <DMA_CalcBaseAndBitshift+0x74>)
 8003070:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	40020407 	.word	0x40020407
 8003084:	bffdfff8 	.word	0xbffdfff8
 8003088:	cccccccd 	.word	0xcccccccd
 800308c:	40020000 	.word	0x40020000
 8003090:	bffdfbf8 	.word	0xbffdfbf8
 8003094:	40020400 	.word	0x40020400

08003098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a6:	e160      	b.n	800336a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 8152 	beq.w	8003364 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d005      	beq.n	80030d8 <HAL_GPIO_Init+0x40>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d130      	bne.n	800313a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800310e:	2201      	movs	r2, #1
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0201 	and.w	r2, r3, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b03      	cmp	r3, #3
 8003144:	d017      	beq.n	8003176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d123      	bne.n	80031ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	6939      	ldr	r1, [r7, #16]
 80031c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 80ac 	beq.w	8003364 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320c:	4b5e      	ldr	r3, [pc, #376]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	4a5d      	ldr	r2, [pc, #372]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6193      	str	r3, [r2, #24]
 8003218:	4b5b      	ldr	r3, [pc, #364]	@ (8003388 <HAL_GPIO_Init+0x2f0>)
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003224:	4a59      	ldr	r2, [pc, #356]	@ (800338c <HAL_GPIO_Init+0x2f4>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	3302      	adds	r3, #2
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	220f      	movs	r2, #15
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800324e:	d025      	beq.n	800329c <HAL_GPIO_Init+0x204>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a4f      	ldr	r2, [pc, #316]	@ (8003390 <HAL_GPIO_Init+0x2f8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d01f      	beq.n	8003298 <HAL_GPIO_Init+0x200>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a4e      	ldr	r2, [pc, #312]	@ (8003394 <HAL_GPIO_Init+0x2fc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d019      	beq.n	8003294 <HAL_GPIO_Init+0x1fc>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a4d      	ldr	r2, [pc, #308]	@ (8003398 <HAL_GPIO_Init+0x300>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <HAL_GPIO_Init+0x1f8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a4c      	ldr	r2, [pc, #304]	@ (800339c <HAL_GPIO_Init+0x304>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00d      	beq.n	800328c <HAL_GPIO_Init+0x1f4>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a4b      	ldr	r2, [pc, #300]	@ (80033a0 <HAL_GPIO_Init+0x308>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d007      	beq.n	8003288 <HAL_GPIO_Init+0x1f0>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a4a      	ldr	r2, [pc, #296]	@ (80033a4 <HAL_GPIO_Init+0x30c>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d101      	bne.n	8003284 <HAL_GPIO_Init+0x1ec>
 8003280:	2306      	movs	r3, #6
 8003282:	e00c      	b.n	800329e <HAL_GPIO_Init+0x206>
 8003284:	2307      	movs	r3, #7
 8003286:	e00a      	b.n	800329e <HAL_GPIO_Init+0x206>
 8003288:	2305      	movs	r3, #5
 800328a:	e008      	b.n	800329e <HAL_GPIO_Init+0x206>
 800328c:	2304      	movs	r3, #4
 800328e:	e006      	b.n	800329e <HAL_GPIO_Init+0x206>
 8003290:	2303      	movs	r3, #3
 8003292:	e004      	b.n	800329e <HAL_GPIO_Init+0x206>
 8003294:	2302      	movs	r3, #2
 8003296:	e002      	b.n	800329e <HAL_GPIO_Init+0x206>
 8003298:	2301      	movs	r3, #1
 800329a:	e000      	b.n	800329e <HAL_GPIO_Init+0x206>
 800329c:	2300      	movs	r3, #0
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	f002 0203 	and.w	r2, r2, #3
 80032a4:	0092      	lsls	r2, r2, #2
 80032a6:	4093      	lsls	r3, r2
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80032ae:	4937      	ldr	r1, [pc, #220]	@ (800338c <HAL_GPIO_Init+0x2f4>)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	089b      	lsrs	r3, r3, #2
 80032b4:	3302      	adds	r3, #2
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80032bc:	4b3a      	ldr	r3, [pc, #232]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	693a      	ldr	r2, [r7, #16]
 80032c8:	4013      	ands	r3, r2
 80032ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032e0:	4a31      	ldr	r2, [pc, #196]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032e6:	4b30      	ldr	r3, [pc, #192]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	693a      	ldr	r2, [r7, #16]
 80032f2:	4013      	ands	r3, r2
 80032f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4313      	orrs	r3, r2
 8003308:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800330a:	4a27      	ldr	r2, [pc, #156]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003310:	4b25      	ldr	r3, [pc, #148]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	43db      	mvns	r3, r3
 800331a:	693a      	ldr	r2, [r7, #16]
 800331c:	4013      	ands	r3, r2
 800331e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003334:	4a1c      	ldr	r2, [pc, #112]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800333a:	4b1b      	ldr	r3, [pc, #108]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	43db      	mvns	r3, r3
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	4313      	orrs	r3, r2
 800335c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800335e:	4a12      	ldr	r2, [pc, #72]	@ (80033a8 <HAL_GPIO_Init+0x310>)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	3301      	adds	r3, #1
 8003368:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	fa22 f303 	lsr.w	r3, r2, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	f47f ae97 	bne.w	80030a8 <HAL_GPIO_Init+0x10>
  }
}
 800337a:	bf00      	nop
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40021000 	.word	0x40021000
 800338c:	40010000 	.word	0x40010000
 8003390:	48000400 	.word	0x48000400
 8003394:	48000800 	.word	0x48000800
 8003398:	48000c00 	.word	0x48000c00
 800339c:	48001000 	.word	0x48001000
 80033a0:	48001400 	.word	0x48001400
 80033a4:	48001800 	.word	0x48001800
 80033a8:	40010400 	.word	0x40010400

080033ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	460b      	mov	r3, r1
 80033b6:	807b      	strh	r3, [r7, #2]
 80033b8:	4613      	mov	r3, r2
 80033ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033bc:	787b      	ldrb	r3, [r7, #1]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033c2:	887a      	ldrh	r2, [r7, #2]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033c8:	e002      	b.n	80033d0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033ca:	887a      	ldrh	r2, [r7, #2]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr

080033dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80033e6:	4b08      	ldr	r3, [pc, #32]	@ (8003408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033e8:	695a      	ldr	r2, [r3, #20]
 80033ea:	88fb      	ldrh	r3, [r7, #6]
 80033ec:	4013      	ands	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d006      	beq.n	8003400 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033f2:	4a05      	ldr	r2, [pc, #20]	@ (8003408 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033f4:	88fb      	ldrh	r3, [r7, #6]
 80033f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd fbf4 	bl	8000be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003400:	bf00      	nop
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40010400 	.word	0x40010400

0800340c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d101      	bne.n	800341e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e08d      	b.n	800353a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d106      	bne.n	8003438 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f7fe f91a 	bl	800166c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2224      	movs	r2, #36	@ 0x24
 800343c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f022 0201 	bic.w	r2, r2, #1
 800344e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685a      	ldr	r2, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800345c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689a      	ldr	r2, [r3, #8]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800346c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d107      	bne.n	8003486 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	689a      	ldr	r2, [r3, #8]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	e006      	b.n	8003494 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003492:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	2b02      	cmp	r3, #2
 800349a:	d108      	bne.n	80034ae <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	685a      	ldr	r2, [r3, #4]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	e007      	b.n	80034be <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034cc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68da      	ldr	r2, [r3, #12]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80034e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	691a      	ldr	r2, [r3, #16]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	430a      	orrs	r2, r1
 80034fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69d9      	ldr	r1, [r3, #28]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1a      	ldr	r2, [r3, #32]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2220      	movs	r2, #32
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3708      	adds	r7, #8
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}

08003542 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
 800354a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b20      	cmp	r3, #32
 8003556:	d138      	bne.n	80035ca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003562:	2302      	movs	r3, #2
 8003564:	e032      	b.n	80035cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2224      	movs	r2, #36	@ 0x24
 8003572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 0201 	bic.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003594:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	6819      	ldr	r1, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f042 0201 	orr.w	r2, r2, #1
 80035b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2220      	movs	r2, #32
 80035ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e000      	b.n	80035cc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
  }
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	370c      	adds	r7, #12
 80035d0:	46bd      	mov	sp, r7
 80035d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d6:	4770      	bx	lr

080035d8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80035d8:	b480      	push	{r7}
 80035da:	b085      	sub	sp, #20
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d139      	bne.n	8003662 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e033      	b.n	8003664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2224      	movs	r2, #36	@ 0x24
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0201 	bic.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800362a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	021b      	lsls	r3, r3, #8
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2220      	movs	r2, #32
 8003652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	e000      	b.n	8003664 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003662:	2302      	movs	r3, #2
  }
}
 8003664:	4618      	mov	r0, r3
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003676:	af00      	add	r7, sp, #0
 8003678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800367c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003680:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003682:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003686:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d102      	bne.n	8003696 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f001 b80a 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8161 	beq.w	800396e <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036ac:	4bae      	ldr	r3, [pc, #696]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 030c 	and.w	r3, r3, #12
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d00c      	beq.n	80036d2 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036b8:	4bab      	ldr	r3, [pc, #684]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d157      	bne.n	8003774 <HAL_RCC_OscConfig+0x104>
 80036c4:	4ba8      	ldr	r3, [pc, #672]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80036cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036d0:	d150      	bne.n	8003774 <HAL_RCC_OscConfig+0x104>
 80036d2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036d6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80036de:	fa93 f3a3 	rbit	r3, r3
 80036e2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036e6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ea:	fab3 f383 	clz	r3, r3
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80036f2:	d802      	bhi.n	80036fa <HAL_RCC_OscConfig+0x8a>
 80036f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	e015      	b.n	8003726 <HAL_RCC_OscConfig+0xb6>
 80036fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80036fe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003702:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003706:	fa93 f3a3 	rbit	r3, r3
 800370a:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800370e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003712:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003716:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800371a:	fa93 f3a3 	rbit	r3, r3
 800371e:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003722:	4b91      	ldr	r3, [pc, #580]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 8003724:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003726:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800372a:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 800372e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003732:	fa92 f2a2 	rbit	r2, r2
 8003736:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800373a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 800373e:	fab2 f282 	clz	r2, r2
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	f042 0220 	orr.w	r2, r2, #32
 8003748:	b2d2      	uxtb	r2, r2
 800374a:	f002 021f 	and.w	r2, r2, #31
 800374e:	2101      	movs	r1, #1
 8003750:	fa01 f202 	lsl.w	r2, r1, r2
 8003754:	4013      	ands	r3, r2
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8108 	beq.w	800396c <HAL_RCC_OscConfig+0x2fc>
 800375c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003760:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f040 80ff 	bne.w	800396c <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	f000 bf9b 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003774:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003778:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003784:	d106      	bne.n	8003794 <HAL_RCC_OscConfig+0x124>
 8003786:	4b78      	ldr	r3, [pc, #480]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a77      	ldr	r2, [pc, #476]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 800378c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003790:	6013      	str	r3, [r2, #0]
 8003792:	e036      	b.n	8003802 <HAL_RCC_OscConfig+0x192>
 8003794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003798:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d10c      	bne.n	80037be <HAL_RCC_OscConfig+0x14e>
 80037a4:	4b70      	ldr	r3, [pc, #448]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a6f      	ldr	r2, [pc, #444]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037ae:	6013      	str	r3, [r2, #0]
 80037b0:	4b6d      	ldr	r3, [pc, #436]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6c      	ldr	r2, [pc, #432]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80037ba:	6013      	str	r3, [r2, #0]
 80037bc:	e021      	b.n	8003802 <HAL_RCC_OscConfig+0x192>
 80037be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80037ce:	d10c      	bne.n	80037ea <HAL_RCC_OscConfig+0x17a>
 80037d0:	4b65      	ldr	r3, [pc, #404]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a64      	ldr	r2, [pc, #400]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037d6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80037da:	6013      	str	r3, [r2, #0]
 80037dc:	4b62      	ldr	r3, [pc, #392]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a61      	ldr	r2, [pc, #388]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	e00b      	b.n	8003802 <HAL_RCC_OscConfig+0x192>
 80037ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 80037fc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003800:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003806:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d054      	beq.n	80038bc <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003812:	f7fe fa23 	bl	8001c5c <HAL_GetTick>
 8003816:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	e00a      	b.n	8003832 <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800381c:	f7fe fa1e 	bl	8001c5c <HAL_GetTick>
 8003820:	4602      	mov	r2, r0
 8003822:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	2b64      	cmp	r3, #100	@ 0x64
 800382a:	d902      	bls.n	8003832 <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 800382c:	2303      	movs	r3, #3
 800382e:	f000 bf3c 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
 8003832:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003836:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800383a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800383e:	fa93 f3a3 	rbit	r3, r3
 8003842:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003846:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800384a:	fab3 f383 	clz	r3, r3
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b3f      	cmp	r3, #63	@ 0x3f
 8003852:	d802      	bhi.n	800385a <HAL_RCC_OscConfig+0x1ea>
 8003854:	4b44      	ldr	r3, [pc, #272]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	e015      	b.n	8003886 <HAL_RCC_OscConfig+0x216>
 800385a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800385e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003862:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003866:	fa93 f3a3 	rbit	r3, r3
 800386a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800386e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003872:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003876:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800387a:	fa93 f3a3 	rbit	r3, r3
 800387e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003882:	4b39      	ldr	r3, [pc, #228]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 8003884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003886:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800388a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800388e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003892:	fa92 f2a2 	rbit	r2, r2
 8003896:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 800389a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800389e:	fab2 f282 	clz	r2, r2
 80038a2:	b2d2      	uxtb	r2, r2
 80038a4:	f042 0220 	orr.w	r2, r2, #32
 80038a8:	b2d2      	uxtb	r2, r2
 80038aa:	f002 021f 	and.w	r2, r2, #31
 80038ae:	2101      	movs	r1, #1
 80038b0:	fa01 f202 	lsl.w	r2, r1, r2
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0b0      	beq.n	800381c <HAL_RCC_OscConfig+0x1ac>
 80038ba:	e058      	b.n	800396e <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038bc:	f7fe f9ce 	bl	8001c5c <HAL_GetTick>
 80038c0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c4:	e00a      	b.n	80038dc <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038c6:	f7fe f9c9 	bl	8001c5c <HAL_GetTick>
 80038ca:	4602      	mov	r2, r0
 80038cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	2b64      	cmp	r3, #100	@ 0x64
 80038d4:	d902      	bls.n	80038dc <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 80038d6:	2303      	movs	r3, #3
 80038d8:	f000 bee7 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
 80038dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038e0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80038e8:	fa93 f3a3 	rbit	r3, r3
 80038ec:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80038f0:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038f4:	fab3 f383 	clz	r3, r3
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80038fc:	d802      	bhi.n	8003904 <HAL_RCC_OscConfig+0x294>
 80038fe:	4b1a      	ldr	r3, [pc, #104]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	e015      	b.n	8003930 <HAL_RCC_OscConfig+0x2c0>
 8003904:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003908:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800390c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003910:	fa93 f3a3 	rbit	r3, r3
 8003914:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003918:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800391c:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003920:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003924:	fa93 f3a3 	rbit	r3, r3
 8003928:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800392c:	4b0e      	ldr	r3, [pc, #56]	@ (8003968 <HAL_RCC_OscConfig+0x2f8>)
 800392e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003930:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003934:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003938:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800393c:	fa92 f2a2 	rbit	r2, r2
 8003940:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003944:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003948:	fab2 f282 	clz	r2, r2
 800394c:	b2d2      	uxtb	r2, r2
 800394e:	f042 0220 	orr.w	r2, r2, #32
 8003952:	b2d2      	uxtb	r2, r2
 8003954:	f002 021f 	and.w	r2, r2, #31
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f202 	lsl.w	r2, r1, r2
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1b0      	bne.n	80038c6 <HAL_RCC_OscConfig+0x256>
 8003964:	e003      	b.n	800396e <HAL_RCC_OscConfig+0x2fe>
 8003966:	bf00      	nop
 8003968:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800396c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800396e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003972:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0302 	and.w	r3, r3, #2
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 816d 	beq.w	8003c5e <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003984:	4bcd      	ldr	r3, [pc, #820]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b00      	cmp	r3, #0
 800398e:	d00c      	beq.n	80039aa <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003990:	4bca      	ldr	r3, [pc, #808]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f003 030c 	and.w	r3, r3, #12
 8003998:	2b08      	cmp	r3, #8
 800399a:	d16e      	bne.n	8003a7a <HAL_RCC_OscConfig+0x40a>
 800399c:	4bc7      	ldr	r3, [pc, #796]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80039a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039a8:	d167      	bne.n	8003a7a <HAL_RCC_OscConfig+0x40a>
 80039aa:	2302      	movs	r3, #2
 80039ac:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80039b4:	fa93 f3a3 	rbit	r3, r3
 80039b8:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80039bc:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c0:	fab3 f383 	clz	r3, r3
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b3f      	cmp	r3, #63	@ 0x3f
 80039c8:	d802      	bhi.n	80039d0 <HAL_RCC_OscConfig+0x360>
 80039ca:	4bbc      	ldr	r3, [pc, #752]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	e013      	b.n	80039f8 <HAL_RCC_OscConfig+0x388>
 80039d0:	2302      	movs	r3, #2
 80039d2:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039d6:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80039da:	fa93 f3a3 	rbit	r3, r3
 80039de:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80039e2:	2302      	movs	r3, #2
 80039e4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80039e8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80039ec:	fa93 f3a3 	rbit	r3, r3
 80039f0:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80039f4:	4bb1      	ldr	r3, [pc, #708]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 80039f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f8:	2202      	movs	r2, #2
 80039fa:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 80039fe:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003a02:	fa92 f2a2 	rbit	r2, r2
 8003a06:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003a0a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003a0e:	fab2 f282 	clz	r2, r2
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	f042 0220 	orr.w	r2, r2, #32
 8003a18:	b2d2      	uxtb	r2, r2
 8003a1a:	f002 021f 	and.w	r2, r2, #31
 8003a1e:	2101      	movs	r1, #1
 8003a20:	fa01 f202 	lsl.w	r2, r1, r2
 8003a24:	4013      	ands	r3, r2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00a      	beq.n	8003a40 <HAL_RCC_OscConfig+0x3d0>
 8003a2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a2e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d002      	beq.n	8003a40 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f000 be35 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b9e      	ldr	r3, [pc, #632]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	21f8      	movs	r1, #248	@ 0xf8
 8003a56:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a5a:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003a5e:	fa91 f1a1 	rbit	r1, r1
 8003a62:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003a66:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003a6a:	fab1 f181 	clz	r1, r1
 8003a6e:	b2c9      	uxtb	r1, r1
 8003a70:	408b      	lsls	r3, r1
 8003a72:	4992      	ldr	r1, [pc, #584]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a78:	e0f1      	b.n	8003c5e <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8083 	beq.w	8003b92 <HAL_RCC_OscConfig+0x522>
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a92:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003a9e:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aa2:	fab3 f383 	clz	r3, r3
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003aac:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab8:	f7fe f8d0 	bl	8001c5c <HAL_GetTick>
 8003abc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ac2:	f7fe f8cb 	bl	8001c5c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d902      	bls.n	8003ad8 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	f000 bde9 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ade:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003ae2:	fa93 f3a3 	rbit	r3, r3
 8003ae6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003aea:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aee:	fab3 f383 	clz	r3, r3
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b3f      	cmp	r3, #63	@ 0x3f
 8003af6:	d802      	bhi.n	8003afe <HAL_RCC_OscConfig+0x48e>
 8003af8:	4b70      	ldr	r3, [pc, #448]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	e013      	b.n	8003b26 <HAL_RCC_OscConfig+0x4b6>
 8003afe:	2302      	movs	r3, #2
 8003b00:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b04:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003b08:	fa93 f3a3 	rbit	r3, r3
 8003b0c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003b10:	2302      	movs	r3, #2
 8003b12:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003b16:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003b22:	4b66      	ldr	r3, [pc, #408]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b26:	2202      	movs	r2, #2
 8003b28:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003b2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003b30:	fa92 f2a2 	rbit	r2, r2
 8003b34:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003b38:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003b3c:	fab2 f282 	clz	r2, r2
 8003b40:	b2d2      	uxtb	r2, r2
 8003b42:	f042 0220 	orr.w	r2, r2, #32
 8003b46:	b2d2      	uxtb	r2, r2
 8003b48:	f002 021f 	and.w	r2, r2, #31
 8003b4c:	2101      	movs	r1, #1
 8003b4e:	fa01 f202 	lsl.w	r2, r1, r2
 8003b52:	4013      	ands	r3, r2
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d0b4      	beq.n	8003ac2 <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b58:	4b58      	ldr	r3, [pc, #352]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b64:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	691b      	ldr	r3, [r3, #16]
 8003b6c:	21f8      	movs	r1, #248	@ 0xf8
 8003b6e:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b72:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003b76:	fa91 f1a1 	rbit	r1, r1
 8003b7a:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003b7e:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003b82:	fab1 f181 	clz	r1, r1
 8003b86:	b2c9      	uxtb	r1, r1
 8003b88:	408b      	lsls	r3, r1
 8003b8a:	494c      	ldr	r1, [pc, #304]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	e065      	b.n	8003c5e <HAL_RCC_OscConfig+0x5ee>
 8003b92:	2301      	movs	r3, #1
 8003b94:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b98:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003b9c:	fa93 f3a3 	rbit	r3, r3
 8003ba0:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003ba4:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba8:	fab3 f383 	clz	r3, r3
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003bb2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	461a      	mov	r2, r3
 8003bba:	2300      	movs	r3, #0
 8003bbc:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bbe:	f7fe f84d 	bl	8001c5c <HAL_GetTick>
 8003bc2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fe f848 	bl	8001c5c <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d902      	bls.n	8003bde <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	f000 bd66 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
 8003bde:	2302      	movs	r3, #2
 8003be0:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003be8:	fa93 f3a3 	rbit	r3, r3
 8003bec:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003bf0:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bf4:	fab3 f383 	clz	r3, r3
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b3f      	cmp	r3, #63	@ 0x3f
 8003bfc:	d802      	bhi.n	8003c04 <HAL_RCC_OscConfig+0x594>
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	e013      	b.n	8003c2c <HAL_RCC_OscConfig+0x5bc>
 8003c04:	2302      	movs	r3, #2
 8003c06:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003c0e:	fa93 f3a3 	rbit	r3, r3
 8003c12:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003c16:	2302      	movs	r3, #2
 8003c18:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003c1c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003c20:	fa93 f3a3 	rbit	r3, r3
 8003c24:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003c28:	4b24      	ldr	r3, [pc, #144]	@ (8003cbc <HAL_RCC_OscConfig+0x64c>)
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003c32:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003c36:	fa92 f2a2 	rbit	r2, r2
 8003c3a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003c3e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003c42:	fab2 f282 	clz	r2, r2
 8003c46:	b2d2      	uxtb	r2, r2
 8003c48:	f042 0220 	orr.w	r2, r2, #32
 8003c4c:	b2d2      	uxtb	r2, r2
 8003c4e:	f002 021f 	and.w	r2, r2, #31
 8003c52:	2101      	movs	r1, #1
 8003c54:	fa01 f202 	lsl.w	r2, r1, r2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d1b4      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c62:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 8119 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c78:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	695b      	ldr	r3, [r3, #20]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 8082 	beq.w	8003d8a <HAL_RCC_OscConfig+0x71a>
 8003c86:	2301      	movs	r3, #1
 8003c88:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c90:	fa93 f3a3 	rbit	r3, r3
 8003c94:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003c98:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c9c:	fab3 f383 	clz	r3, r3
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b06      	ldr	r3, [pc, #24]	@ (8003cc0 <HAL_RCC_OscConfig+0x650>)
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	461a      	mov	r2, r3
 8003cac:	2301      	movs	r3, #1
 8003cae:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cb0:	f7fd ffd4 	bl	8001c5c <HAL_GetTick>
 8003cb4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cb8:	e00f      	b.n	8003cda <HAL_RCC_OscConfig+0x66a>
 8003cba:	bf00      	nop
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cc4:	f7fd ffca 	bl	8001c5c <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d902      	bls.n	8003cda <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	f000 bce8 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ce4:	fa93 f2a3 	rbit	r2, r3
 8003ce8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003cf0:	601a      	str	r2, [r3, #0]
 8003cf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cf6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d02:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	fa93 f2a3 	rbit	r2, r3
 8003d0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003d14:	601a      	str	r2, [r3, #0]
 8003d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d1a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003d1e:	2202      	movs	r2, #2
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d26:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	fa93 f2a3 	rbit	r2, r3
 8003d30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d34:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003d38:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	4bb0      	ldr	r3, [pc, #704]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003d3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003d3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d42:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003d46:	2102      	movs	r1, #2
 8003d48:	6019      	str	r1, [r3, #0]
 8003d4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d4e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	fa93 f1a3 	rbit	r1, r3
 8003d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d5c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d60:	6019      	str	r1, [r3, #0]
  return result;
 8003d62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d66:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	fab3 f383 	clz	r3, r3
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	f003 031f 	and.w	r3, r3, #31
 8003d7c:	2101      	movs	r1, #1
 8003d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d82:	4013      	ands	r3, r2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d09d      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x654>
 8003d88:	e08d      	b.n	8003ea6 <HAL_RCC_OscConfig+0x836>
 8003d8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d8e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003d92:	2201      	movs	r2, #1
 8003d94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d96:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d9a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	fa93 f2a3 	rbit	r2, r3
 8003da4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003da8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003dac:	601a      	str	r2, [r3, #0]
  return result;
 8003dae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003db2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003db6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db8:	fab3 f383 	clz	r3, r3
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	4b8f      	ldr	r3, [pc, #572]	@ (8004000 <HAL_RCC_OscConfig+0x990>)
 8003dc2:	4413      	add	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dcc:	f7fd ff46 	bl	8001c5c <HAL_GetTick>
 8003dd0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dd4:	e00a      	b.n	8003dec <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd6:	f7fd ff41 	bl	8001c5c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d902      	bls.n	8003dec <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	f000 bc5f 	b.w	80046aa <HAL_RCC_OscConfig+0x103a>
 8003dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003df4:	2202      	movs	r2, #2
 8003df6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003df8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dfc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	fa93 f2a3 	rbit	r2, r3
 8003e06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e0a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e14:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003e18:	2202      	movs	r2, #2
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e20:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	fa93 f2a3 	rbit	r2, r3
 8003e2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e2e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003e32:	601a      	str	r2, [r3, #0]
 8003e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e38:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e44:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	fa93 f2a3 	rbit	r2, r3
 8003e4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e52:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003e56:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e58:	4b68      	ldr	r3, [pc, #416]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003e5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003e5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e60:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003e64:	2102      	movs	r1, #2
 8003e66:	6019      	str	r1, [r3, #0]
 8003e68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e6c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	fa93 f1a3 	rbit	r1, r3
 8003e76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e7a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e7e:	6019      	str	r1, [r3, #0]
  return result;
 8003e80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e84:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	fab3 f383 	clz	r3, r3
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	f003 031f 	and.w	r3, r3, #31
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d197      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eaa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0304 	and.w	r3, r3, #4
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 819c 	beq.w	80041f4 <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ec2:	4b4e      	ldr	r3, [pc, #312]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003ec4:	69db      	ldr	r3, [r3, #28]
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d116      	bne.n	8003efc <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ece:	4b4b      	ldr	r3, [pc, #300]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003ed0:	69db      	ldr	r3, [r3, #28]
 8003ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ed8:	61d3      	str	r3, [r2, #28]
 8003eda:	4b48      	ldr	r3, [pc, #288]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003ee2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ee6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003ef4:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003efc:	4b41      	ldr	r3, [pc, #260]	@ (8004004 <HAL_RCC_OscConfig+0x994>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d11a      	bne.n	8003f3e <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f08:	4b3e      	ldr	r3, [pc, #248]	@ (8004004 <HAL_RCC_OscConfig+0x994>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a3d      	ldr	r2, [pc, #244]	@ (8004004 <HAL_RCC_OscConfig+0x994>)
 8003f0e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f12:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f14:	f7fd fea2 	bl	8001c5c <HAL_GetTick>
 8003f18:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f1c:	e009      	b.n	8003f32 <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f1e:	f7fd fe9d 	bl	8001c5c <HAL_GetTick>
 8003f22:	4602      	mov	r2, r0
 8003f24:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b64      	cmp	r3, #100	@ 0x64
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e3bb      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f32:	4b34      	ldr	r3, [pc, #208]	@ (8004004 <HAL_RCC_OscConfig+0x994>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0ef      	beq.n	8003f1e <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f3e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f42:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d106      	bne.n	8003f5c <HAL_RCC_OscConfig+0x8ec>
 8003f4e:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f50:	6a1b      	ldr	r3, [r3, #32]
 8003f52:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6213      	str	r3, [r2, #32]
 8003f5a:	e035      	b.n	8003fc8 <HAL_RCC_OscConfig+0x958>
 8003f5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f60:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10c      	bne.n	8003f86 <HAL_RCC_OscConfig+0x916>
 8003f6c:	4b23      	ldr	r3, [pc, #140]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	4a22      	ldr	r2, [pc, #136]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f72:	f023 0301 	bic.w	r3, r3, #1
 8003f76:	6213      	str	r3, [r2, #32]
 8003f78:	4b20      	ldr	r3, [pc, #128]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	4a1f      	ldr	r2, [pc, #124]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f7e:	f023 0304 	bic.w	r3, r3, #4
 8003f82:	6213      	str	r3, [r2, #32]
 8003f84:	e020      	b.n	8003fc8 <HAL_RCC_OscConfig+0x958>
 8003f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	2b05      	cmp	r3, #5
 8003f94:	d10c      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x940>
 8003f96:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	4a18      	ldr	r2, [pc, #96]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003f9c:	f043 0304 	orr.w	r3, r3, #4
 8003fa0:	6213      	str	r3, [r2, #32]
 8003fa2:	4b16      	ldr	r3, [pc, #88]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	4a15      	ldr	r2, [pc, #84]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003fa8:	f043 0301 	orr.w	r3, r3, #1
 8003fac:	6213      	str	r3, [r2, #32]
 8003fae:	e00b      	b.n	8003fc8 <HAL_RCC_OscConfig+0x958>
 8003fb0:	4b12      	ldr	r3, [pc, #72]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	4a11      	ldr	r2, [pc, #68]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003fb6:	f023 0301 	bic.w	r3, r3, #1
 8003fba:	6213      	str	r3, [r2, #32]
 8003fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4a0e      	ldr	r2, [pc, #56]	@ (8003ffc <HAL_RCC_OscConfig+0x98c>)
 8003fc2:	f023 0304 	bic.w	r3, r3, #4
 8003fc6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003fc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fcc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 8085 	beq.w	80040e4 <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fda:	f7fd fe3f 	bl	8001c5c <HAL_GetTick>
 8003fde:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fe2:	e011      	b.n	8004008 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fe4:	f7fd fe3a 	bl	8001c5c <HAL_GetTick>
 8003fe8:	4602      	mov	r2, r0
 8003fea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003fee:	1ad3      	subs	r3, r2, r3
 8003ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d907      	bls.n	8004008 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e356      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
 8003ffc:	40021000 	.word	0x40021000
 8004000:	10908120 	.word	0x10908120
 8004004:	40007000 	.word	0x40007000
 8004008:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800400c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004010:	2202      	movs	r2, #2
 8004012:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004014:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004018:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	fa93 f2a3 	rbit	r2, r3
 8004022:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004026:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004030:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004034:	2202      	movs	r2, #2
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800403c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	fa93 f2a3 	rbit	r2, r3
 8004046:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800404a:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 800404e:	601a      	str	r2, [r3, #0]
  return result;
 8004050:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004054:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8004058:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	fab3 f383 	clz	r3, r3
 800405e:	b2db      	uxtb	r3, r3
 8004060:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d102      	bne.n	8004070 <HAL_RCC_OscConfig+0xa00>
 800406a:	4b98      	ldr	r3, [pc, #608]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	e013      	b.n	8004098 <HAL_RCC_OscConfig+0xa28>
 8004070:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004074:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004078:	2202      	movs	r2, #2
 800407a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004080:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	fa93 f2a3 	rbit	r2, r3
 800408a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800408e:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8004092:	601a      	str	r2, [r3, #0]
 8004094:	4b8d      	ldr	r3, [pc, #564]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800409c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80040a0:	2102      	movs	r1, #2
 80040a2:	6011      	str	r1, [r2, #0]
 80040a4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040a8:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80040ac:	6812      	ldr	r2, [r2, #0]
 80040ae:	fa92 f1a2 	rbit	r1, r2
 80040b2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040b6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80040ba:	6011      	str	r1, [r2, #0]
  return result;
 80040bc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80040c0:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 80040c4:	6812      	ldr	r2, [r2, #0]
 80040c6:	fab2 f282 	clz	r2, r2
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040d0:	b2d2      	uxtb	r2, r2
 80040d2:	f002 021f 	and.w	r2, r2, #31
 80040d6:	2101      	movs	r1, #1
 80040d8:	fa01 f202 	lsl.w	r2, r1, r2
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d080      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x974>
 80040e2:	e07d      	b.n	80041e0 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040e4:	f7fd fdba 	bl	8001c5c <HAL_GetTick>
 80040e8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040ec:	e00b      	b.n	8004106 <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040ee:	f7fd fdb5 	bl	8001c5c <HAL_GetTick>
 80040f2:	4602      	mov	r2, r0
 80040f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040fe:	4293      	cmp	r3, r2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e2d1      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
 8004106:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800410a:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800410e:	2202      	movs	r2, #2
 8004110:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004116:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	fa93 f2a3 	rbit	r2, r3
 8004120:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004124:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800412e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8004132:	2202      	movs	r2, #2
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800413a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	fa93 f2a3 	rbit	r2, r3
 8004144:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004148:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800414c:	601a      	str	r2, [r3, #0]
  return result;
 800414e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004152:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8004156:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004158:	fab3 f383 	clz	r3, r3
 800415c:	b2db      	uxtb	r3, r3
 800415e:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d102      	bne.n	800416e <HAL_RCC_OscConfig+0xafe>
 8004168:	4b58      	ldr	r3, [pc, #352]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	e013      	b.n	8004196 <HAL_RCC_OscConfig+0xb26>
 800416e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004172:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004176:	2202      	movs	r2, #2
 8004178:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800417e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	fa93 f2a3 	rbit	r2, r3
 8004188:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800418c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004190:	601a      	str	r2, [r3, #0]
 8004192:	4b4e      	ldr	r3, [pc, #312]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 8004194:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004196:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800419a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800419e:	2102      	movs	r1, #2
 80041a0:	6011      	str	r1, [r2, #0]
 80041a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041a6:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	fa92 f1a2 	rbit	r1, r2
 80041b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041b4:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80041b8:	6011      	str	r1, [r2, #0]
  return result;
 80041ba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80041be:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 80041c2:	6812      	ldr	r2, [r2, #0]
 80041c4:	fab2 f282 	clz	r2, r2
 80041c8:	b2d2      	uxtb	r2, r2
 80041ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ce:	b2d2      	uxtb	r2, r2
 80041d0:	f002 021f 	and.w	r2, r2, #31
 80041d4:	2101      	movs	r1, #1
 80041d6:	fa01 f202 	lsl.w	r2, r1, r2
 80041da:	4013      	ands	r3, r2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d186      	bne.n	80040ee <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041e0:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d105      	bne.n	80041f4 <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e8:	4b38      	ldr	r3, [pc, #224]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	4a37      	ldr	r2, [pc, #220]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 80041ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8251 	beq.w	80046a8 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004206:	4b31      	ldr	r3, [pc, #196]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 030c 	and.w	r3, r3, #12
 800420e:	2b08      	cmp	r3, #8
 8004210:	f000 820f 	beq.w	8004632 <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004214:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004218:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b02      	cmp	r3, #2
 8004222:	f040 8165 	bne.w	80044f0 <HAL_RCC_OscConfig+0xe80>
 8004226:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800422a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800422e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004232:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004234:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004238:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	fa93 f2a3 	rbit	r2, r3
 8004242:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004246:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800424a:	601a      	str	r2, [r3, #0]
  return result;
 800424c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004250:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8004254:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004256:	fab3 f383 	clz	r3, r3
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004260:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	461a      	mov	r2, r3
 8004268:	2300      	movs	r3, #0
 800426a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426c:	f7fd fcf6 	bl	8001c5c <HAL_GetTick>
 8004270:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004274:	e009      	b.n	800428a <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004276:	f7fd fcf1 	bl	8001c5c <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e20f      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
 800428a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800428e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004292:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004296:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004298:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800429c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	fa93 f2a3 	rbit	r2, r3
 80042a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042aa:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80042ae:	601a      	str	r2, [r3, #0]
  return result;
 80042b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042b4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80042b8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042ba:	fab3 f383 	clz	r3, r3
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b3f      	cmp	r3, #63	@ 0x3f
 80042c2:	d805      	bhi.n	80042d0 <HAL_RCC_OscConfig+0xc60>
 80042c4:	4b01      	ldr	r3, [pc, #4]	@ (80042cc <HAL_RCC_OscConfig+0xc5c>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	e02a      	b.n	8004320 <HAL_RCC_OscConfig+0xcb0>
 80042ca:	bf00      	nop
 80042cc:	40021000 	.word	0x40021000
 80042d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042d4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80042d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80042dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042e2:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	fa93 f2a3 	rbit	r2, r3
 80042ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042f0:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80042f4:	601a      	str	r2, [r3, #0]
 80042f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042fa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80042fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004302:	601a      	str	r2, [r3, #0]
 8004304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004308:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	fa93 f2a3 	rbit	r2, r3
 8004312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004316:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	4bca      	ldr	r3, [pc, #808]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004324:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004328:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800432c:	6011      	str	r1, [r2, #0]
 800432e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004332:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8004336:	6812      	ldr	r2, [r2, #0]
 8004338:	fa92 f1a2 	rbit	r1, r2
 800433c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004340:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8004344:	6011      	str	r1, [r2, #0]
  return result;
 8004346:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800434a:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	fab2 f282 	clz	r2, r2
 8004354:	b2d2      	uxtb	r2, r2
 8004356:	f042 0220 	orr.w	r2, r2, #32
 800435a:	b2d2      	uxtb	r2, r2
 800435c:	f002 021f 	and.w	r2, r2, #31
 8004360:	2101      	movs	r1, #1
 8004362:	fa01 f202 	lsl.w	r2, r1, r2
 8004366:	4013      	ands	r3, r2
 8004368:	2b00      	cmp	r3, #0
 800436a:	d184      	bne.n	8004276 <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800436c:	4bb6      	ldr	r3, [pc, #728]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 800436e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004370:	f023 020f 	bic.w	r2, r3, #15
 8004374:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004378:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004380:	49b1      	ldr	r1, [pc, #708]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 8004382:	4313      	orrs	r3, r2
 8004384:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004386:	4bb0      	ldr	r3, [pc, #704]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 800438e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004392:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	6a19      	ldr	r1, [r3, #32]
 800439a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800439e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	430b      	orrs	r3, r1
 80043a8:	49a7      	ldr	r1, [pc, #668]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 80043aa:	4313      	orrs	r3, r2
 80043ac:	604b      	str	r3, [r1, #4]
 80043ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80043b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043c0:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	fa93 f2a3 	rbit	r2, r3
 80043ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043ce:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80043d2:	601a      	str	r2, [r3, #0]
  return result;
 80043d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043d8:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80043dc:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043de:	fab3 f383 	clz	r3, r3
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80043e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80043ec:	009b      	lsls	r3, r3, #2
 80043ee:	461a      	mov	r2, r3
 80043f0:	2301      	movs	r3, #1
 80043f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd fc32 	bl	8001c5c <HAL_GetTick>
 80043f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80043fc:	e009      	b.n	8004412 <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043fe:	f7fd fc2d 	bl	8001c5c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b02      	cmp	r3, #2
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e14b      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
 8004412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004416:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800441a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800441e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004420:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004424:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	fa93 f2a3 	rbit	r2, r3
 800442e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004432:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004436:	601a      	str	r2, [r3, #0]
  return result;
 8004438:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800443c:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8004440:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004442:	fab3 f383 	clz	r3, r3
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b3f      	cmp	r3, #63	@ 0x3f
 800444a:	d802      	bhi.n	8004452 <HAL_RCC_OscConfig+0xde2>
 800444c:	4b7e      	ldr	r3, [pc, #504]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	e027      	b.n	80044a2 <HAL_RCC_OscConfig+0xe32>
 8004452:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004456:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800445a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800445e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004464:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	fa93 f2a3 	rbit	r2, r3
 800446e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004472:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8004476:	601a      	str	r2, [r3, #0]
 8004478:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800447c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004480:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800448a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	fa93 f2a3 	rbit	r2, r3
 8004494:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004498:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800449c:	601a      	str	r2, [r3, #0]
 800449e:	4b6a      	ldr	r3, [pc, #424]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 80044a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044a6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80044aa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80044ae:	6011      	str	r1, [r2, #0]
 80044b0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044b4:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80044b8:	6812      	ldr	r2, [r2, #0]
 80044ba:	fa92 f1a2 	rbit	r1, r2
 80044be:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044c2:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80044c6:	6011      	str	r1, [r2, #0]
  return result;
 80044c8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80044cc:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 80044d0:	6812      	ldr	r2, [r2, #0]
 80044d2:	fab2 f282 	clz	r2, r2
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	f042 0220 	orr.w	r2, r2, #32
 80044dc:	b2d2      	uxtb	r2, r2
 80044de:	f002 021f 	and.w	r2, r2, #31
 80044e2:	2101      	movs	r1, #1
 80044e4:	fa01 f202 	lsl.w	r2, r1, r2
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d087      	beq.n	80043fe <HAL_RCC_OscConfig+0xd8e>
 80044ee:	e0db      	b.n	80046a8 <HAL_RCC_OscConfig+0x1038>
 80044f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044f4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80044f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004502:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	fa93 f2a3 	rbit	r2, r3
 800450c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004510:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004514:	601a      	str	r2, [r3, #0]
  return result;
 8004516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800451a:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800451e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004520:	fab3 f383 	clz	r3, r3
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800452a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	461a      	mov	r2, r3
 8004532:	2300      	movs	r3, #0
 8004534:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004536:	f7fd fb91 	bl	8001c5c <HAL_GetTick>
 800453a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800453e:	e009      	b.n	8004554 <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004540:	f7fd fb8c 	bl	8001c5c <HAL_GetTick>
 8004544:	4602      	mov	r2, r0
 8004546:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	2b02      	cmp	r3, #2
 800454e:	d901      	bls.n	8004554 <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e0aa      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
 8004554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004558:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800455c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004560:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004562:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004566:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	fa93 f2a3 	rbit	r2, r3
 8004570:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004574:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004578:	601a      	str	r2, [r3, #0]
  return result;
 800457a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800457e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004582:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004584:	fab3 f383 	clz	r3, r3
 8004588:	b2db      	uxtb	r3, r3
 800458a:	2b3f      	cmp	r3, #63	@ 0x3f
 800458c:	d802      	bhi.n	8004594 <HAL_RCC_OscConfig+0xf24>
 800458e:	4b2e      	ldr	r3, [pc, #184]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	e027      	b.n	80045e4 <HAL_RCC_OscConfig+0xf74>
 8004594:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004598:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800459c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045a6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	fa93 f2a3 	rbit	r2, r3
 80045b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045b4:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045be:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80045c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045cc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	fa93 f2a3 	rbit	r2, r3
 80045d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80045da:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	4b19      	ldr	r3, [pc, #100]	@ (8004648 <HAL_RCC_OscConfig+0xfd8>)
 80045e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045e8:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80045ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045f0:	6011      	str	r1, [r2, #0]
 80045f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045f6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	fa92 f1a2 	rbit	r1, r2
 8004600:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004604:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004608:	6011      	str	r1, [r2, #0]
  return result;
 800460a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800460e:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004612:	6812      	ldr	r2, [r2, #0]
 8004614:	fab2 f282 	clz	r2, r2
 8004618:	b2d2      	uxtb	r2, r2
 800461a:	f042 0220 	orr.w	r2, r2, #32
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	f002 021f 	and.w	r2, r2, #31
 8004624:	2101      	movs	r1, #1
 8004626:	fa01 f202 	lsl.w	r2, r1, r2
 800462a:	4013      	ands	r3, r2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d187      	bne.n	8004540 <HAL_RCC_OscConfig+0xed0>
 8004630:	e03a      	b.n	80046a8 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004636:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d104      	bne.n	800464c <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e031      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
 8004646:	bf00      	nop
 8004648:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800464c:	4b19      	ldr	r3, [pc, #100]	@ (80046b4 <HAL_RCC_OscConfig+0x1044>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8004654:	4b17      	ldr	r3, [pc, #92]	@ (80046b4 <HAL_RCC_OscConfig+0x1044>)
 8004656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004658:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800465c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004660:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004664:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004668:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	429a      	cmp	r2, r3
 8004672:	d117      	bne.n	80046a4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004674:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004678:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800467c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004680:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004688:	429a      	cmp	r2, r3
 800468a:	d10b      	bne.n	80046a4 <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800468c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004690:	f003 020f 	and.w	r2, r3, #15
 8004694:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004698:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d001      	beq.n	80046a8 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80046a4:	2301      	movs	r3, #1
 80046a6:	e000      	b.n	80046aa <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80046b0:	46bd      	mov	sp, r7
 80046b2:	bd80      	pop	{r7, pc}
 80046b4:	40021000 	.word	0x40021000

080046b8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b09e      	sub	sp, #120	@ 0x78
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80046c2:	2300      	movs	r3, #0
 80046c4:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e154      	b.n	800497a <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046d0:	4b89      	ldr	r3, [pc, #548]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0307 	and.w	r3, r3, #7
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d910      	bls.n	8004700 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046de:	4b86      	ldr	r3, [pc, #536]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f023 0207 	bic.w	r2, r3, #7
 80046e6:	4984      	ldr	r1, [pc, #528]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ee:	4b82      	ldr	r3, [pc, #520]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d001      	beq.n	8004700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e13c      	b.n	800497a <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d008      	beq.n	800471e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470c:	4b7b      	ldr	r3, [pc, #492]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	4978      	ldr	r1, [pc, #480]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	f000 80cd 	beq.w	80048c6 <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d137      	bne.n	80047a4 <HAL_RCC_ClockConfig+0xec>
 8004734:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004738:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800473a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800473c:	fa93 f3a3 	rbit	r3, r3
 8004740:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004742:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004744:	fab3 f383 	clz	r3, r3
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b3f      	cmp	r3, #63	@ 0x3f
 800474c:	d802      	bhi.n	8004754 <HAL_RCC_ClockConfig+0x9c>
 800474e:	4b6b      	ldr	r3, [pc, #428]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	e00f      	b.n	8004774 <HAL_RCC_ClockConfig+0xbc>
 8004754:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004758:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800475a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800475c:	fa93 f3a3 	rbit	r3, r3
 8004760:	667b      	str	r3, [r7, #100]	@ 0x64
 8004762:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004766:	663b      	str	r3, [r7, #96]	@ 0x60
 8004768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004770:	4b62      	ldr	r3, [pc, #392]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 8004772:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004774:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004778:	65ba      	str	r2, [r7, #88]	@ 0x58
 800477a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800477c:	fa92 f2a2 	rbit	r2, r2
 8004780:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004782:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004784:	fab2 f282 	clz	r2, r2
 8004788:	b2d2      	uxtb	r2, r2
 800478a:	f042 0220 	orr.w	r2, r2, #32
 800478e:	b2d2      	uxtb	r2, r2
 8004790:	f002 021f 	and.w	r2, r2, #31
 8004794:	2101      	movs	r1, #1
 8004796:	fa01 f202 	lsl.w	r2, r1, r2
 800479a:	4013      	ands	r3, r2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d171      	bne.n	8004884 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e0ea      	b.n	800497a <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d137      	bne.n	800481c <HAL_RCC_ClockConfig+0x164>
 80047ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047b0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b4:	fa93 f3a3 	rbit	r3, r3
 80047b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80047ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047bc:	fab3 f383 	clz	r3, r3
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b3f      	cmp	r3, #63	@ 0x3f
 80047c4:	d802      	bhi.n	80047cc <HAL_RCC_ClockConfig+0x114>
 80047c6:	4b4d      	ldr	r3, [pc, #308]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	e00f      	b.n	80047ec <HAL_RCC_ClockConfig+0x134>
 80047cc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047d0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047d4:	fa93 f3a3 	rbit	r3, r3
 80047d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80047da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80047de:	643b      	str	r3, [r7, #64]	@ 0x40
 80047e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047e2:	fa93 f3a3 	rbit	r3, r3
 80047e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e8:	4b44      	ldr	r3, [pc, #272]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047f0:	63ba      	str	r2, [r7, #56]	@ 0x38
 80047f2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80047f4:	fa92 f2a2 	rbit	r2, r2
 80047f8:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80047fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80047fc:	fab2 f282 	clz	r2, r2
 8004800:	b2d2      	uxtb	r2, r2
 8004802:	f042 0220 	orr.w	r2, r2, #32
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	f002 021f 	and.w	r2, r2, #31
 800480c:	2101      	movs	r1, #1
 800480e:	fa01 f202 	lsl.w	r2, r1, r2
 8004812:	4013      	ands	r3, r2
 8004814:	2b00      	cmp	r3, #0
 8004816:	d135      	bne.n	8004884 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e0ae      	b.n	800497a <HAL_RCC_ClockConfig+0x2c2>
 800481c:	2302      	movs	r3, #2
 800481e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004822:	fa93 f3a3 	rbit	r3, r3
 8004826:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004828:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	2b3f      	cmp	r3, #63	@ 0x3f
 8004832:	d802      	bhi.n	800483a <HAL_RCC_ClockConfig+0x182>
 8004834:	4b31      	ldr	r3, [pc, #196]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	e00d      	b.n	8004856 <HAL_RCC_ClockConfig+0x19e>
 800483a:	2302      	movs	r3, #2
 800483c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004840:	fa93 f3a3 	rbit	r3, r3
 8004844:	627b      	str	r3, [r7, #36]	@ 0x24
 8004846:	2302      	movs	r3, #2
 8004848:	623b      	str	r3, [r7, #32]
 800484a:	6a3b      	ldr	r3, [r7, #32]
 800484c:	fa93 f3a3 	rbit	r3, r3
 8004850:	61fb      	str	r3, [r7, #28]
 8004852:	4b2a      	ldr	r3, [pc, #168]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 8004854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004856:	2202      	movs	r2, #2
 8004858:	61ba      	str	r2, [r7, #24]
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	fa92 f2a2 	rbit	r2, r2
 8004860:	617a      	str	r2, [r7, #20]
  return result;
 8004862:	697a      	ldr	r2, [r7, #20]
 8004864:	fab2 f282 	clz	r2, r2
 8004868:	b2d2      	uxtb	r2, r2
 800486a:	f042 0220 	orr.w	r2, r2, #32
 800486e:	b2d2      	uxtb	r2, r2
 8004870:	f002 021f 	and.w	r2, r2, #31
 8004874:	2101      	movs	r1, #1
 8004876:	fa01 f202 	lsl.w	r2, r1, r2
 800487a:	4013      	ands	r3, r2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e07a      	b.n	800497a <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004884:	4b1d      	ldr	r3, [pc, #116]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f023 0203 	bic.w	r2, r3, #3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	491a      	ldr	r1, [pc, #104]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 8004892:	4313      	orrs	r3, r2
 8004894:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004896:	f7fd f9e1 	bl	8001c5c <HAL_GetTick>
 800489a:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800489c:	e00a      	b.n	80048b4 <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800489e:	f7fd f9dd 	bl	8001c5c <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e062      	b.n	800497a <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048b4:	4b11      	ldr	r3, [pc, #68]	@ (80048fc <HAL_RCC_ClockConfig+0x244>)
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f003 020c 	and.w	r2, r3, #12
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d1eb      	bne.n	800489e <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80048c6:	4b0c      	ldr	r3, [pc, #48]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f003 0307 	and.w	r3, r3, #7
 80048ce:	683a      	ldr	r2, [r7, #0]
 80048d0:	429a      	cmp	r2, r3
 80048d2:	d215      	bcs.n	8004900 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d4:	4b08      	ldr	r3, [pc, #32]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 0207 	bic.w	r2, r3, #7
 80048dc:	4906      	ldr	r1, [pc, #24]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	4313      	orrs	r3, r2
 80048e2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048e4:	4b04      	ldr	r3, [pc, #16]	@ (80048f8 <HAL_RCC_ClockConfig+0x240>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	683a      	ldr	r2, [r7, #0]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d006      	beq.n	8004900 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e041      	b.n	800497a <HAL_RCC_ClockConfig+0x2c2>
 80048f6:	bf00      	nop
 80048f8:	40022000 	.word	0x40022000
 80048fc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800490c:	4b1d      	ldr	r3, [pc, #116]	@ (8004984 <HAL_RCC_ClockConfig+0x2cc>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	491a      	ldr	r1, [pc, #104]	@ (8004984 <HAL_RCC_ClockConfig+0x2cc>)
 800491a:	4313      	orrs	r3, r2
 800491c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 0308 	and.w	r3, r3, #8
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800492a:	4b16      	ldr	r3, [pc, #88]	@ (8004984 <HAL_RCC_ClockConfig+0x2cc>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	00db      	lsls	r3, r3, #3
 8004938:	4912      	ldr	r1, [pc, #72]	@ (8004984 <HAL_RCC_ClockConfig+0x2cc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800493e:	f000 f829 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8004942:	4601      	mov	r1, r0
 8004944:	4b0f      	ldr	r3, [pc, #60]	@ (8004984 <HAL_RCC_ClockConfig+0x2cc>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800494c:	22f0      	movs	r2, #240	@ 0xf0
 800494e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	fa92 f2a2 	rbit	r2, r2
 8004956:	60fa      	str	r2, [r7, #12]
  return result;
 8004958:	68fa      	ldr	r2, [r7, #12]
 800495a:	fab2 f282 	clz	r2, r2
 800495e:	b2d2      	uxtb	r2, r2
 8004960:	40d3      	lsrs	r3, r2
 8004962:	4a09      	ldr	r2, [pc, #36]	@ (8004988 <HAL_RCC_ClockConfig+0x2d0>)
 8004964:	5cd3      	ldrb	r3, [r2, r3]
 8004966:	fa21 f303 	lsr.w	r3, r1, r3
 800496a:	4a08      	ldr	r2, [pc, #32]	@ (800498c <HAL_RCC_ClockConfig+0x2d4>)
 800496c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800496e:	4b08      	ldr	r3, [pc, #32]	@ (8004990 <HAL_RCC_ClockConfig+0x2d8>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4618      	mov	r0, r3
 8004974:	f7fd f92e 	bl	8001bd4 <HAL_InitTick>
  
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	3778      	adds	r7, #120	@ 0x78
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	40021000 	.word	0x40021000
 8004988:	08009b24 	.word	0x08009b24
 800498c:	2000001c 	.word	0x2000001c
 8004990:	20000020 	.word	0x20000020

08004994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	2300      	movs	r3, #0
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	2300      	movs	r3, #0
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	2300      	movs	r3, #0
 80049a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80049ae:	4b1f      	ldr	r3, [pc, #124]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b04      	cmp	r3, #4
 80049bc:	d002      	beq.n	80049c4 <HAL_RCC_GetSysClockFreq+0x30>
 80049be:	2b08      	cmp	r3, #8
 80049c0:	d003      	beq.n	80049ca <HAL_RCC_GetSysClockFreq+0x36>
 80049c2:	e029      	b.n	8004a18 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049c6:	613b      	str	r3, [r7, #16]
      break;
 80049c8:	e029      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	0c9b      	lsrs	r3, r3, #18
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <HAL_RCC_GetSysClockFreq+0xa0>)
 80049d4:	5cd3      	ldrb	r3, [r2, r3]
 80049d6:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80049d8:	4b14      	ldr	r3, [pc, #80]	@ (8004a2c <HAL_RCC_GetSysClockFreq+0x98>)
 80049da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049dc:	f003 030f 	and.w	r3, r3, #15
 80049e0:	4a15      	ldr	r2, [pc, #84]	@ (8004a38 <HAL_RCC_GetSysClockFreq+0xa4>)
 80049e2:	5cd3      	ldrb	r3, [r2, r3]
 80049e4:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d008      	beq.n	8004a02 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80049f0:	4a0f      	ldr	r2, [pc, #60]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 80049f2:	68bb      	ldr	r3, [r7, #8]
 80049f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	fb02 f303 	mul.w	r3, r2, r3
 80049fe:	617b      	str	r3, [r7, #20]
 8004a00:	e007      	b.n	8004a12 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004a02:	4a0b      	ldr	r2, [pc, #44]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	613b      	str	r3, [r7, #16]
      break;
 8004a16:	e002      	b.n	8004a1e <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a18:	4b05      	ldr	r3, [pc, #20]	@ (8004a30 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004a1a:	613b      	str	r3, [r7, #16]
      break;
 8004a1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a1e:	693b      	ldr	r3, [r7, #16]
}
 8004a20:	4618      	mov	r0, r3
 8004a22:	371c      	adds	r7, #28
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr
 8004a2c:	40021000 	.word	0x40021000
 8004a30:	007a1200 	.word	0x007a1200
 8004a34:	08009b3c 	.word	0x08009b3c
 8004a38:	08009b4c 	.word	0x08009b4c

08004a3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a40:	4b03      	ldr	r3, [pc, #12]	@ (8004a50 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	2000001c 	.word	0x2000001c

08004a54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b082      	sub	sp, #8
 8004a58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004a5a:	f7ff ffef 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004a5e:	4601      	mov	r1, r0
 8004a60:	4b0b      	ldr	r3, [pc, #44]	@ (8004a90 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004a68:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004a6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	fa92 f2a2 	rbit	r2, r2
 8004a74:	603a      	str	r2, [r7, #0]
  return result;
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	fab2 f282 	clz	r2, r2
 8004a7c:	b2d2      	uxtb	r2, r2
 8004a7e:	40d3      	lsrs	r3, r2
 8004a80:	4a04      	ldr	r2, [pc, #16]	@ (8004a94 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004a82:	5cd3      	ldrb	r3, [r2, r3]
 8004a84:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40021000 	.word	0x40021000
 8004a94:	08009b34 	.word	0x08009b34

08004a98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004a9e:	f7ff ffcd 	bl	8004a3c <HAL_RCC_GetHCLKFreq>
 8004aa2:	4601      	mov	r1, r0
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004aac:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004ab0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	fa92 f2a2 	rbit	r2, r2
 8004ab8:	603a      	str	r2, [r7, #0]
  return result;
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	fab2 f282 	clz	r2, r2
 8004ac0:	b2d2      	uxtb	r2, r2
 8004ac2:	40d3      	lsrs	r3, r2
 8004ac4:	4a04      	ldr	r2, [pc, #16]	@ (8004ad8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ac6:	5cd3      	ldrb	r3, [r2, r3]
 8004ac8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004acc:	4618      	mov	r0, r3
 8004ace:	3708      	adds	r7, #8
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}
 8004ad4:	40021000 	.word	0x40021000
 8004ad8:	08009b34 	.word	0x08009b34

08004adc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b092      	sub	sp, #72	@ 0x48
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004aec:	2300      	movs	r3, #0
 8004aee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80d2 	beq.w	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b00:	4b4d      	ldr	r3, [pc, #308]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b02:	69db      	ldr	r3, [r3, #28]
 8004b04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d10e      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b0c:	4b4a      	ldr	r3, [pc, #296]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	4a49      	ldr	r2, [pc, #292]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b16:	61d3      	str	r3, [r2, #28]
 8004b18:	4b47      	ldr	r3, [pc, #284]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b24:	2301      	movs	r3, #1
 8004b26:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b2a:	4b44      	ldr	r3, [pc, #272]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d118      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b36:	4b41      	ldr	r3, [pc, #260]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a40      	ldr	r2, [pc, #256]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b40:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b42:	f7fd f88b 	bl	8001c5c <HAL_GetTick>
 8004b46:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b48:	e008      	b.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4a:	f7fd f887 	bl	8001c5c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b64      	cmp	r3, #100	@ 0x64
 8004b56:	d901      	bls.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1d4      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5c:	4b37      	ldr	r3, [pc, #220]	@ (8004c3c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d0f0      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004b68:	4b33      	ldr	r3, [pc, #204]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b6a:	6a1b      	ldr	r3, [r3, #32]
 8004b6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8082 	beq.w	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b82:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d07a      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b88:	4b2b      	ldr	r3, [pc, #172]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004b8a:	6a1b      	ldr	r3, [r3, #32]
 8004b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b92:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	fa93 f3a3 	rbit	r3, r3
 8004b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ba2:	fab3 f383 	clz	r3, r3
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	461a      	mov	r2, r3
 8004baa:	4b25      	ldr	r3, [pc, #148]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	6013      	str	r3, [r2, #0]
 8004bb6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	fa93 f3a3 	rbit	r3, r3
 8004bc2:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004bc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004bc6:	fab3 f383 	clz	r3, r3
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	4b1c      	ldr	r3, [pc, #112]	@ (8004c40 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bd0:	4413      	add	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004bda:	4a17      	ldr	r2, [pc, #92]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004bdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bde:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d049      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bea:	f7fd f837 	bl	8001c5c <HAL_GetTick>
 8004bee:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf0:	e00a      	b.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf2:	f7fd f833 	bl	8001c5c <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e17e      	b.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8004c14:	2302      	movs	r3, #2
 8004c16:	623b      	str	r3, [r7, #32]
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	fa93 f3a3 	rbit	r3, r3
 8004c1e:	61fb      	str	r3, [r7, #28]
  return result;
 8004c20:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c22:	fab3 f383 	clz	r3, r3
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d108      	bne.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004c32:	4b01      	ldr	r3, [pc, #4]	@ (8004c38 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004c34:	6a1b      	ldr	r3, [r3, #32]
 8004c36:	e00d      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	40007000 	.word	0x40007000
 8004c40:	10908100 	.word	0x10908100
 8004c44:	2302      	movs	r3, #2
 8004c46:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	fa93 f3a3 	rbit	r3, r3
 8004c4e:	617b      	str	r3, [r7, #20]
 8004c50:	4b9a      	ldr	r3, [pc, #616]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c54:	2202      	movs	r2, #2
 8004c56:	613a      	str	r2, [r7, #16]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	fa92 f2a2 	rbit	r2, r2
 8004c5e:	60fa      	str	r2, [r7, #12]
  return result;
 8004c60:	68fa      	ldr	r2, [r7, #12]
 8004c62:	fab2 f282 	clz	r2, r2
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004c6c:	b2d2      	uxtb	r2, r2
 8004c6e:	f002 021f 	and.w	r2, r2, #31
 8004c72:	2101      	movs	r1, #1
 8004c74:	fa01 f202 	lsl.w	r2, r1, r2
 8004c78:	4013      	ands	r3, r2
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d0b9      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004c7e:	4b8f      	ldr	r3, [pc, #572]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	498c      	ldr	r1, [pc, #560]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004c90:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d105      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c98:	4b88      	ldr	r3, [pc, #544]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	4a87      	ldr	r2, [pc, #540]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ca2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f003 0301 	and.w	r3, r3, #1
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cb0:	4b82      	ldr	r3, [pc, #520]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	f023 0203 	bic.w	r2, r3, #3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	497f      	ldr	r1, [pc, #508]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d008      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cce:	4b7b      	ldr	r3, [pc, #492]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	4978      	ldr	r1, [pc, #480]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cdc:	4313      	orrs	r3, r2
 8004cde:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d008      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004cec:	4b73      	ldr	r3, [pc, #460]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	4970      	ldr	r1, [pc, #448]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d008      	beq.n	8004d1c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0e:	f023 0210 	bic.w	r2, r3, #16
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	69db      	ldr	r3, [r3, #28]
 8004d16:	4969      	ldr	r1, [pc, #420]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d008      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004d28:	4b64      	ldr	r3, [pc, #400]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d34:	4961      	ldr	r1, [pc, #388]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	4313      	orrs	r3, r2
 8004d38:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d008      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d46:	4b5d      	ldr	r3, [pc, #372]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d4a:	f023 0220 	bic.w	r2, r3, #32
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	495a      	ldr	r1, [pc, #360]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d008      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d64:	4b55      	ldr	r3, [pc, #340]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d68:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d70:	4952      	ldr	r1, [pc, #328]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d82:	4b4e      	ldr	r3, [pc, #312]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d86:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	494b      	ldr	r1, [pc, #300]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 0310 	and.w	r3, r3, #16
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d008      	beq.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004da0:	4b46      	ldr	r3, [pc, #280]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	4943      	ldr	r1, [pc, #268]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dae:	4313      	orrs	r3, r2
 8004db0:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d008      	beq.n	8004dd0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dca:	493c      	ldr	r1, [pc, #240]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d008      	beq.n	8004dee <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004ddc:	4b37      	ldr	r3, [pc, #220]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de8:	4934      	ldr	r1, [pc, #208]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d008      	beq.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004dfa:	4b30      	ldr	r3, [pc, #192]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dfe:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	492d      	ldr	r1, [pc, #180]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d008      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004e18:	4b28      	ldr	r3, [pc, #160]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e1c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e24:	4925      	ldr	r1, [pc, #148]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d008      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004e36:	4b21      	ldr	r3, [pc, #132]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e3a:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e42:	491e      	ldr	r1, [pc, #120]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e44:	4313      	orrs	r3, r2
 8004e46:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004e54:	4b19      	ldr	r3, [pc, #100]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e58:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e60:	4916      	ldr	r1, [pc, #88]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d008      	beq.n	8004e84 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004e72:	4b12      	ldr	r3, [pc, #72]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e76:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7e:	490f      	ldr	r1, [pc, #60]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004e90:	4b0a      	ldr	r3, [pc, #40]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e94:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9c:	4907      	ldr	r1, [pc, #28]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00c      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004eae:	4b03      	ldr	r3, [pc, #12]	@ (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	e002      	b.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004eba:	bf00      	nop
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec2:	4913      	ldr	r1, [pc, #76]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d008      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ee0:	490b      	ldr	r1, [pc, #44]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d008      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004ef2:	4b07      	ldr	r3, [pc, #28]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ef6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004efe:	4904      	ldr	r1, [pc, #16]	@ (8004f10 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3748      	adds	r7, #72	@ 0x48
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40021000 	.word	0x40021000

08004f14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b082      	sub	sp, #8
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d101      	bne.n	8004f26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	e049      	b.n	8004fba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f2c:	b2db      	uxtb	r3, r3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d106      	bne.n	8004f40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7fc fbf8 	bl	8001730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	4619      	mov	r1, r3
 8004f52:	4610      	mov	r0, r2
 8004f54:	f000 fdbe 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2201      	movs	r2, #1
 8004f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2201      	movs	r2, #1
 8004f74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b082      	sub	sp, #8
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e049      	b.n	8005068 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d106      	bne.n	8004fee <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fe8:	6878      	ldr	r0, [r7, #4]
 8004fea:	f000 f841 	bl	8005070 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2202      	movs	r2, #2
 8004ff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	4619      	mov	r1, r3
 8005000:	4610      	mov	r0, r2
 8005002:	f000 fd67 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	2201      	movs	r2, #1
 800502a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2201      	movs	r2, #1
 8005032:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	2201      	movs	r2, #1
 800503a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3708      	adds	r7, #8
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005078:	bf00      	nop
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d109      	bne.n	80050a8 <HAL_TIM_PWM_Start+0x24>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b01      	cmp	r3, #1
 800509e:	bf14      	ite	ne
 80050a0:	2301      	movne	r3, #1
 80050a2:	2300      	moveq	r3, #0
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	e03c      	b.n	8005122 <HAL_TIM_PWM_Start+0x9e>
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	2b04      	cmp	r3, #4
 80050ac:	d109      	bne.n	80050c2 <HAL_TIM_PWM_Start+0x3e>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b01      	cmp	r3, #1
 80050b8:	bf14      	ite	ne
 80050ba:	2301      	movne	r3, #1
 80050bc:	2300      	moveq	r3, #0
 80050be:	b2db      	uxtb	r3, r3
 80050c0:	e02f      	b.n	8005122 <HAL_TIM_PWM_Start+0x9e>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b08      	cmp	r3, #8
 80050c6:	d109      	bne.n	80050dc <HAL_TIM_PWM_Start+0x58>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	bf14      	ite	ne
 80050d4:	2301      	movne	r3, #1
 80050d6:	2300      	moveq	r3, #0
 80050d8:	b2db      	uxtb	r3, r3
 80050da:	e022      	b.n	8005122 <HAL_TIM_PWM_Start+0x9e>
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	2b0c      	cmp	r3, #12
 80050e0:	d109      	bne.n	80050f6 <HAL_TIM_PWM_Start+0x72>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	bf14      	ite	ne
 80050ee:	2301      	movne	r3, #1
 80050f0:	2300      	moveq	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	e015      	b.n	8005122 <HAL_TIM_PWM_Start+0x9e>
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	2b10      	cmp	r3, #16
 80050fa:	d109      	bne.n	8005110 <HAL_TIM_PWM_Start+0x8c>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b01      	cmp	r3, #1
 8005106:	bf14      	ite	ne
 8005108:	2301      	movne	r3, #1
 800510a:	2300      	moveq	r3, #0
 800510c:	b2db      	uxtb	r3, r3
 800510e:	e008      	b.n	8005122 <HAL_TIM_PWM_Start+0x9e>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005116:	b2db      	uxtb	r3, r3
 8005118:	2b01      	cmp	r3, #1
 800511a:	bf14      	ite	ne
 800511c:	2301      	movne	r3, #1
 800511e:	2300      	moveq	r3, #0
 8005120:	b2db      	uxtb	r3, r3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e0a1      	b.n	800526e <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <HAL_TIM_PWM_Start+0xb6>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2202      	movs	r2, #2
 8005134:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005138:	e023      	b.n	8005182 <HAL_TIM_PWM_Start+0xfe>
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d104      	bne.n	800514a <HAL_TIM_PWM_Start+0xc6>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005148:	e01b      	b.n	8005182 <HAL_TIM_PWM_Start+0xfe>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b08      	cmp	r3, #8
 800514e:	d104      	bne.n	800515a <HAL_TIM_PWM_Start+0xd6>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2202      	movs	r2, #2
 8005154:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005158:	e013      	b.n	8005182 <HAL_TIM_PWM_Start+0xfe>
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	2b0c      	cmp	r3, #12
 800515e:	d104      	bne.n	800516a <HAL_TIM_PWM_Start+0xe6>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2202      	movs	r2, #2
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005168:	e00b      	b.n	8005182 <HAL_TIM_PWM_Start+0xfe>
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b10      	cmp	r3, #16
 800516e:	d104      	bne.n	800517a <HAL_TIM_PWM_Start+0xf6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005178:	e003      	b.n	8005182 <HAL_TIM_PWM_Start+0xfe>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2202      	movs	r2, #2
 800517e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2201      	movs	r2, #1
 8005188:	6839      	ldr	r1, [r7, #0]
 800518a:	4618      	mov	r0, r3
 800518c:	f001 fa10 	bl	80065b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a38      	ldr	r2, [pc, #224]	@ (8005278 <HAL_TIM_PWM_Start+0x1f4>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_TIM_PWM_Start+0x148>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a37      	ldr	r2, [pc, #220]	@ (800527c <HAL_TIM_PWM_Start+0x1f8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_TIM_PWM_Start+0x148>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a35      	ldr	r2, [pc, #212]	@ (8005280 <HAL_TIM_PWM_Start+0x1fc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_TIM_PWM_Start+0x148>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a34      	ldr	r2, [pc, #208]	@ (8005284 <HAL_TIM_PWM_Start+0x200>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_TIM_PWM_Start+0x148>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a32      	ldr	r2, [pc, #200]	@ (8005288 <HAL_TIM_PWM_Start+0x204>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_TIM_PWM_Start+0x148>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a31      	ldr	r2, [pc, #196]	@ (800528c <HAL_TIM_PWM_Start+0x208>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <HAL_TIM_PWM_Start+0x14c>
 80051cc:	2301      	movs	r3, #1
 80051ce:	e000      	b.n	80051d2 <HAL_TIM_PWM_Start+0x14e>
 80051d0:	2300      	movs	r3, #0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d007      	beq.n	80051e6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	4a23      	ldr	r2, [pc, #140]	@ (8005278 <HAL_TIM_PWM_Start+0x1f4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d01d      	beq.n	800522c <HAL_TIM_PWM_Start+0x1a8>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f8:	d018      	beq.n	800522c <HAL_TIM_PWM_Start+0x1a8>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a24      	ldr	r2, [pc, #144]	@ (8005290 <HAL_TIM_PWM_Start+0x20c>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d013      	beq.n	800522c <HAL_TIM_PWM_Start+0x1a8>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	4a22      	ldr	r2, [pc, #136]	@ (8005294 <HAL_TIM_PWM_Start+0x210>)
 800520a:	4293      	cmp	r3, r2
 800520c:	d00e      	beq.n	800522c <HAL_TIM_PWM_Start+0x1a8>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1a      	ldr	r2, [pc, #104]	@ (800527c <HAL_TIM_PWM_Start+0x1f8>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d009      	beq.n	800522c <HAL_TIM_PWM_Start+0x1a8>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a18      	ldr	r2, [pc, #96]	@ (8005280 <HAL_TIM_PWM_Start+0x1fc>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_TIM_PWM_Start+0x1a8>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a19      	ldr	r2, [pc, #100]	@ (800528c <HAL_TIM_PWM_Start+0x208>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d115      	bne.n	8005258 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	689a      	ldr	r2, [r3, #8]
 8005232:	4b19      	ldr	r3, [pc, #100]	@ (8005298 <HAL_TIM_PWM_Start+0x214>)
 8005234:	4013      	ands	r3, r2
 8005236:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2b06      	cmp	r3, #6
 800523c:	d015      	beq.n	800526a <HAL_TIM_PWM_Start+0x1e6>
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005244:	d011      	beq.n	800526a <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0201 	orr.w	r2, r2, #1
 8005254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005256:	e008      	b.n	800526a <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	e000      	b.n	800526c <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40012c00 	.word	0x40012c00
 800527c:	40013400 	.word	0x40013400
 8005280:	40014000 	.word	0x40014000
 8005284:	40014400 	.word	0x40014400
 8005288:	40014800 	.word	0x40014800
 800528c:	40015000 	.word	0x40015000
 8005290:	40000400 	.word	0x40000400
 8005294:	40000800 	.word	0x40000800
 8005298:	00010007 	.word	0x00010007

0800529c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e049      	b.n	8005342 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d106      	bne.n	80052c8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f841 	bl	800534a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2202      	movs	r2, #2
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3304      	adds	r3, #4
 80052d8:	4619      	mov	r1, r3
 80052da:	4610      	mov	r0, r2
 80052dc:	f000 fbfa 	bl	8005ad4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2201      	movs	r2, #1
 8005304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2201      	movs	r2, #1
 800530c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}

0800534a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800534a:	b480      	push	{r7}
 800534c:	b083      	sub	sp, #12
 800534e:	af00      	add	r7, sp, #0
 8005350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005352:	bf00      	nop
 8005354:	370c      	adds	r7, #12
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
	...

08005360 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b084      	sub	sp, #16
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d104      	bne.n	800537a <HAL_TIM_IC_Start+0x1a>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005376:	b2db      	uxtb	r3, r3
 8005378:	e023      	b.n	80053c2 <HAL_TIM_IC_Start+0x62>
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d104      	bne.n	800538a <HAL_TIM_IC_Start+0x2a>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005386:	b2db      	uxtb	r3, r3
 8005388:	e01b      	b.n	80053c2 <HAL_TIM_IC_Start+0x62>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d104      	bne.n	800539a <HAL_TIM_IC_Start+0x3a>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005396:	b2db      	uxtb	r3, r3
 8005398:	e013      	b.n	80053c2 <HAL_TIM_IC_Start+0x62>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b0c      	cmp	r3, #12
 800539e:	d104      	bne.n	80053aa <HAL_TIM_IC_Start+0x4a>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	e00b      	b.n	80053c2 <HAL_TIM_IC_Start+0x62>
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	2b10      	cmp	r3, #16
 80053ae:	d104      	bne.n	80053ba <HAL_TIM_IC_Start+0x5a>
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	e003      	b.n	80053c2 <HAL_TIM_IC_Start+0x62>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d104      	bne.n	80053d4 <HAL_TIM_IC_Start+0x74>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e013      	b.n	80053fc <HAL_TIM_IC_Start+0x9c>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b04      	cmp	r3, #4
 80053d8:	d104      	bne.n	80053e4 <HAL_TIM_IC_Start+0x84>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	e00b      	b.n	80053fc <HAL_TIM_IC_Start+0x9c>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b08      	cmp	r3, #8
 80053e8:	d104      	bne.n	80053f4 <HAL_TIM_IC_Start+0x94>
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	e003      	b.n	80053fc <HAL_TIM_IC_Start+0x9c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053fe:	7bfb      	ldrb	r3, [r7, #15]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d102      	bne.n	800540a <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005404:	7bbb      	ldrb	r3, [r7, #14]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d001      	beq.n	800540e <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e092      	b.n	8005534 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <HAL_TIM_IC_Start+0xbe>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800541c:	e023      	b.n	8005466 <HAL_TIM_IC_Start+0x106>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d104      	bne.n	800542e <HAL_TIM_IC_Start+0xce>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800542c:	e01b      	b.n	8005466 <HAL_TIM_IC_Start+0x106>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d104      	bne.n	800543e <HAL_TIM_IC_Start+0xde>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800543c:	e013      	b.n	8005466 <HAL_TIM_IC_Start+0x106>
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	2b0c      	cmp	r3, #12
 8005442:	d104      	bne.n	800544e <HAL_TIM_IC_Start+0xee>
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2202      	movs	r2, #2
 8005448:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800544c:	e00b      	b.n	8005466 <HAL_TIM_IC_Start+0x106>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b10      	cmp	r3, #16
 8005452:	d104      	bne.n	800545e <HAL_TIM_IC_Start+0xfe>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2202      	movs	r2, #2
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800545c:	e003      	b.n	8005466 <HAL_TIM_IC_Start+0x106>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d104      	bne.n	8005476 <HAL_TIM_IC_Start+0x116>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005474:	e013      	b.n	800549e <HAL_TIM_IC_Start+0x13e>
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	2b04      	cmp	r3, #4
 800547a:	d104      	bne.n	8005486 <HAL_TIM_IC_Start+0x126>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005484:	e00b      	b.n	800549e <HAL_TIM_IC_Start+0x13e>
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b08      	cmp	r3, #8
 800548a:	d104      	bne.n	8005496 <HAL_TIM_IC_Start+0x136>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2202      	movs	r2, #2
 8005490:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005494:	e003      	b.n	800549e <HAL_TIM_IC_Start+0x13e>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2201      	movs	r2, #1
 80054a4:	6839      	ldr	r1, [r7, #0]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f001 f882 	bl	80065b0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a22      	ldr	r2, [pc, #136]	@ (800553c <HAL_TIM_IC_Start+0x1dc>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d01d      	beq.n	80054f2 <HAL_TIM_IC_Start+0x192>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054be:	d018      	beq.n	80054f2 <HAL_TIM_IC_Start+0x192>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a1e      	ldr	r2, [pc, #120]	@ (8005540 <HAL_TIM_IC_Start+0x1e0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <HAL_TIM_IC_Start+0x192>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	@ (8005544 <HAL_TIM_IC_Start+0x1e4>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d00e      	beq.n	80054f2 <HAL_TIM_IC_Start+0x192>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a1b      	ldr	r2, [pc, #108]	@ (8005548 <HAL_TIM_IC_Start+0x1e8>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d009      	beq.n	80054f2 <HAL_TIM_IC_Start+0x192>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a1a      	ldr	r2, [pc, #104]	@ (800554c <HAL_TIM_IC_Start+0x1ec>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d004      	beq.n	80054f2 <HAL_TIM_IC_Start+0x192>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a18      	ldr	r2, [pc, #96]	@ (8005550 <HAL_TIM_IC_Start+0x1f0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d115      	bne.n	800551e <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689a      	ldr	r2, [r3, #8]
 80054f8:	4b16      	ldr	r3, [pc, #88]	@ (8005554 <HAL_TIM_IC_Start+0x1f4>)
 80054fa:	4013      	ands	r3, r2
 80054fc:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2b06      	cmp	r3, #6
 8005502:	d015      	beq.n	8005530 <HAL_TIM_IC_Start+0x1d0>
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800550a:	d011      	beq.n	8005530 <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551c:	e008      	b.n	8005530 <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f042 0201 	orr.w	r2, r2, #1
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	e000      	b.n	8005532 <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005530:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	3710      	adds	r7, #16
 8005538:	46bd      	mov	sp, r7
 800553a:	bd80      	pop	{r7, pc}
 800553c:	40012c00 	.word	0x40012c00
 8005540:	40000400 	.word	0x40000400
 8005544:	40000800 	.word	0x40000800
 8005548:	40013400 	.word	0x40013400
 800554c:	40014000 	.word	0x40014000
 8005550:	40015000 	.word	0x40015000
 8005554:	00010007 	.word	0x00010007

08005558 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005564:	2300      	movs	r3, #0
 8005566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800556e:	2b01      	cmp	r3, #1
 8005570:	d101      	bne.n	8005576 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005572:	2302      	movs	r3, #2
 8005574:	e088      	b.n	8005688 <HAL_TIM_IC_ConfigChannel+0x130>
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11b      	bne.n	80055bc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005594:	f000 fe4e 	bl	8006234 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	699a      	ldr	r2, [r3, #24]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f022 020c 	bic.w	r2, r2, #12
 80055a6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6999      	ldr	r1, [r3, #24]
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	689a      	ldr	r2, [r3, #8]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	430a      	orrs	r2, r1
 80055b8:	619a      	str	r2, [r3, #24]
 80055ba:	e060      	b.n	800567e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b04      	cmp	r3, #4
 80055c0:	d11c      	bne.n	80055fc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80055d2:	f000 fecc 	bl	800636e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	699a      	ldr	r2, [r3, #24]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80055e4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6999      	ldr	r1, [r3, #24]
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	021a      	lsls	r2, r3, #8
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	619a      	str	r2, [r3, #24]
 80055fa:	e040      	b.n	800567e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b08      	cmp	r3, #8
 8005600:	d11b      	bne.n	800563a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005612:	f000 ff19 	bl	8006448 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	69da      	ldr	r2, [r3, #28]
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 020c 	bic.w	r2, r2, #12
 8005624:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	689a      	ldr	r2, [r3, #8]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	61da      	str	r2, [r3, #28]
 8005638:	e021      	b.n	800567e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b0c      	cmp	r3, #12
 800563e:	d11c      	bne.n	800567a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005650:	f000 ff36 	bl	80064c0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69da      	ldr	r2, [r3, #28]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005662:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69d9      	ldr	r1, [r3, #28]
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	021a      	lsls	r2, r3, #8
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	430a      	orrs	r2, r1
 8005676:	61da      	str	r2, [r3, #28]
 8005678:	e001      	b.n	800567e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005686:	7dfb      	ldrb	r3, [r7, #23]
}
 8005688:	4618      	mov	r0, r3
 800568a:	3718      	adds	r7, #24
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800569c:	2300      	movs	r3, #0
 800569e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056a6:	2b01      	cmp	r3, #1
 80056a8:	d101      	bne.n	80056ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80056aa:	2302      	movs	r3, #2
 80056ac:	e0ff      	b.n	80058ae <HAL_TIM_PWM_ConfigChannel+0x21e>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b14      	cmp	r3, #20
 80056ba:	f200 80f0 	bhi.w	800589e <HAL_TIM_PWM_ConfigChannel+0x20e>
 80056be:	a201      	add	r2, pc, #4	@ (adr r2, 80056c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80056c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056c4:	08005719 	.word	0x08005719
 80056c8:	0800589f 	.word	0x0800589f
 80056cc:	0800589f 	.word	0x0800589f
 80056d0:	0800589f 	.word	0x0800589f
 80056d4:	08005759 	.word	0x08005759
 80056d8:	0800589f 	.word	0x0800589f
 80056dc:	0800589f 	.word	0x0800589f
 80056e0:	0800589f 	.word	0x0800589f
 80056e4:	0800579b 	.word	0x0800579b
 80056e8:	0800589f 	.word	0x0800589f
 80056ec:	0800589f 	.word	0x0800589f
 80056f0:	0800589f 	.word	0x0800589f
 80056f4:	080057db 	.word	0x080057db
 80056f8:	0800589f 	.word	0x0800589f
 80056fc:	0800589f 	.word	0x0800589f
 8005700:	0800589f 	.word	0x0800589f
 8005704:	0800581d 	.word	0x0800581d
 8005708:	0800589f 	.word	0x0800589f
 800570c:	0800589f 	.word	0x0800589f
 8005710:	0800589f 	.word	0x0800589f
 8005714:	0800585d 	.word	0x0800585d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	4618      	mov	r0, r3
 8005720:	f000 fa82 	bl	8005c28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	699a      	ldr	r2, [r3, #24]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0208 	orr.w	r2, r2, #8
 8005732:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	699a      	ldr	r2, [r3, #24]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f022 0204 	bic.w	r2, r2, #4
 8005742:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6999      	ldr	r1, [r3, #24]
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	691a      	ldr	r2, [r3, #16]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	430a      	orrs	r2, r1
 8005754:	619a      	str	r2, [r3, #24]
      break;
 8005756:	e0a5      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	4618      	mov	r0, r3
 8005760:	f000 fafc 	bl	8005d5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	699a      	ldr	r2, [r3, #24]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005772:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	699a      	ldr	r2, [r3, #24]
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005782:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6999      	ldr	r1, [r3, #24]
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	021a      	lsls	r2, r3, #8
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	619a      	str	r2, [r3, #24]
      break;
 8005798:	e084      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68b9      	ldr	r1, [r7, #8]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fb6f 	bl	8005e84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	69da      	ldr	r2, [r3, #28]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f042 0208 	orr.w	r2, r2, #8
 80057b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	69da      	ldr	r2, [r3, #28]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f022 0204 	bic.w	r2, r2, #4
 80057c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	69d9      	ldr	r1, [r3, #28]
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	691a      	ldr	r2, [r3, #16]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	430a      	orrs	r2, r1
 80057d6:	61da      	str	r2, [r3, #28]
      break;
 80057d8:	e064      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	68b9      	ldr	r1, [r7, #8]
 80057e0:	4618      	mov	r0, r3
 80057e2:	f000 fbe1 	bl	8005fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	69da      	ldr	r2, [r3, #28]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	69da      	ldr	r2, [r3, #28]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005804:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	69d9      	ldr	r1, [r3, #28]
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	691b      	ldr	r3, [r3, #16]
 8005810:	021a      	lsls	r2, r3, #8
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	430a      	orrs	r2, r1
 8005818:	61da      	str	r2, [r3, #28]
      break;
 800581a:	e043      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	68b9      	ldr	r1, [r7, #8]
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fc30 	bl	8006088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0208 	orr.w	r2, r2, #8
 8005836:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0204 	bic.w	r2, r2, #4
 8005846:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	691a      	ldr	r2, [r3, #16]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	430a      	orrs	r2, r1
 8005858:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800585a:	e023      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68b9      	ldr	r1, [r7, #8]
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fc7a 	bl	800615c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005876:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005886:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	691b      	ldr	r3, [r3, #16]
 8005892:	021a      	lsls	r2, r3, #8
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	430a      	orrs	r2, r1
 800589a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800589c:	e002      	b.n	80058a4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	75fb      	strb	r3, [r7, #23]
      break;
 80058a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80058ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop

080058b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80058c2:	2300      	movs	r3, #0
 80058c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d101      	bne.n	80058d4 <HAL_TIM_ConfigClockSource+0x1c>
 80058d0:	2302      	movs	r3, #2
 80058d2:	e0b6      	b.n	8005a42 <HAL_TIM_ConfigClockSource+0x18a>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058f2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80058f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80058fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005910:	d03e      	beq.n	8005990 <HAL_TIM_ConfigClockSource+0xd8>
 8005912:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005916:	f200 8087 	bhi.w	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 800591a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800591e:	f000 8086 	beq.w	8005a2e <HAL_TIM_ConfigClockSource+0x176>
 8005922:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005926:	d87f      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005928:	2b70      	cmp	r3, #112	@ 0x70
 800592a:	d01a      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0xaa>
 800592c:	2b70      	cmp	r3, #112	@ 0x70
 800592e:	d87b      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005930:	2b60      	cmp	r3, #96	@ 0x60
 8005932:	d050      	beq.n	80059d6 <HAL_TIM_ConfigClockSource+0x11e>
 8005934:	2b60      	cmp	r3, #96	@ 0x60
 8005936:	d877      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005938:	2b50      	cmp	r3, #80	@ 0x50
 800593a:	d03c      	beq.n	80059b6 <HAL_TIM_ConfigClockSource+0xfe>
 800593c:	2b50      	cmp	r3, #80	@ 0x50
 800593e:	d873      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005940:	2b40      	cmp	r3, #64	@ 0x40
 8005942:	d058      	beq.n	80059f6 <HAL_TIM_ConfigClockSource+0x13e>
 8005944:	2b40      	cmp	r3, #64	@ 0x40
 8005946:	d86f      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005948:	2b30      	cmp	r3, #48	@ 0x30
 800594a:	d064      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 800594c:	2b30      	cmp	r3, #48	@ 0x30
 800594e:	d86b      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005950:	2b20      	cmp	r3, #32
 8005952:	d060      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 8005954:	2b20      	cmp	r3, #32
 8005956:	d867      	bhi.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
 8005958:	2b00      	cmp	r3, #0
 800595a:	d05c      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 800595c:	2b10      	cmp	r3, #16
 800595e:	d05a      	beq.n	8005a16 <HAL_TIM_ConfigClockSource+0x15e>
 8005960:	e062      	b.n	8005a28 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005972:	f000 fdfd 	bl	8006570 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005984:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	609a      	str	r2, [r3, #8]
      break;
 800598e:	e04f      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059a0:	f000 fde6 	bl	8006570 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	689a      	ldr	r2, [r3, #8]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059b2:	609a      	str	r2, [r3, #8]
      break;
 80059b4:	e03c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80059c2:	461a      	mov	r2, r3
 80059c4:	f000 fca4 	bl	8006310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2150      	movs	r1, #80	@ 0x50
 80059ce:	4618      	mov	r0, r3
 80059d0:	f000 fdb3 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 80059d4:	e02c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80059e2:	461a      	mov	r2, r3
 80059e4:	f000 fd00 	bl	80063e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2160      	movs	r1, #96	@ 0x60
 80059ee:	4618      	mov	r0, r3
 80059f0:	f000 fda3 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 80059f4:	e01c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a02:	461a      	mov	r2, r3
 8005a04:	f000 fc84 	bl	8006310 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2140      	movs	r1, #64	@ 0x40
 8005a0e:	4618      	mov	r0, r3
 8005a10:	f000 fd93 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 8005a14:	e00c      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4619      	mov	r1, r3
 8005a20:	4610      	mov	r0, r2
 8005a22:	f000 fd8a 	bl	800653a <TIM_ITRx_SetConfig>
      break;
 8005a26:	e003      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8005a2c:	e000      	b.n	8005a30 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3710      	adds	r7, #16
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b085      	sub	sp, #20
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	2b0c      	cmp	r3, #12
 8005a5e:	d831      	bhi.n	8005ac4 <HAL_TIM_ReadCapturedValue+0x78>
 8005a60:	a201      	add	r2, pc, #4	@ (adr r2, 8005a68 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005a62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a66:	bf00      	nop
 8005a68:	08005a9d 	.word	0x08005a9d
 8005a6c:	08005ac5 	.word	0x08005ac5
 8005a70:	08005ac5 	.word	0x08005ac5
 8005a74:	08005ac5 	.word	0x08005ac5
 8005a78:	08005aa7 	.word	0x08005aa7
 8005a7c:	08005ac5 	.word	0x08005ac5
 8005a80:	08005ac5 	.word	0x08005ac5
 8005a84:	08005ac5 	.word	0x08005ac5
 8005a88:	08005ab1 	.word	0x08005ab1
 8005a8c:	08005ac5 	.word	0x08005ac5
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005ac5 	.word	0x08005ac5
 8005a98:	08005abb 	.word	0x08005abb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa2:	60fb      	str	r3, [r7, #12]

      break;
 8005aa4:	e00f      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005aac:	60fb      	str	r3, [r7, #12]

      break;
 8005aae:	e00a      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab6:	60fb      	str	r3, [r7, #12]

      break;
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac0:	60fb      	str	r3, [r7, #12]

      break;
 8005ac2:	e000      	b.n	8005ac6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8005ac4:	bf00      	nop
  }

  return tmpreg;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3714      	adds	r7, #20
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	4a48      	ldr	r2, [pc, #288]	@ (8005c08 <TIM_Base_SetConfig+0x134>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d013      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005af2:	d00f      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a45      	ldr	r2, [pc, #276]	@ (8005c0c <TIM_Base_SetConfig+0x138>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d00b      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4a44      	ldr	r2, [pc, #272]	@ (8005c10 <TIM_Base_SetConfig+0x13c>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d007      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	4a43      	ldr	r2, [pc, #268]	@ (8005c14 <TIM_Base_SetConfig+0x140>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d003      	beq.n	8005b14 <TIM_Base_SetConfig+0x40>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a42      	ldr	r2, [pc, #264]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d108      	bne.n	8005b26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a37      	ldr	r2, [pc, #220]	@ (8005c08 <TIM_Base_SetConfig+0x134>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d01f      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b34:	d01b      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a34      	ldr	r2, [pc, #208]	@ (8005c0c <TIM_Base_SetConfig+0x138>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d017      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a33      	ldr	r2, [pc, #204]	@ (8005c10 <TIM_Base_SetConfig+0x13c>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d013      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a32      	ldr	r2, [pc, #200]	@ (8005c14 <TIM_Base_SetConfig+0x140>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d00f      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a32      	ldr	r2, [pc, #200]	@ (8005c1c <TIM_Base_SetConfig+0x148>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00b      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a31      	ldr	r2, [pc, #196]	@ (8005c20 <TIM_Base_SetConfig+0x14c>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d007      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a30      	ldr	r2, [pc, #192]	@ (8005c24 <TIM_Base_SetConfig+0x150>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d003      	beq.n	8005b6e <TIM_Base_SetConfig+0x9a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2b      	ldr	r2, [pc, #172]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d108      	bne.n	8005b80 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	68fa      	ldr	r2, [r7, #12]
 8005b92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a18      	ldr	r2, [pc, #96]	@ (8005c08 <TIM_Base_SetConfig+0x134>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d013      	beq.n	8005bd4 <TIM_Base_SetConfig+0x100>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a19      	ldr	r2, [pc, #100]	@ (8005c14 <TIM_Base_SetConfig+0x140>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d00f      	beq.n	8005bd4 <TIM_Base_SetConfig+0x100>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	4a19      	ldr	r2, [pc, #100]	@ (8005c1c <TIM_Base_SetConfig+0x148>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d00b      	beq.n	8005bd4 <TIM_Base_SetConfig+0x100>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	4a18      	ldr	r2, [pc, #96]	@ (8005c20 <TIM_Base_SetConfig+0x14c>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d007      	beq.n	8005bd4 <TIM_Base_SetConfig+0x100>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a17      	ldr	r2, [pc, #92]	@ (8005c24 <TIM_Base_SetConfig+0x150>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_Base_SetConfig+0x100>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a12      	ldr	r2, [pc, #72]	@ (8005c18 <TIM_Base_SetConfig+0x144>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d103      	bne.n	8005bdc <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	d105      	bne.n	8005bfa <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	611a      	str	r2, [r3, #16]
  }
}
 8005bfa:	bf00      	nop
 8005bfc:	3714      	adds	r7, #20
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr
 8005c06:	bf00      	nop
 8005c08:	40012c00 	.word	0x40012c00
 8005c0c:	40000400 	.word	0x40000400
 8005c10:	40000800 	.word	0x40000800
 8005c14:	40013400 	.word	0x40013400
 8005c18:	40015000 	.word	0x40015000
 8005c1c:	40014000 	.word	0x40014000
 8005c20:	40014400 	.word	0x40014400
 8005c24:	40014800 	.word	0x40014800

08005c28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b087      	sub	sp, #28
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a1b      	ldr	r3, [r3, #32]
 8005c36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6a1b      	ldr	r3, [r3, #32]
 8005c3c:	f023 0201 	bic.w	r2, r3, #1
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c56:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 0303 	bic.w	r3, r3, #3
 8005c62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f023 0302 	bic.w	r3, r3, #2
 8005c74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a30      	ldr	r2, [pc, #192]	@ (8005d44 <TIM_OC1_SetConfig+0x11c>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d013      	beq.n	8005cb0 <TIM_OC1_SetConfig+0x88>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a2f      	ldr	r2, [pc, #188]	@ (8005d48 <TIM_OC1_SetConfig+0x120>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d00f      	beq.n	8005cb0 <TIM_OC1_SetConfig+0x88>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a2e      	ldr	r2, [pc, #184]	@ (8005d4c <TIM_OC1_SetConfig+0x124>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d00b      	beq.n	8005cb0 <TIM_OC1_SetConfig+0x88>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005d50 <TIM_OC1_SetConfig+0x128>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d007      	beq.n	8005cb0 <TIM_OC1_SetConfig+0x88>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8005d54 <TIM_OC1_SetConfig+0x12c>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d003      	beq.n	8005cb0 <TIM_OC1_SetConfig+0x88>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a2b      	ldr	r2, [pc, #172]	@ (8005d58 <TIM_OC1_SetConfig+0x130>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d10c      	bne.n	8005cca <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	f023 0308 	bic.w	r3, r3, #8
 8005cb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cc2:	697b      	ldr	r3, [r7, #20]
 8005cc4:	f023 0304 	bic.w	r3, r3, #4
 8005cc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	4a1d      	ldr	r2, [pc, #116]	@ (8005d44 <TIM_OC1_SetConfig+0x11c>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <TIM_OC1_SetConfig+0xd2>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a1c      	ldr	r2, [pc, #112]	@ (8005d48 <TIM_OC1_SetConfig+0x120>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d00f      	beq.n	8005cfa <TIM_OC1_SetConfig+0xd2>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d4c <TIM_OC1_SetConfig+0x124>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_OC1_SetConfig+0xd2>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a1a      	ldr	r2, [pc, #104]	@ (8005d50 <TIM_OC1_SetConfig+0x128>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_OC1_SetConfig+0xd2>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	4a19      	ldr	r2, [pc, #100]	@ (8005d54 <TIM_OC1_SetConfig+0x12c>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_OC1_SetConfig+0xd2>
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	4a18      	ldr	r2, [pc, #96]	@ (8005d58 <TIM_OC1_SetConfig+0x130>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d111      	bne.n	8005d1e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005d00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005d08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	695b      	ldr	r3, [r3, #20]
 8005d0e:	693a      	ldr	r2, [r7, #16]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	693a      	ldr	r2, [r7, #16]
 8005d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68fa      	ldr	r2, [r7, #12]
 8005d28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	685a      	ldr	r2, [r3, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	621a      	str	r2, [r3, #32]
}
 8005d38:	bf00      	nop
 8005d3a:	371c      	adds	r7, #28
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr
 8005d44:	40012c00 	.word	0x40012c00
 8005d48:	40013400 	.word	0x40013400
 8005d4c:	40014000 	.word	0x40014000
 8005d50:	40014400 	.word	0x40014400
 8005d54:	40014800 	.word	0x40014800
 8005d58:	40015000 	.word	0x40015000

08005d5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b087      	sub	sp, #28
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a1b      	ldr	r3, [r3, #32]
 8005d70:	f023 0210 	bic.w	r2, r3, #16
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005d8a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	68fa      	ldr	r2, [r7, #12]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f023 0320 	bic.w	r3, r3, #32
 8005daa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
 8005db6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a2c      	ldr	r2, [pc, #176]	@ (8005e6c <TIM_OC2_SetConfig+0x110>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d007      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x74>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a2b      	ldr	r2, [pc, #172]	@ (8005e70 <TIM_OC2_SetConfig+0x114>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_OC2_SetConfig+0x74>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	4a2a      	ldr	r2, [pc, #168]	@ (8005e74 <TIM_OC2_SetConfig+0x118>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d10d      	bne.n	8005dec <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	011b      	lsls	r3, r3, #4
 8005dde:	697a      	ldr	r2, [r7, #20]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	4a1f      	ldr	r2, [pc, #124]	@ (8005e6c <TIM_OC2_SetConfig+0x110>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d013      	beq.n	8005e1c <TIM_OC2_SetConfig+0xc0>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	4a1e      	ldr	r2, [pc, #120]	@ (8005e70 <TIM_OC2_SetConfig+0x114>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d00f      	beq.n	8005e1c <TIM_OC2_SetConfig+0xc0>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005e78 <TIM_OC2_SetConfig+0x11c>)
 8005e00:	4293      	cmp	r3, r2
 8005e02:	d00b      	beq.n	8005e1c <TIM_OC2_SetConfig+0xc0>
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	4a1d      	ldr	r2, [pc, #116]	@ (8005e7c <TIM_OC2_SetConfig+0x120>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d007      	beq.n	8005e1c <TIM_OC2_SetConfig+0xc0>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8005e80 <TIM_OC2_SetConfig+0x124>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d003      	beq.n	8005e1c <TIM_OC2_SetConfig+0xc0>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	4a17      	ldr	r2, [pc, #92]	@ (8005e74 <TIM_OC2_SetConfig+0x118>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d113      	bne.n	8005e44 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005e22:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005e2a:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	695b      	ldr	r3, [r3, #20]
 8005e30:	009b      	lsls	r3, r3, #2
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	699b      	ldr	r3, [r3, #24]
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	693a      	ldr	r2, [r7, #16]
 8005e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	68fa      	ldr	r2, [r7, #12]
 8005e4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685a      	ldr	r2, [r3, #4]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	621a      	str	r2, [r3, #32]
}
 8005e5e:	bf00      	nop
 8005e60:	371c      	adds	r7, #28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40013400 	.word	0x40013400
 8005e74:	40015000 	.word	0x40015000
 8005e78:	40014000 	.word	0x40014000
 8005e7c:	40014400 	.word	0x40014400
 8005e80:	40014800 	.word	0x40014800

08005e84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b087      	sub	sp, #28
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
 8005e8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a1b      	ldr	r3, [r3, #32]
 8005e92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	6a1b      	ldr	r3, [r3, #32]
 8005e98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005eb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005eb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 0303 	bic.w	r3, r3, #3
 8005ebe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005ed0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	021b      	lsls	r3, r3, #8
 8005ed8:	697a      	ldr	r2, [r7, #20]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8005f90 <TIM_OC3_SetConfig+0x10c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d007      	beq.n	8005ef6 <TIM_OC3_SetConfig+0x72>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a2a      	ldr	r2, [pc, #168]	@ (8005f94 <TIM_OC3_SetConfig+0x110>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d003      	beq.n	8005ef6 <TIM_OC3_SetConfig+0x72>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a29      	ldr	r2, [pc, #164]	@ (8005f98 <TIM_OC3_SetConfig+0x114>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10d      	bne.n	8005f12 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	021b      	lsls	r3, r3, #8
 8005f04:	697a      	ldr	r2, [r7, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005f10:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a1e      	ldr	r2, [pc, #120]	@ (8005f90 <TIM_OC3_SetConfig+0x10c>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d013      	beq.n	8005f42 <TIM_OC3_SetConfig+0xbe>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005f94 <TIM_OC3_SetConfig+0x110>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d00f      	beq.n	8005f42 <TIM_OC3_SetConfig+0xbe>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	4a1d      	ldr	r2, [pc, #116]	@ (8005f9c <TIM_OC3_SetConfig+0x118>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d00b      	beq.n	8005f42 <TIM_OC3_SetConfig+0xbe>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	@ (8005fa0 <TIM_OC3_SetConfig+0x11c>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d007      	beq.n	8005f42 <TIM_OC3_SetConfig+0xbe>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a1b      	ldr	r2, [pc, #108]	@ (8005fa4 <TIM_OC3_SetConfig+0x120>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d003      	beq.n	8005f42 <TIM_OC3_SetConfig+0xbe>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	4a16      	ldr	r2, [pc, #88]	@ (8005f98 <TIM_OC3_SetConfig+0x114>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d113      	bne.n	8005f6a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	011b      	lsls	r3, r3, #4
 8005f58:	693a      	ldr	r2, [r7, #16]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	011b      	lsls	r3, r3, #4
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	693a      	ldr	r2, [r7, #16]
 8005f6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	68fa      	ldr	r2, [r7, #12]
 8005f74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685a      	ldr	r2, [r3, #4]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	621a      	str	r2, [r3, #32]
}
 8005f84:	bf00      	nop
 8005f86:	371c      	adds	r7, #28
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr
 8005f90:	40012c00 	.word	0x40012c00
 8005f94:	40013400 	.word	0x40013400
 8005f98:	40015000 	.word	0x40015000
 8005f9c:	40014000 	.word	0x40014000
 8005fa0:	40014400 	.word	0x40014400
 8005fa4:	40014800 	.word	0x40014800

08005fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6a1b      	ldr	r3, [r3, #32]
 8005fb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	69db      	ldr	r3, [r3, #28]
 8005fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	031b      	lsls	r3, r3, #12
 8005ffe:	693a      	ldr	r2, [r7, #16]
 8006000:	4313      	orrs	r3, r2
 8006002:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	4a1a      	ldr	r2, [pc, #104]	@ (8006070 <TIM_OC4_SetConfig+0xc8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d013      	beq.n	8006034 <TIM_OC4_SetConfig+0x8c>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	4a19      	ldr	r2, [pc, #100]	@ (8006074 <TIM_OC4_SetConfig+0xcc>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d00f      	beq.n	8006034 <TIM_OC4_SetConfig+0x8c>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	4a18      	ldr	r2, [pc, #96]	@ (8006078 <TIM_OC4_SetConfig+0xd0>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d00b      	beq.n	8006034 <TIM_OC4_SetConfig+0x8c>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a17      	ldr	r2, [pc, #92]	@ (800607c <TIM_OC4_SetConfig+0xd4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d007      	beq.n	8006034 <TIM_OC4_SetConfig+0x8c>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	4a16      	ldr	r2, [pc, #88]	@ (8006080 <TIM_OC4_SetConfig+0xd8>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d003      	beq.n	8006034 <TIM_OC4_SetConfig+0x8c>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	4a15      	ldr	r2, [pc, #84]	@ (8006084 <TIM_OC4_SetConfig+0xdc>)
 8006030:	4293      	cmp	r3, r2
 8006032:	d109      	bne.n	8006048 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800603a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	019b      	lsls	r3, r3, #6
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	697a      	ldr	r2, [r7, #20]
 800604c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	68fa      	ldr	r2, [r7, #12]
 8006052:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	621a      	str	r2, [r3, #32]
}
 8006062:	bf00      	nop
 8006064:	371c      	adds	r7, #28
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40014000 	.word	0x40014000
 800607c:	40014400 	.word	0x40014400
 8006080:	40014800 	.word	0x40014800
 8006084:	40015000 	.word	0x40015000

08006088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006088:	b480      	push	{r7}
 800608a:	b087      	sub	sp, #28
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a1b      	ldr	r3, [r3, #32]
 8006096:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68fa      	ldr	r2, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80060cc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	041b      	lsls	r3, r3, #16
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	4a19      	ldr	r2, [pc, #100]	@ (8006144 <TIM_OC5_SetConfig+0xbc>)
 80060de:	4293      	cmp	r3, r2
 80060e0:	d013      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a18      	ldr	r2, [pc, #96]	@ (8006148 <TIM_OC5_SetConfig+0xc0>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d00f      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a17      	ldr	r2, [pc, #92]	@ (800614c <TIM_OC5_SetConfig+0xc4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00b      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a16      	ldr	r2, [pc, #88]	@ (8006150 <TIM_OC5_SetConfig+0xc8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d007      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a15      	ldr	r2, [pc, #84]	@ (8006154 <TIM_OC5_SetConfig+0xcc>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <TIM_OC5_SetConfig+0x82>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a14      	ldr	r2, [pc, #80]	@ (8006158 <TIM_OC5_SetConfig+0xd0>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d109      	bne.n	800611e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006110:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	021b      	lsls	r3, r3, #8
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	4313      	orrs	r3, r2
 800611c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	697a      	ldr	r2, [r7, #20]
 8006122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	693a      	ldr	r2, [r7, #16]
 8006136:	621a      	str	r2, [r3, #32]
}
 8006138:	bf00      	nop
 800613a:	371c      	adds	r7, #28
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	40012c00 	.word	0x40012c00
 8006148:	40013400 	.word	0x40013400
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400
 8006154:	40014800 	.word	0x40014800
 8006158:	40015000 	.word	0x40015000

0800615c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800615c:	b480      	push	{r7}
 800615e:	b087      	sub	sp, #28
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800618a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800618e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80061a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	051b      	lsls	r3, r3, #20
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a1a      	ldr	r2, [pc, #104]	@ (800621c <TIM_OC6_SetConfig+0xc0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d013      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a19      	ldr	r2, [pc, #100]	@ (8006220 <TIM_OC6_SetConfig+0xc4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d00f      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a18      	ldr	r2, [pc, #96]	@ (8006224 <TIM_OC6_SetConfig+0xc8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d00b      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	4a17      	ldr	r2, [pc, #92]	@ (8006228 <TIM_OC6_SetConfig+0xcc>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d007      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	4a16      	ldr	r2, [pc, #88]	@ (800622c <TIM_OC6_SetConfig+0xd0>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d003      	beq.n	80061e0 <TIM_OC6_SetConfig+0x84>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	4a15      	ldr	r2, [pc, #84]	@ (8006230 <TIM_OC6_SetConfig+0xd4>)
 80061dc:	4293      	cmp	r3, r2
 80061de:	d109      	bne.n	80061f4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80061e0:	697b      	ldr	r3, [r7, #20]
 80061e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80061e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	695b      	ldr	r3, [r3, #20]
 80061ec:	029b      	lsls	r3, r3, #10
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	697a      	ldr	r2, [r7, #20]
 80061f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685a      	ldr	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	621a      	str	r2, [r3, #32]
}
 800620e:	bf00      	nop
 8006210:	371c      	adds	r7, #28
 8006212:	46bd      	mov	sp, r7
 8006214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006218:	4770      	bx	lr
 800621a:	bf00      	nop
 800621c:	40012c00 	.word	0x40012c00
 8006220:	40013400 	.word	0x40013400
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800
 8006230:	40015000 	.word	0x40015000

08006234 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006234:	b480      	push	{r7}
 8006236:	b087      	sub	sp, #28
 8006238:	af00      	add	r7, sp, #0
 800623a:	60f8      	str	r0, [r7, #12]
 800623c:	60b9      	str	r1, [r7, #8]
 800623e:	607a      	str	r2, [r7, #4]
 8006240:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	6a1b      	ldr	r3, [r3, #32]
 8006246:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	6a1b      	ldr	r3, [r3, #32]
 800624c:	f023 0201 	bic.w	r2, r3, #1
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	4a26      	ldr	r2, [pc, #152]	@ (80062f8 <TIM_TI1_SetConfig+0xc4>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d017      	beq.n	8006292 <TIM_TI1_SetConfig+0x5e>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006268:	d013      	beq.n	8006292 <TIM_TI1_SetConfig+0x5e>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	4a23      	ldr	r2, [pc, #140]	@ (80062fc <TIM_TI1_SetConfig+0xc8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00f      	beq.n	8006292 <TIM_TI1_SetConfig+0x5e>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	4a22      	ldr	r2, [pc, #136]	@ (8006300 <TIM_TI1_SetConfig+0xcc>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00b      	beq.n	8006292 <TIM_TI1_SetConfig+0x5e>
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	4a21      	ldr	r2, [pc, #132]	@ (8006304 <TIM_TI1_SetConfig+0xd0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d007      	beq.n	8006292 <TIM_TI1_SetConfig+0x5e>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4a20      	ldr	r2, [pc, #128]	@ (8006308 <TIM_TI1_SetConfig+0xd4>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d003      	beq.n	8006292 <TIM_TI1_SetConfig+0x5e>
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	4a1f      	ldr	r2, [pc, #124]	@ (800630c <TIM_TI1_SetConfig+0xd8>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d101      	bne.n	8006296 <TIM_TI1_SetConfig+0x62>
 8006292:	2301      	movs	r3, #1
 8006294:	e000      	b.n	8006298 <TIM_TI1_SetConfig+0x64>
 8006296:	2300      	movs	r3, #0
 8006298:	2b00      	cmp	r3, #0
 800629a:	d008      	beq.n	80062ae <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	f023 0303 	bic.w	r3, r3, #3
 80062a2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80062a4:	697a      	ldr	r2, [r7, #20]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	e003      	b.n	80062b6 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	f043 0301 	orr.w	r3, r3, #1
 80062b4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062b6:	697b      	ldr	r3, [r7, #20]
 80062b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80062bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	011b      	lsls	r3, r3, #4
 80062c2:	b2db      	uxtb	r3, r3
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f023 030a 	bic.w	r3, r3, #10
 80062d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f003 030a 	and.w	r3, r3, #10
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4313      	orrs	r3, r2
 80062dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	621a      	str	r2, [r3, #32]
}
 80062ea:	bf00      	nop
 80062ec:	371c      	adds	r7, #28
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	40012c00 	.word	0x40012c00
 80062fc:	40000400 	.word	0x40000400
 8006300:	40000800 	.word	0x40000800
 8006304:	40013400 	.word	0x40013400
 8006308:	40014000 	.word	0x40014000
 800630c:	40015000 	.word	0x40015000

08006310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006310:	b480      	push	{r7}
 8006312:	b087      	sub	sp, #28
 8006314:	af00      	add	r7, sp, #0
 8006316:	60f8      	str	r0, [r7, #12]
 8006318:	60b9      	str	r1, [r7, #8]
 800631a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	6a1b      	ldr	r3, [r3, #32]
 8006326:	f023 0201 	bic.w	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800633a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f023 030a 	bic.w	r3, r3, #10
 800634c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800634e:	697a      	ldr	r2, [r7, #20]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	693a      	ldr	r2, [r7, #16]
 800635a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800636e:	b480      	push	{r7}
 8006370:	b087      	sub	sp, #28
 8006372:	af00      	add	r7, sp, #0
 8006374:	60f8      	str	r0, [r7, #12]
 8006376:	60b9      	str	r1, [r7, #8]
 8006378:	607a      	str	r2, [r7, #4]
 800637a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	f023 0210 	bic.w	r2, r3, #16
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800639a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	693a      	ldr	r2, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80063ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	031b      	lsls	r3, r3, #12
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	693a      	ldr	r2, [r7, #16]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80063c0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	011b      	lsls	r3, r3, #4
 80063c6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	693a      	ldr	r2, [r7, #16]
 80063d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	697a      	ldr	r2, [r7, #20]
 80063da:	621a      	str	r2, [r3, #32]
}
 80063dc:	bf00      	nop
 80063de:	371c      	adds	r7, #28
 80063e0:	46bd      	mov	sp, r7
 80063e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e6:	4770      	bx	lr

080063e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	60f8      	str	r0, [r7, #12]
 80063f0:	60b9      	str	r1, [r7, #8]
 80063f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	f023 0210 	bic.w	r2, r3, #16
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	699b      	ldr	r3, [r3, #24]
 800640a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	031b      	lsls	r3, r3, #12
 8006418:	693a      	ldr	r2, [r7, #16]
 800641a:	4313      	orrs	r3, r2
 800641c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006424:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	697a      	ldr	r2, [r7, #20]
 800642c:	4313      	orrs	r3, r2
 800642e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	697a      	ldr	r2, [r7, #20]
 800643a:	621a      	str	r2, [r3, #32]
}
 800643c:	bf00      	nop
 800643e:	371c      	adds	r7, #28
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6a1b      	ldr	r3, [r3, #32]
 800645a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	6a1b      	ldr	r3, [r3, #32]
 8006460:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	69db      	ldr	r3, [r3, #28]
 800646c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f023 0303 	bic.w	r3, r3, #3
 8006474:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006484:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	b2db      	uxtb	r3, r3
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	4313      	orrs	r3, r2
 8006490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006498:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	021b      	lsls	r3, r3, #8
 800649e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	4313      	orrs	r3, r2
 80064a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	693a      	ldr	r2, [r7, #16]
 80064ac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	621a      	str	r2, [r3, #32]
}
 80064b4:	bf00      	nop
 80064b6:	371c      	adds	r7, #28
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
 80064cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6a1b      	ldr	r3, [r3, #32]
 80064d8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	69db      	ldr	r3, [r3, #28]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	021b      	lsls	r3, r3, #8
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	031b      	lsls	r3, r3, #12
 8006504:	b29b      	uxth	r3, r3
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006512:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	031b      	lsls	r3, r3, #12
 8006518:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800651c:	697a      	ldr	r2, [r7, #20]
 800651e:	4313      	orrs	r3, r2
 8006520:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	697a      	ldr	r2, [r7, #20]
 800652c:	621a      	str	r2, [r3, #32]
}
 800652e:	bf00      	nop
 8006530:	371c      	adds	r7, #28
 8006532:	46bd      	mov	sp, r7
 8006534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006538:	4770      	bx	lr

0800653a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800653a:	b480      	push	{r7}
 800653c:	b085      	sub	sp, #20
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
 8006542:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	689b      	ldr	r3, [r3, #8]
 8006548:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006550:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006552:	683a      	ldr	r2, [r7, #0]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	4313      	orrs	r3, r2
 8006558:	f043 0307 	orr.w	r3, r3, #7
 800655c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	609a      	str	r2, [r3, #8]
}
 8006564:	bf00      	nop
 8006566:	3714      	adds	r7, #20
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	607a      	str	r2, [r7, #4]
 800657c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800658a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	021a      	lsls	r2, r3, #8
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	431a      	orrs	r2, r3
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	4313      	orrs	r3, r2
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	609a      	str	r2, [r3, #8]
}
 80065a4:	bf00      	nop
 80065a6:	371c      	adds	r7, #28
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b087      	sub	sp, #28
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	f003 031f 	and.w	r3, r3, #31
 80065c2:	2201      	movs	r2, #1
 80065c4:	fa02 f303 	lsl.w	r3, r2, r3
 80065c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	6a1a      	ldr	r2, [r3, #32]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	43db      	mvns	r3, r3
 80065d2:	401a      	ands	r2, r3
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a1a      	ldr	r2, [r3, #32]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	f003 031f 	and.w	r3, r3, #31
 80065e2:	6879      	ldr	r1, [r7, #4]
 80065e4:	fa01 f303 	lsl.w	r3, r1, r3
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
	...

080065fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006610:	2302      	movs	r3, #2
 8006612:	e06d      	b.n	80066f0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2202      	movs	r2, #2
 8006620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a30      	ldr	r2, [pc, #192]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a2f      	ldr	r2, [pc, #188]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a2d      	ldr	r2, [pc, #180]	@ (8006704 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d108      	bne.n	8006664 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006658:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	68fa      	ldr	r2, [r7, #12]
 8006660:	4313      	orrs	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800666a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	68fa      	ldr	r2, [r7, #12]
 8006672:	4313      	orrs	r3, r2
 8006674:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	68fa      	ldr	r2, [r7, #12]
 800667c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a1e      	ldr	r2, [pc, #120]	@ (80066fc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d01d      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006690:	d018      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	4a1c      	ldr	r2, [pc, #112]	@ (8006708 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d013      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	4a1a      	ldr	r2, [pc, #104]	@ (800670c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00e      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a15      	ldr	r2, [pc, #84]	@ (8006700 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d009      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a16      	ldr	r2, [pc, #88]	@ (8006710 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d004      	beq.n	80066c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a11      	ldr	r2, [pc, #68]	@ (8006704 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d10c      	bne.n	80066de <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80066ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2200      	movs	r2, #0
 80066ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3714      	adds	r7, #20
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40015000 	.word	0x40015000
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40014000 	.word	0x40014000

08006714 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006714:	b480      	push	{r7}
 8006716:	b085      	sub	sp, #20
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800671e:	2300      	movs	r3, #0
 8006720:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006728:	2b01      	cmp	r3, #1
 800672a:	d101      	bne.n	8006730 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800672c:	2302      	movs	r3, #2
 800672e:	e06a      	b.n	8006806 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	4313      	orrs	r3, r2
 800677c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	4313      	orrs	r3, r2
 8006798:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	041b      	lsls	r3, r3, #16
 80067a6:	4313      	orrs	r3, r2
 80067a8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a19      	ldr	r2, [pc, #100]	@ (8006814 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d009      	beq.n	80067c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a17      	ldr	r2, [pc, #92]	@ (8006818 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d004      	beq.n	80067c8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a16      	ldr	r2, [pc, #88]	@ (800681c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d115      	bne.n	80067f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067d2:	051b      	lsls	r3, r3, #20
 80067d4:	4313      	orrs	r3, r2
 80067d6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	69db      	ldr	r3, [r3, #28]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	4313      	orrs	r3, r2
 80067f2:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	40012c00 	.word	0x40012c00
 8006818:	40013400 	.word	0x40013400
 800681c:	40015000 	.word	0x40015000

08006820 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b082      	sub	sp, #8
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e040      	b.n	80068b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006836:	2b00      	cmp	r3, #0
 8006838:	d106      	bne.n	8006848 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7fb f824 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2224      	movs	r2, #36	@ 0x24
 800684c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0201 	bic.w	r2, r2, #1
 800685c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fa86 	bl	8006d78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f8af 	bl	80069d0 <UART_SetConfig>
 8006872:	4603      	mov	r3, r0
 8006874:	2b01      	cmp	r3, #1
 8006876:	d101      	bne.n	800687c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006878:	2301      	movs	r3, #1
 800687a:	e01b      	b.n	80068b4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	685a      	ldr	r2, [r3, #4]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800688a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689a      	ldr	r2, [r3, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800689a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f042 0201 	orr.w	r2, r2, #1
 80068aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fb05 	bl	8006ebc <UART_CheckIdleState>
 80068b2:	4603      	mov	r3, r0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3708      	adds	r7, #8
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	@ 0x28
 80068c0:	af02      	add	r7, sp, #8
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80068d0:	2b20      	cmp	r3, #32
 80068d2:	d177      	bne.n	80069c4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d002      	beq.n	80068e0 <HAL_UART_Transmit+0x24>
 80068da:	88fb      	ldrh	r3, [r7, #6]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d101      	bne.n	80068e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e070      	b.n	80069c6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2200      	movs	r2, #0
 80068e8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2221      	movs	r2, #33	@ 0x21
 80068f0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068f2:	f7fb f9b3 	bl	8001c5c <HAL_GetTick>
 80068f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	88fa      	ldrh	r2, [r7, #6]
 80068fc:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	88fa      	ldrh	r2, [r7, #6]
 8006904:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006910:	d108      	bne.n	8006924 <HAL_UART_Transmit+0x68>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	691b      	ldr	r3, [r3, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d104      	bne.n	8006924 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	61bb      	str	r3, [r7, #24]
 8006922:	e003      	b.n	800692c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006928:	2300      	movs	r3, #0
 800692a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800692c:	e02f      	b.n	800698e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	9300      	str	r3, [sp, #0]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	2200      	movs	r2, #0
 8006936:	2180      	movs	r1, #128	@ 0x80
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 fb67 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d004      	beq.n	800694e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2220      	movs	r2, #32
 8006948:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800694a:	2303      	movs	r3, #3
 800694c:	e03b      	b.n	80069c6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10b      	bne.n	800696c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	881a      	ldrh	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006960:	b292      	uxth	r2, r2
 8006962:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	3302      	adds	r3, #2
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e007      	b.n	800697c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	781a      	ldrb	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	3301      	adds	r3, #1
 800697a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006982:	b29b      	uxth	r3, r3
 8006984:	3b01      	subs	r3, #1
 8006986:	b29a      	uxth	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006994:	b29b      	uxth	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1c9      	bne.n	800692e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	2200      	movs	r2, #0
 80069a2:	2140      	movs	r1, #64	@ 0x40
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	f000 fb31 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2220      	movs	r2, #32
 80069b4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e005      	b.n	80069c6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2220      	movs	r2, #32
 80069be:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80069c0:	2300      	movs	r3, #0
 80069c2:	e000      	b.n	80069c6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80069c4:	2302      	movs	r3, #2
  }
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3720      	adds	r7, #32
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
	...

080069d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b088      	sub	sp, #32
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d8:	2300      	movs	r3, #0
 80069da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	691b      	ldr	r3, [r3, #16]
 80069e4:	431a      	orrs	r2, r3
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	431a      	orrs	r2, r3
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	69db      	ldr	r3, [r3, #28]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	681a      	ldr	r2, [r3, #0]
 80069fa:	4b92      	ldr	r3, [pc, #584]	@ (8006c44 <UART_SetConfig+0x274>)
 80069fc:	4013      	ands	r3, r2
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	6979      	ldr	r1, [r7, #20]
 8006a04:	430b      	orrs	r3, r1
 8006a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	430a      	orrs	r2, r1
 8006a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6a1b      	ldr	r3, [r3, #32]
 8006a28:	697a      	ldr	r2, [r7, #20]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	4a80      	ldr	r2, [pc, #512]	@ (8006c48 <UART_SetConfig+0x278>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d120      	bne.n	8006a8e <UART_SetConfig+0xbe>
 8006a4c:	4b7f      	ldr	r3, [pc, #508]	@ (8006c4c <UART_SetConfig+0x27c>)
 8006a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a50:	f003 0303 	and.w	r3, r3, #3
 8006a54:	2b03      	cmp	r3, #3
 8006a56:	d817      	bhi.n	8006a88 <UART_SetConfig+0xb8>
 8006a58:	a201      	add	r2, pc, #4	@ (adr r2, 8006a60 <UART_SetConfig+0x90>)
 8006a5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5e:	bf00      	nop
 8006a60:	08006a71 	.word	0x08006a71
 8006a64:	08006a7d 	.word	0x08006a7d
 8006a68:	08006a83 	.word	0x08006a83
 8006a6c:	08006a77 	.word	0x08006a77
 8006a70:	2301      	movs	r3, #1
 8006a72:	77fb      	strb	r3, [r7, #31]
 8006a74:	e0b5      	b.n	8006be2 <UART_SetConfig+0x212>
 8006a76:	2302      	movs	r3, #2
 8006a78:	77fb      	strb	r3, [r7, #31]
 8006a7a:	e0b2      	b.n	8006be2 <UART_SetConfig+0x212>
 8006a7c:	2304      	movs	r3, #4
 8006a7e:	77fb      	strb	r3, [r7, #31]
 8006a80:	e0af      	b.n	8006be2 <UART_SetConfig+0x212>
 8006a82:	2308      	movs	r3, #8
 8006a84:	77fb      	strb	r3, [r7, #31]
 8006a86:	e0ac      	b.n	8006be2 <UART_SetConfig+0x212>
 8006a88:	2310      	movs	r3, #16
 8006a8a:	77fb      	strb	r3, [r7, #31]
 8006a8c:	e0a9      	b.n	8006be2 <UART_SetConfig+0x212>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a6f      	ldr	r2, [pc, #444]	@ (8006c50 <UART_SetConfig+0x280>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d124      	bne.n	8006ae2 <UART_SetConfig+0x112>
 8006a98:	4b6c      	ldr	r3, [pc, #432]	@ (8006c4c <UART_SetConfig+0x27c>)
 8006a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006aa0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aa4:	d011      	beq.n	8006aca <UART_SetConfig+0xfa>
 8006aa6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8006aaa:	d817      	bhi.n	8006adc <UART_SetConfig+0x10c>
 8006aac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ab0:	d011      	beq.n	8006ad6 <UART_SetConfig+0x106>
 8006ab2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006ab6:	d811      	bhi.n	8006adc <UART_SetConfig+0x10c>
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <UART_SetConfig+0xf4>
 8006abc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ac0:	d006      	beq.n	8006ad0 <UART_SetConfig+0x100>
 8006ac2:	e00b      	b.n	8006adc <UART_SetConfig+0x10c>
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	77fb      	strb	r3, [r7, #31]
 8006ac8:	e08b      	b.n	8006be2 <UART_SetConfig+0x212>
 8006aca:	2302      	movs	r3, #2
 8006acc:	77fb      	strb	r3, [r7, #31]
 8006ace:	e088      	b.n	8006be2 <UART_SetConfig+0x212>
 8006ad0:	2304      	movs	r3, #4
 8006ad2:	77fb      	strb	r3, [r7, #31]
 8006ad4:	e085      	b.n	8006be2 <UART_SetConfig+0x212>
 8006ad6:	2308      	movs	r3, #8
 8006ad8:	77fb      	strb	r3, [r7, #31]
 8006ada:	e082      	b.n	8006be2 <UART_SetConfig+0x212>
 8006adc:	2310      	movs	r3, #16
 8006ade:	77fb      	strb	r3, [r7, #31]
 8006ae0:	e07f      	b.n	8006be2 <UART_SetConfig+0x212>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a5b      	ldr	r2, [pc, #364]	@ (8006c54 <UART_SetConfig+0x284>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d124      	bne.n	8006b36 <UART_SetConfig+0x166>
 8006aec:	4b57      	ldr	r3, [pc, #348]	@ (8006c4c <UART_SetConfig+0x27c>)
 8006aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006af0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8006af4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006af8:	d011      	beq.n	8006b1e <UART_SetConfig+0x14e>
 8006afa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006afe:	d817      	bhi.n	8006b30 <UART_SetConfig+0x160>
 8006b00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b04:	d011      	beq.n	8006b2a <UART_SetConfig+0x15a>
 8006b06:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006b0a:	d811      	bhi.n	8006b30 <UART_SetConfig+0x160>
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <UART_SetConfig+0x148>
 8006b10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006b14:	d006      	beq.n	8006b24 <UART_SetConfig+0x154>
 8006b16:	e00b      	b.n	8006b30 <UART_SetConfig+0x160>
 8006b18:	2300      	movs	r3, #0
 8006b1a:	77fb      	strb	r3, [r7, #31]
 8006b1c:	e061      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b1e:	2302      	movs	r3, #2
 8006b20:	77fb      	strb	r3, [r7, #31]
 8006b22:	e05e      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b24:	2304      	movs	r3, #4
 8006b26:	77fb      	strb	r3, [r7, #31]
 8006b28:	e05b      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b2a:	2308      	movs	r3, #8
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	e058      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b30:	2310      	movs	r3, #16
 8006b32:	77fb      	strb	r3, [r7, #31]
 8006b34:	e055      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4a47      	ldr	r2, [pc, #284]	@ (8006c58 <UART_SetConfig+0x288>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d124      	bne.n	8006b8a <UART_SetConfig+0x1ba>
 8006b40:	4b42      	ldr	r3, [pc, #264]	@ (8006c4c <UART_SetConfig+0x27c>)
 8006b42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b44:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8006b48:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b4c:	d011      	beq.n	8006b72 <UART_SetConfig+0x1a2>
 8006b4e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006b52:	d817      	bhi.n	8006b84 <UART_SetConfig+0x1b4>
 8006b54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b58:	d011      	beq.n	8006b7e <UART_SetConfig+0x1ae>
 8006b5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006b5e:	d811      	bhi.n	8006b84 <UART_SetConfig+0x1b4>
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d003      	beq.n	8006b6c <UART_SetConfig+0x19c>
 8006b64:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006b68:	d006      	beq.n	8006b78 <UART_SetConfig+0x1a8>
 8006b6a:	e00b      	b.n	8006b84 <UART_SetConfig+0x1b4>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e037      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b72:	2302      	movs	r3, #2
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e034      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e031      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b7e:	2308      	movs	r3, #8
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e02e      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b84:	2310      	movs	r3, #16
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e02b      	b.n	8006be2 <UART_SetConfig+0x212>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a33      	ldr	r2, [pc, #204]	@ (8006c5c <UART_SetConfig+0x28c>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d124      	bne.n	8006bde <UART_SetConfig+0x20e>
 8006b94:	4b2d      	ldr	r3, [pc, #180]	@ (8006c4c <UART_SetConfig+0x27c>)
 8006b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b98:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8006b9c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ba0:	d011      	beq.n	8006bc6 <UART_SetConfig+0x1f6>
 8006ba2:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8006ba6:	d817      	bhi.n	8006bd8 <UART_SetConfig+0x208>
 8006ba8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bac:	d011      	beq.n	8006bd2 <UART_SetConfig+0x202>
 8006bae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bb2:	d811      	bhi.n	8006bd8 <UART_SetConfig+0x208>
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <UART_SetConfig+0x1f0>
 8006bb8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006bbc:	d006      	beq.n	8006bcc <UART_SetConfig+0x1fc>
 8006bbe:	e00b      	b.n	8006bd8 <UART_SetConfig+0x208>
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	77fb      	strb	r3, [r7, #31]
 8006bc4:	e00d      	b.n	8006be2 <UART_SetConfig+0x212>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	77fb      	strb	r3, [r7, #31]
 8006bca:	e00a      	b.n	8006be2 <UART_SetConfig+0x212>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	77fb      	strb	r3, [r7, #31]
 8006bd0:	e007      	b.n	8006be2 <UART_SetConfig+0x212>
 8006bd2:	2308      	movs	r3, #8
 8006bd4:	77fb      	strb	r3, [r7, #31]
 8006bd6:	e004      	b.n	8006be2 <UART_SetConfig+0x212>
 8006bd8:	2310      	movs	r3, #16
 8006bda:	77fb      	strb	r3, [r7, #31]
 8006bdc:	e001      	b.n	8006be2 <UART_SetConfig+0x212>
 8006bde:	2310      	movs	r3, #16
 8006be0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	69db      	ldr	r3, [r3, #28]
 8006be6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bea:	d16b      	bne.n	8006cc4 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8006bec:	7ffb      	ldrb	r3, [r7, #31]
 8006bee:	2b08      	cmp	r3, #8
 8006bf0:	d838      	bhi.n	8006c64 <UART_SetConfig+0x294>
 8006bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8006bf8 <UART_SetConfig+0x228>)
 8006bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bf8:	08006c1d 	.word	0x08006c1d
 8006bfc:	08006c25 	.word	0x08006c25
 8006c00:	08006c2d 	.word	0x08006c2d
 8006c04:	08006c65 	.word	0x08006c65
 8006c08:	08006c33 	.word	0x08006c33
 8006c0c:	08006c65 	.word	0x08006c65
 8006c10:	08006c65 	.word	0x08006c65
 8006c14:	08006c65 	.word	0x08006c65
 8006c18:	08006c3b 	.word	0x08006c3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1c:	f7fd ff1a 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006c20:	61b8      	str	r0, [r7, #24]
        break;
 8006c22:	e024      	b.n	8006c6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c24:	f7fd ff38 	bl	8004a98 <HAL_RCC_GetPCLK2Freq>
 8006c28:	61b8      	str	r0, [r7, #24]
        break;
 8006c2a:	e020      	b.n	8006c6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8006c60 <UART_SetConfig+0x290>)
 8006c2e:	61bb      	str	r3, [r7, #24]
        break;
 8006c30:	e01d      	b.n	8006c6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c32:	f7fd feaf 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8006c36:	61b8      	str	r0, [r7, #24]
        break;
 8006c38:	e019      	b.n	8006c6e <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006c3e:	61bb      	str	r3, [r7, #24]
        break;
 8006c40:	e015      	b.n	8006c6e <UART_SetConfig+0x29e>
 8006c42:	bf00      	nop
 8006c44:	efff69f3 	.word	0xefff69f3
 8006c48:	40013800 	.word	0x40013800
 8006c4c:	40021000 	.word	0x40021000
 8006c50:	40004400 	.word	0x40004400
 8006c54:	40004800 	.word	0x40004800
 8006c58:	40004c00 	.word	0x40004c00
 8006c5c:	40005000 	.word	0x40005000
 8006c60:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8006c64:	2300      	movs	r3, #0
 8006c66:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006c68:	2301      	movs	r3, #1
 8006c6a:	77bb      	strb	r3, [r7, #30]
        break;
 8006c6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c6e:	69bb      	ldr	r3, [r7, #24]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d073      	beq.n	8006d5c <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	005a      	lsls	r2, r3, #1
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	441a      	add	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c88:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b0f      	cmp	r3, #15
 8006c8e:	d916      	bls.n	8006cbe <UART_SetConfig+0x2ee>
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c96:	d212      	bcs.n	8006cbe <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c98:	693b      	ldr	r3, [r7, #16]
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	f023 030f 	bic.w	r3, r3, #15
 8006ca0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	085b      	lsrs	r3, r3, #1
 8006ca6:	b29b      	uxth	r3, r3
 8006ca8:	f003 0307 	and.w	r3, r3, #7
 8006cac:	b29a      	uxth	r2, r3
 8006cae:	89fb      	ldrh	r3, [r7, #14]
 8006cb0:	4313      	orrs	r3, r2
 8006cb2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	89fa      	ldrh	r2, [r7, #14]
 8006cba:	60da      	str	r2, [r3, #12]
 8006cbc:	e04e      	b.n	8006d5c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	77bb      	strb	r3, [r7, #30]
 8006cc2:	e04b      	b.n	8006d5c <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cc4:	7ffb      	ldrb	r3, [r7, #31]
 8006cc6:	2b08      	cmp	r3, #8
 8006cc8:	d827      	bhi.n	8006d1a <UART_SetConfig+0x34a>
 8006cca:	a201      	add	r2, pc, #4	@ (adr r2, 8006cd0 <UART_SetConfig+0x300>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006cf5 	.word	0x08006cf5
 8006cd4:	08006cfd 	.word	0x08006cfd
 8006cd8:	08006d05 	.word	0x08006d05
 8006cdc:	08006d1b 	.word	0x08006d1b
 8006ce0:	08006d0b 	.word	0x08006d0b
 8006ce4:	08006d1b 	.word	0x08006d1b
 8006ce8:	08006d1b 	.word	0x08006d1b
 8006cec:	08006d1b 	.word	0x08006d1b
 8006cf0:	08006d13 	.word	0x08006d13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006cf4:	f7fd feae 	bl	8004a54 <HAL_RCC_GetPCLK1Freq>
 8006cf8:	61b8      	str	r0, [r7, #24]
        break;
 8006cfa:	e013      	b.n	8006d24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cfc:	f7fd fecc 	bl	8004a98 <HAL_RCC_GetPCLK2Freq>
 8006d00:	61b8      	str	r0, [r7, #24]
        break;
 8006d02:	e00f      	b.n	8006d24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d04:	4b1b      	ldr	r3, [pc, #108]	@ (8006d74 <UART_SetConfig+0x3a4>)
 8006d06:	61bb      	str	r3, [r7, #24]
        break;
 8006d08:	e00c      	b.n	8006d24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d0a:	f7fd fe43 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 8006d0e:	61b8      	str	r0, [r7, #24]
        break;
 8006d10:	e008      	b.n	8006d24 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006d16:	61bb      	str	r3, [r7, #24]
        break;
 8006d18:	e004      	b.n	8006d24 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	77bb      	strb	r3, [r7, #30]
        break;
 8006d22:	bf00      	nop
    }

    if (pclk != 0U)
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d018      	beq.n	8006d5c <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	085a      	lsrs	r2, r3, #1
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	441a      	add	r2, r3
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b0f      	cmp	r3, #15
 8006d42:	d909      	bls.n	8006d58 <UART_SetConfig+0x388>
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d4a:	d205      	bcs.n	8006d58 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	b29a      	uxth	r2, r3
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	60da      	str	r2, [r3, #12]
 8006d56:	e001      	b.n	8006d5c <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2200      	movs	r2, #0
 8006d60:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006d68:	7fbb      	ldrb	r3, [r7, #30]
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3720      	adds	r7, #32
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	007a1200 	.word	0x007a1200

08006d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e76:	d10a      	bne.n	8006e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b098      	sub	sp, #96	@ 0x60
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ecc:	f7fa fec6 	bl	8001c5c <HAL_GetTick>
 8006ed0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d12e      	bne.n	8006f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f88c 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d021      	beq.n	8006f3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f0e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f18:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f1a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006f1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e6      	bne.n	8006efa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e062      	b.n	8007004 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d149      	bne.n	8006fe0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f4c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006f54:	2200      	movs	r2, #0
 8006f56:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f856 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d03c      	beq.n	8006fe0 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	623b      	str	r3, [r7, #32]
   return(result);
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f84:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f86:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e6      	bne.n	8006f66 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006fb8:	61fa      	str	r2, [r7, #28]
 8006fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	69b9      	ldr	r1, [r7, #24]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e5      	bne.n	8006f98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e011      	b.n	8007004 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3758      	adds	r7, #88	@ 0x58
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701c:	e04f      	b.n	80070be <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d04b      	beq.n	80070be <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fa fe19 	bl	8001c5c <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <UART_WaitOnFlagUntilTimeout+0x30>
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e04e      	b.n	80070de <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d037      	beq.n	80070be <UART_WaitOnFlagUntilTimeout+0xb2>
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	2b80      	cmp	r3, #128	@ 0x80
 8007052:	d034      	beq.n	80070be <UART_WaitOnFlagUntilTimeout+0xb2>
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2b40      	cmp	r3, #64	@ 0x40
 8007058:	d031      	beq.n	80070be <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	69db      	ldr	r3, [r3, #28]
 8007060:	f003 0308 	and.w	r3, r3, #8
 8007064:	2b08      	cmp	r3, #8
 8007066:	d110      	bne.n	800708a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	2208      	movs	r2, #8
 800706e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 f838 	bl	80070e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2208      	movs	r2, #8
 800707a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e029      	b.n	80070de <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	69db      	ldr	r3, [r3, #28]
 8007090:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007094:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007098:	d111      	bne.n	80070be <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80070a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80070a4:	68f8      	ldr	r0, [r7, #12]
 80070a6:	f000 f81e 	bl	80070e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2220      	movs	r2, #32
 80070ae:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e00f      	b.n	80070de <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69da      	ldr	r2, [r3, #28]
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	4013      	ands	r3, r2
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	429a      	cmp	r2, r3
 80070cc:	bf0c      	ite	eq
 80070ce:	2301      	moveq	r3, #1
 80070d0:	2300      	movne	r3, #0
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	461a      	mov	r2, r3
 80070d6:	79fb      	ldrb	r3, [r7, #7]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d0a0      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b095      	sub	sp, #84	@ 0x54
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070f6:	e853 3f00 	ldrex	r3, [r3]
 80070fa:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80070fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007102:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	461a      	mov	r2, r3
 800710a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800710c:	643b      	str	r3, [r7, #64]	@ 0x40
 800710e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007110:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007112:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007114:	e841 2300 	strex	r3, r2, [r1]
 8007118:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1e6      	bne.n	80070ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	3308      	adds	r3, #8
 8007126:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f023 0301 	bic.w	r3, r3, #1
 8007136:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	3308      	adds	r3, #8
 800713e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007140:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007142:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007146:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800714e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e5      	bne.n	8007120 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007158:	2b01      	cmp	r3, #1
 800715a:	d118      	bne.n	800718e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	60bb      	str	r3, [r7, #8]
   return(result);
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	f023 0310 	bic.w	r3, r3, #16
 8007170:	647b      	str	r3, [r7, #68]	@ 0x44
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800717a:	61bb      	str	r3, [r7, #24]
 800717c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6979      	ldr	r1, [r7, #20]
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	613b      	str	r3, [r7, #16]
   return(result);
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2220      	movs	r2, #32
 8007192:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2200      	movs	r2, #0
 800719a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071a2:	bf00      	nop
 80071a4:	3754      	adds	r7, #84	@ 0x54
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <__cvt>:
 80071ae:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80071b2:	ec57 6b10 	vmov	r6, r7, d0
 80071b6:	2f00      	cmp	r7, #0
 80071b8:	460c      	mov	r4, r1
 80071ba:	4619      	mov	r1, r3
 80071bc:	463b      	mov	r3, r7
 80071be:	bfbb      	ittet	lt
 80071c0:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80071c4:	461f      	movlt	r7, r3
 80071c6:	2300      	movge	r3, #0
 80071c8:	232d      	movlt	r3, #45	@ 0x2d
 80071ca:	700b      	strb	r3, [r1, #0]
 80071cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071ce:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80071d2:	4691      	mov	r9, r2
 80071d4:	f023 0820 	bic.w	r8, r3, #32
 80071d8:	bfbc      	itt	lt
 80071da:	4632      	movlt	r2, r6
 80071dc:	4616      	movlt	r6, r2
 80071de:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071e2:	d005      	beq.n	80071f0 <__cvt+0x42>
 80071e4:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80071e8:	d100      	bne.n	80071ec <__cvt+0x3e>
 80071ea:	3401      	adds	r4, #1
 80071ec:	2102      	movs	r1, #2
 80071ee:	e000      	b.n	80071f2 <__cvt+0x44>
 80071f0:	2103      	movs	r1, #3
 80071f2:	ab03      	add	r3, sp, #12
 80071f4:	9301      	str	r3, [sp, #4]
 80071f6:	ab02      	add	r3, sp, #8
 80071f8:	9300      	str	r3, [sp, #0]
 80071fa:	ec47 6b10 	vmov	d0, r6, r7
 80071fe:	4653      	mov	r3, sl
 8007200:	4622      	mov	r2, r4
 8007202:	f000 fe49 	bl	8007e98 <_dtoa_r>
 8007206:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800720a:	4605      	mov	r5, r0
 800720c:	d119      	bne.n	8007242 <__cvt+0x94>
 800720e:	f019 0f01 	tst.w	r9, #1
 8007212:	d00e      	beq.n	8007232 <__cvt+0x84>
 8007214:	eb00 0904 	add.w	r9, r0, r4
 8007218:	2200      	movs	r2, #0
 800721a:	2300      	movs	r3, #0
 800721c:	4630      	mov	r0, r6
 800721e:	4639      	mov	r1, r7
 8007220:	f7f9 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007224:	b108      	cbz	r0, 800722a <__cvt+0x7c>
 8007226:	f8cd 900c 	str.w	r9, [sp, #12]
 800722a:	2230      	movs	r2, #48	@ 0x30
 800722c:	9b03      	ldr	r3, [sp, #12]
 800722e:	454b      	cmp	r3, r9
 8007230:	d31e      	bcc.n	8007270 <__cvt+0xc2>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007236:	1b5b      	subs	r3, r3, r5
 8007238:	4628      	mov	r0, r5
 800723a:	6013      	str	r3, [r2, #0]
 800723c:	b004      	add	sp, #16
 800723e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007242:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007246:	eb00 0904 	add.w	r9, r0, r4
 800724a:	d1e5      	bne.n	8007218 <__cvt+0x6a>
 800724c:	7803      	ldrb	r3, [r0, #0]
 800724e:	2b30      	cmp	r3, #48	@ 0x30
 8007250:	d10a      	bne.n	8007268 <__cvt+0xba>
 8007252:	2200      	movs	r2, #0
 8007254:	2300      	movs	r3, #0
 8007256:	4630      	mov	r0, r6
 8007258:	4639      	mov	r1, r7
 800725a:	f7f9 fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800725e:	b918      	cbnz	r0, 8007268 <__cvt+0xba>
 8007260:	f1c4 0401 	rsb	r4, r4, #1
 8007264:	f8ca 4000 	str.w	r4, [sl]
 8007268:	f8da 3000 	ldr.w	r3, [sl]
 800726c:	4499      	add	r9, r3
 800726e:	e7d3      	b.n	8007218 <__cvt+0x6a>
 8007270:	1c59      	adds	r1, r3, #1
 8007272:	9103      	str	r1, [sp, #12]
 8007274:	701a      	strb	r2, [r3, #0]
 8007276:	e7d9      	b.n	800722c <__cvt+0x7e>

08007278 <__exponent>:
 8007278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800727a:	2900      	cmp	r1, #0
 800727c:	bfba      	itte	lt
 800727e:	4249      	neglt	r1, r1
 8007280:	232d      	movlt	r3, #45	@ 0x2d
 8007282:	232b      	movge	r3, #43	@ 0x2b
 8007284:	2909      	cmp	r1, #9
 8007286:	7002      	strb	r2, [r0, #0]
 8007288:	7043      	strb	r3, [r0, #1]
 800728a:	dd29      	ble.n	80072e0 <__exponent+0x68>
 800728c:	f10d 0307 	add.w	r3, sp, #7
 8007290:	461d      	mov	r5, r3
 8007292:	270a      	movs	r7, #10
 8007294:	461a      	mov	r2, r3
 8007296:	fbb1 f6f7 	udiv	r6, r1, r7
 800729a:	fb07 1416 	mls	r4, r7, r6, r1
 800729e:	3430      	adds	r4, #48	@ 0x30
 80072a0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80072a4:	460c      	mov	r4, r1
 80072a6:	2c63      	cmp	r4, #99	@ 0x63
 80072a8:	f103 33ff 	add.w	r3, r3, #4294967295
 80072ac:	4631      	mov	r1, r6
 80072ae:	dcf1      	bgt.n	8007294 <__exponent+0x1c>
 80072b0:	3130      	adds	r1, #48	@ 0x30
 80072b2:	1e94      	subs	r4, r2, #2
 80072b4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80072b8:	1c41      	adds	r1, r0, #1
 80072ba:	4623      	mov	r3, r4
 80072bc:	42ab      	cmp	r3, r5
 80072be:	d30a      	bcc.n	80072d6 <__exponent+0x5e>
 80072c0:	f10d 0309 	add.w	r3, sp, #9
 80072c4:	1a9b      	subs	r3, r3, r2
 80072c6:	42ac      	cmp	r4, r5
 80072c8:	bf88      	it	hi
 80072ca:	2300      	movhi	r3, #0
 80072cc:	3302      	adds	r3, #2
 80072ce:	4403      	add	r3, r0
 80072d0:	1a18      	subs	r0, r3, r0
 80072d2:	b003      	add	sp, #12
 80072d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072d6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072da:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072de:	e7ed      	b.n	80072bc <__exponent+0x44>
 80072e0:	2330      	movs	r3, #48	@ 0x30
 80072e2:	3130      	adds	r1, #48	@ 0x30
 80072e4:	7083      	strb	r3, [r0, #2]
 80072e6:	70c1      	strb	r1, [r0, #3]
 80072e8:	1d03      	adds	r3, r0, #4
 80072ea:	e7f1      	b.n	80072d0 <__exponent+0x58>

080072ec <_printf_float>:
 80072ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f0:	b08d      	sub	sp, #52	@ 0x34
 80072f2:	460c      	mov	r4, r1
 80072f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80072f8:	4616      	mov	r6, r2
 80072fa:	461f      	mov	r7, r3
 80072fc:	4605      	mov	r5, r0
 80072fe:	f000 fccb 	bl	8007c98 <_localeconv_r>
 8007302:	6803      	ldr	r3, [r0, #0]
 8007304:	9304      	str	r3, [sp, #16]
 8007306:	4618      	mov	r0, r3
 8007308:	f7f8 ffba 	bl	8000280 <strlen>
 800730c:	2300      	movs	r3, #0
 800730e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007310:	f8d8 3000 	ldr.w	r3, [r8]
 8007314:	9005      	str	r0, [sp, #20]
 8007316:	3307      	adds	r3, #7
 8007318:	f023 0307 	bic.w	r3, r3, #7
 800731c:	f103 0208 	add.w	r2, r3, #8
 8007320:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007324:	f8d4 b000 	ldr.w	fp, [r4]
 8007328:	f8c8 2000 	str.w	r2, [r8]
 800732c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007330:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007334:	9307      	str	r3, [sp, #28]
 8007336:	f8cd 8018 	str.w	r8, [sp, #24]
 800733a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800733e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007342:	4b9c      	ldr	r3, [pc, #624]	@ (80075b4 <_printf_float+0x2c8>)
 8007344:	f04f 32ff 	mov.w	r2, #4294967295
 8007348:	f7f9 fbf8 	bl	8000b3c <__aeabi_dcmpun>
 800734c:	bb70      	cbnz	r0, 80073ac <_printf_float+0xc0>
 800734e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007352:	4b98      	ldr	r3, [pc, #608]	@ (80075b4 <_printf_float+0x2c8>)
 8007354:	f04f 32ff 	mov.w	r2, #4294967295
 8007358:	f7f9 fbd2 	bl	8000b00 <__aeabi_dcmple>
 800735c:	bb30      	cbnz	r0, 80073ac <_printf_float+0xc0>
 800735e:	2200      	movs	r2, #0
 8007360:	2300      	movs	r3, #0
 8007362:	4640      	mov	r0, r8
 8007364:	4649      	mov	r1, r9
 8007366:	f7f9 fbc1 	bl	8000aec <__aeabi_dcmplt>
 800736a:	b110      	cbz	r0, 8007372 <_printf_float+0x86>
 800736c:	232d      	movs	r3, #45	@ 0x2d
 800736e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007372:	4a91      	ldr	r2, [pc, #580]	@ (80075b8 <_printf_float+0x2cc>)
 8007374:	4b91      	ldr	r3, [pc, #580]	@ (80075bc <_printf_float+0x2d0>)
 8007376:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800737a:	bf8c      	ite	hi
 800737c:	4690      	movhi	r8, r2
 800737e:	4698      	movls	r8, r3
 8007380:	2303      	movs	r3, #3
 8007382:	6123      	str	r3, [r4, #16]
 8007384:	f02b 0304 	bic.w	r3, fp, #4
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	f04f 0900 	mov.w	r9, #0
 800738e:	9700      	str	r7, [sp, #0]
 8007390:	4633      	mov	r3, r6
 8007392:	aa0b      	add	r2, sp, #44	@ 0x2c
 8007394:	4621      	mov	r1, r4
 8007396:	4628      	mov	r0, r5
 8007398:	f000 f9d2 	bl	8007740 <_printf_common>
 800739c:	3001      	adds	r0, #1
 800739e:	f040 808d 	bne.w	80074bc <_printf_float+0x1d0>
 80073a2:	f04f 30ff 	mov.w	r0, #4294967295
 80073a6:	b00d      	add	sp, #52	@ 0x34
 80073a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ac:	4642      	mov	r2, r8
 80073ae:	464b      	mov	r3, r9
 80073b0:	4640      	mov	r0, r8
 80073b2:	4649      	mov	r1, r9
 80073b4:	f7f9 fbc2 	bl	8000b3c <__aeabi_dcmpun>
 80073b8:	b140      	cbz	r0, 80073cc <_printf_float+0xe0>
 80073ba:	464b      	mov	r3, r9
 80073bc:	2b00      	cmp	r3, #0
 80073be:	bfbc      	itt	lt
 80073c0:	232d      	movlt	r3, #45	@ 0x2d
 80073c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073c6:	4a7e      	ldr	r2, [pc, #504]	@ (80075c0 <_printf_float+0x2d4>)
 80073c8:	4b7e      	ldr	r3, [pc, #504]	@ (80075c4 <_printf_float+0x2d8>)
 80073ca:	e7d4      	b.n	8007376 <_printf_float+0x8a>
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80073d2:	9206      	str	r2, [sp, #24]
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	d13b      	bne.n	8007450 <_printf_float+0x164>
 80073d8:	2306      	movs	r3, #6
 80073da:	6063      	str	r3, [r4, #4]
 80073dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80073e0:	2300      	movs	r3, #0
 80073e2:	6022      	str	r2, [r4, #0]
 80073e4:	9303      	str	r3, [sp, #12]
 80073e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80073e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80073ec:	ab09      	add	r3, sp, #36	@ 0x24
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	6861      	ldr	r1, [r4, #4]
 80073f2:	ec49 8b10 	vmov	d0, r8, r9
 80073f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80073fa:	4628      	mov	r0, r5
 80073fc:	f7ff fed7 	bl	80071ae <__cvt>
 8007400:	9b06      	ldr	r3, [sp, #24]
 8007402:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007404:	2b47      	cmp	r3, #71	@ 0x47
 8007406:	4680      	mov	r8, r0
 8007408:	d129      	bne.n	800745e <_printf_float+0x172>
 800740a:	1cc8      	adds	r0, r1, #3
 800740c:	db02      	blt.n	8007414 <_printf_float+0x128>
 800740e:	6863      	ldr	r3, [r4, #4]
 8007410:	4299      	cmp	r1, r3
 8007412:	dd41      	ble.n	8007498 <_printf_float+0x1ac>
 8007414:	f1aa 0a02 	sub.w	sl, sl, #2
 8007418:	fa5f fa8a 	uxtb.w	sl, sl
 800741c:	3901      	subs	r1, #1
 800741e:	4652      	mov	r2, sl
 8007420:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007424:	9109      	str	r1, [sp, #36]	@ 0x24
 8007426:	f7ff ff27 	bl	8007278 <__exponent>
 800742a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800742c:	1813      	adds	r3, r2, r0
 800742e:	2a01      	cmp	r2, #1
 8007430:	4681      	mov	r9, r0
 8007432:	6123      	str	r3, [r4, #16]
 8007434:	dc02      	bgt.n	800743c <_printf_float+0x150>
 8007436:	6822      	ldr	r2, [r4, #0]
 8007438:	07d2      	lsls	r2, r2, #31
 800743a:	d501      	bpl.n	8007440 <_printf_float+0x154>
 800743c:	3301      	adds	r3, #1
 800743e:	6123      	str	r3, [r4, #16]
 8007440:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007444:	2b00      	cmp	r3, #0
 8007446:	d0a2      	beq.n	800738e <_printf_float+0xa2>
 8007448:	232d      	movs	r3, #45	@ 0x2d
 800744a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800744e:	e79e      	b.n	800738e <_printf_float+0xa2>
 8007450:	9a06      	ldr	r2, [sp, #24]
 8007452:	2a47      	cmp	r2, #71	@ 0x47
 8007454:	d1c2      	bne.n	80073dc <_printf_float+0xf0>
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1c0      	bne.n	80073dc <_printf_float+0xf0>
 800745a:	2301      	movs	r3, #1
 800745c:	e7bd      	b.n	80073da <_printf_float+0xee>
 800745e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007462:	d9db      	bls.n	800741c <_printf_float+0x130>
 8007464:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007468:	d118      	bne.n	800749c <_printf_float+0x1b0>
 800746a:	2900      	cmp	r1, #0
 800746c:	6863      	ldr	r3, [r4, #4]
 800746e:	dd0b      	ble.n	8007488 <_printf_float+0x19c>
 8007470:	6121      	str	r1, [r4, #16]
 8007472:	b913      	cbnz	r3, 800747a <_printf_float+0x18e>
 8007474:	6822      	ldr	r2, [r4, #0]
 8007476:	07d0      	lsls	r0, r2, #31
 8007478:	d502      	bpl.n	8007480 <_printf_float+0x194>
 800747a:	3301      	adds	r3, #1
 800747c:	440b      	add	r3, r1
 800747e:	6123      	str	r3, [r4, #16]
 8007480:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007482:	f04f 0900 	mov.w	r9, #0
 8007486:	e7db      	b.n	8007440 <_printf_float+0x154>
 8007488:	b913      	cbnz	r3, 8007490 <_printf_float+0x1a4>
 800748a:	6822      	ldr	r2, [r4, #0]
 800748c:	07d2      	lsls	r2, r2, #31
 800748e:	d501      	bpl.n	8007494 <_printf_float+0x1a8>
 8007490:	3302      	adds	r3, #2
 8007492:	e7f4      	b.n	800747e <_printf_float+0x192>
 8007494:	2301      	movs	r3, #1
 8007496:	e7f2      	b.n	800747e <_printf_float+0x192>
 8007498:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800749c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800749e:	4299      	cmp	r1, r3
 80074a0:	db05      	blt.n	80074ae <_printf_float+0x1c2>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	6121      	str	r1, [r4, #16]
 80074a6:	07d8      	lsls	r0, r3, #31
 80074a8:	d5ea      	bpl.n	8007480 <_printf_float+0x194>
 80074aa:	1c4b      	adds	r3, r1, #1
 80074ac:	e7e7      	b.n	800747e <_printf_float+0x192>
 80074ae:	2900      	cmp	r1, #0
 80074b0:	bfd4      	ite	le
 80074b2:	f1c1 0202 	rsble	r2, r1, #2
 80074b6:	2201      	movgt	r2, #1
 80074b8:	4413      	add	r3, r2
 80074ba:	e7e0      	b.n	800747e <_printf_float+0x192>
 80074bc:	6823      	ldr	r3, [r4, #0]
 80074be:	055a      	lsls	r2, r3, #21
 80074c0:	d407      	bmi.n	80074d2 <_printf_float+0x1e6>
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	4642      	mov	r2, r8
 80074c6:	4631      	mov	r1, r6
 80074c8:	4628      	mov	r0, r5
 80074ca:	47b8      	blx	r7
 80074cc:	3001      	adds	r0, #1
 80074ce:	d12b      	bne.n	8007528 <_printf_float+0x23c>
 80074d0:	e767      	b.n	80073a2 <_printf_float+0xb6>
 80074d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074d6:	f240 80dd 	bls.w	8007694 <_printf_float+0x3a8>
 80074da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074de:	2200      	movs	r2, #0
 80074e0:	2300      	movs	r3, #0
 80074e2:	f7f9 faf9 	bl	8000ad8 <__aeabi_dcmpeq>
 80074e6:	2800      	cmp	r0, #0
 80074e8:	d033      	beq.n	8007552 <_printf_float+0x266>
 80074ea:	4a37      	ldr	r2, [pc, #220]	@ (80075c8 <_printf_float+0x2dc>)
 80074ec:	2301      	movs	r3, #1
 80074ee:	4631      	mov	r1, r6
 80074f0:	4628      	mov	r0, r5
 80074f2:	47b8      	blx	r7
 80074f4:	3001      	adds	r0, #1
 80074f6:	f43f af54 	beq.w	80073a2 <_printf_float+0xb6>
 80074fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80074fe:	4543      	cmp	r3, r8
 8007500:	db02      	blt.n	8007508 <_printf_float+0x21c>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	07d8      	lsls	r0, r3, #31
 8007506:	d50f      	bpl.n	8007528 <_printf_float+0x23c>
 8007508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	47b8      	blx	r7
 8007512:	3001      	adds	r0, #1
 8007514:	f43f af45 	beq.w	80073a2 <_printf_float+0xb6>
 8007518:	f04f 0900 	mov.w	r9, #0
 800751c:	f108 38ff 	add.w	r8, r8, #4294967295
 8007520:	f104 0a1a 	add.w	sl, r4, #26
 8007524:	45c8      	cmp	r8, r9
 8007526:	dc09      	bgt.n	800753c <_printf_float+0x250>
 8007528:	6823      	ldr	r3, [r4, #0]
 800752a:	079b      	lsls	r3, r3, #30
 800752c:	f100 8103 	bmi.w	8007736 <_printf_float+0x44a>
 8007530:	68e0      	ldr	r0, [r4, #12]
 8007532:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007534:	4298      	cmp	r0, r3
 8007536:	bfb8      	it	lt
 8007538:	4618      	movlt	r0, r3
 800753a:	e734      	b.n	80073a6 <_printf_float+0xba>
 800753c:	2301      	movs	r3, #1
 800753e:	4652      	mov	r2, sl
 8007540:	4631      	mov	r1, r6
 8007542:	4628      	mov	r0, r5
 8007544:	47b8      	blx	r7
 8007546:	3001      	adds	r0, #1
 8007548:	f43f af2b 	beq.w	80073a2 <_printf_float+0xb6>
 800754c:	f109 0901 	add.w	r9, r9, #1
 8007550:	e7e8      	b.n	8007524 <_printf_float+0x238>
 8007552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007554:	2b00      	cmp	r3, #0
 8007556:	dc39      	bgt.n	80075cc <_printf_float+0x2e0>
 8007558:	4a1b      	ldr	r2, [pc, #108]	@ (80075c8 <_printf_float+0x2dc>)
 800755a:	2301      	movs	r3, #1
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	f43f af1d 	beq.w	80073a2 <_printf_float+0xb6>
 8007568:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800756c:	ea59 0303 	orrs.w	r3, r9, r3
 8007570:	d102      	bne.n	8007578 <_printf_float+0x28c>
 8007572:	6823      	ldr	r3, [r4, #0]
 8007574:	07d9      	lsls	r1, r3, #31
 8007576:	d5d7      	bpl.n	8007528 <_printf_float+0x23c>
 8007578:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800757c:	4631      	mov	r1, r6
 800757e:	4628      	mov	r0, r5
 8007580:	47b8      	blx	r7
 8007582:	3001      	adds	r0, #1
 8007584:	f43f af0d 	beq.w	80073a2 <_printf_float+0xb6>
 8007588:	f04f 0a00 	mov.w	sl, #0
 800758c:	f104 0b1a 	add.w	fp, r4, #26
 8007590:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007592:	425b      	negs	r3, r3
 8007594:	4553      	cmp	r3, sl
 8007596:	dc01      	bgt.n	800759c <_printf_float+0x2b0>
 8007598:	464b      	mov	r3, r9
 800759a:	e793      	b.n	80074c4 <_printf_float+0x1d8>
 800759c:	2301      	movs	r3, #1
 800759e:	465a      	mov	r2, fp
 80075a0:	4631      	mov	r1, r6
 80075a2:	4628      	mov	r0, r5
 80075a4:	47b8      	blx	r7
 80075a6:	3001      	adds	r0, #1
 80075a8:	f43f aefb 	beq.w	80073a2 <_printf_float+0xb6>
 80075ac:	f10a 0a01 	add.w	sl, sl, #1
 80075b0:	e7ee      	b.n	8007590 <_printf_float+0x2a4>
 80075b2:	bf00      	nop
 80075b4:	7fefffff 	.word	0x7fefffff
 80075b8:	08009b60 	.word	0x08009b60
 80075bc:	08009b5c 	.word	0x08009b5c
 80075c0:	08009b68 	.word	0x08009b68
 80075c4:	08009b64 	.word	0x08009b64
 80075c8:	08009b6c 	.word	0x08009b6c
 80075cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075d2:	4553      	cmp	r3, sl
 80075d4:	bfa8      	it	ge
 80075d6:	4653      	movge	r3, sl
 80075d8:	2b00      	cmp	r3, #0
 80075da:	4699      	mov	r9, r3
 80075dc:	dc36      	bgt.n	800764c <_printf_float+0x360>
 80075de:	f04f 0b00 	mov.w	fp, #0
 80075e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075e6:	f104 021a 	add.w	r2, r4, #26
 80075ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075ec:	9306      	str	r3, [sp, #24]
 80075ee:	eba3 0309 	sub.w	r3, r3, r9
 80075f2:	455b      	cmp	r3, fp
 80075f4:	dc31      	bgt.n	800765a <_printf_float+0x36e>
 80075f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075f8:	459a      	cmp	sl, r3
 80075fa:	dc3a      	bgt.n	8007672 <_printf_float+0x386>
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	07da      	lsls	r2, r3, #31
 8007600:	d437      	bmi.n	8007672 <_printf_float+0x386>
 8007602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007604:	ebaa 0903 	sub.w	r9, sl, r3
 8007608:	9b06      	ldr	r3, [sp, #24]
 800760a:	ebaa 0303 	sub.w	r3, sl, r3
 800760e:	4599      	cmp	r9, r3
 8007610:	bfa8      	it	ge
 8007612:	4699      	movge	r9, r3
 8007614:	f1b9 0f00 	cmp.w	r9, #0
 8007618:	dc33      	bgt.n	8007682 <_printf_float+0x396>
 800761a:	f04f 0800 	mov.w	r8, #0
 800761e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007622:	f104 0b1a 	add.w	fp, r4, #26
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	ebaa 0303 	sub.w	r3, sl, r3
 800762c:	eba3 0309 	sub.w	r3, r3, r9
 8007630:	4543      	cmp	r3, r8
 8007632:	f77f af79 	ble.w	8007528 <_printf_float+0x23c>
 8007636:	2301      	movs	r3, #1
 8007638:	465a      	mov	r2, fp
 800763a:	4631      	mov	r1, r6
 800763c:	4628      	mov	r0, r5
 800763e:	47b8      	blx	r7
 8007640:	3001      	adds	r0, #1
 8007642:	f43f aeae 	beq.w	80073a2 <_printf_float+0xb6>
 8007646:	f108 0801 	add.w	r8, r8, #1
 800764a:	e7ec      	b.n	8007626 <_printf_float+0x33a>
 800764c:	4642      	mov	r2, r8
 800764e:	4631      	mov	r1, r6
 8007650:	4628      	mov	r0, r5
 8007652:	47b8      	blx	r7
 8007654:	3001      	adds	r0, #1
 8007656:	d1c2      	bne.n	80075de <_printf_float+0x2f2>
 8007658:	e6a3      	b.n	80073a2 <_printf_float+0xb6>
 800765a:	2301      	movs	r3, #1
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	9206      	str	r2, [sp, #24]
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	f43f ae9c 	beq.w	80073a2 <_printf_float+0xb6>
 800766a:	9a06      	ldr	r2, [sp, #24]
 800766c:	f10b 0b01 	add.w	fp, fp, #1
 8007670:	e7bb      	b.n	80075ea <_printf_float+0x2fe>
 8007672:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007676:	4631      	mov	r1, r6
 8007678:	4628      	mov	r0, r5
 800767a:	47b8      	blx	r7
 800767c:	3001      	adds	r0, #1
 800767e:	d1c0      	bne.n	8007602 <_printf_float+0x316>
 8007680:	e68f      	b.n	80073a2 <_printf_float+0xb6>
 8007682:	9a06      	ldr	r2, [sp, #24]
 8007684:	464b      	mov	r3, r9
 8007686:	4442      	add	r2, r8
 8007688:	4631      	mov	r1, r6
 800768a:	4628      	mov	r0, r5
 800768c:	47b8      	blx	r7
 800768e:	3001      	adds	r0, #1
 8007690:	d1c3      	bne.n	800761a <_printf_float+0x32e>
 8007692:	e686      	b.n	80073a2 <_printf_float+0xb6>
 8007694:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007698:	f1ba 0f01 	cmp.w	sl, #1
 800769c:	dc01      	bgt.n	80076a2 <_printf_float+0x3b6>
 800769e:	07db      	lsls	r3, r3, #31
 80076a0:	d536      	bpl.n	8007710 <_printf_float+0x424>
 80076a2:	2301      	movs	r3, #1
 80076a4:	4642      	mov	r2, r8
 80076a6:	4631      	mov	r1, r6
 80076a8:	4628      	mov	r0, r5
 80076aa:	47b8      	blx	r7
 80076ac:	3001      	adds	r0, #1
 80076ae:	f43f ae78 	beq.w	80073a2 <_printf_float+0xb6>
 80076b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076b6:	4631      	mov	r1, r6
 80076b8:	4628      	mov	r0, r5
 80076ba:	47b8      	blx	r7
 80076bc:	3001      	adds	r0, #1
 80076be:	f43f ae70 	beq.w	80073a2 <_printf_float+0xb6>
 80076c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076c6:	2200      	movs	r2, #0
 80076c8:	2300      	movs	r3, #0
 80076ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80076ce:	f7f9 fa03 	bl	8000ad8 <__aeabi_dcmpeq>
 80076d2:	b9c0      	cbnz	r0, 8007706 <_printf_float+0x41a>
 80076d4:	4653      	mov	r3, sl
 80076d6:	f108 0201 	add.w	r2, r8, #1
 80076da:	4631      	mov	r1, r6
 80076dc:	4628      	mov	r0, r5
 80076de:	47b8      	blx	r7
 80076e0:	3001      	adds	r0, #1
 80076e2:	d10c      	bne.n	80076fe <_printf_float+0x412>
 80076e4:	e65d      	b.n	80073a2 <_printf_float+0xb6>
 80076e6:	2301      	movs	r3, #1
 80076e8:	465a      	mov	r2, fp
 80076ea:	4631      	mov	r1, r6
 80076ec:	4628      	mov	r0, r5
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	f43f ae56 	beq.w	80073a2 <_printf_float+0xb6>
 80076f6:	f108 0801 	add.w	r8, r8, #1
 80076fa:	45d0      	cmp	r8, sl
 80076fc:	dbf3      	blt.n	80076e6 <_printf_float+0x3fa>
 80076fe:	464b      	mov	r3, r9
 8007700:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007704:	e6df      	b.n	80074c6 <_printf_float+0x1da>
 8007706:	f04f 0800 	mov.w	r8, #0
 800770a:	f104 0b1a 	add.w	fp, r4, #26
 800770e:	e7f4      	b.n	80076fa <_printf_float+0x40e>
 8007710:	2301      	movs	r3, #1
 8007712:	4642      	mov	r2, r8
 8007714:	e7e1      	b.n	80076da <_printf_float+0x3ee>
 8007716:	2301      	movs	r3, #1
 8007718:	464a      	mov	r2, r9
 800771a:	4631      	mov	r1, r6
 800771c:	4628      	mov	r0, r5
 800771e:	47b8      	blx	r7
 8007720:	3001      	adds	r0, #1
 8007722:	f43f ae3e 	beq.w	80073a2 <_printf_float+0xb6>
 8007726:	f108 0801 	add.w	r8, r8, #1
 800772a:	68e3      	ldr	r3, [r4, #12]
 800772c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800772e:	1a5b      	subs	r3, r3, r1
 8007730:	4543      	cmp	r3, r8
 8007732:	dcf0      	bgt.n	8007716 <_printf_float+0x42a>
 8007734:	e6fc      	b.n	8007530 <_printf_float+0x244>
 8007736:	f04f 0800 	mov.w	r8, #0
 800773a:	f104 0919 	add.w	r9, r4, #25
 800773e:	e7f4      	b.n	800772a <_printf_float+0x43e>

08007740 <_printf_common>:
 8007740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007744:	4616      	mov	r6, r2
 8007746:	4698      	mov	r8, r3
 8007748:	688a      	ldr	r2, [r1, #8]
 800774a:	690b      	ldr	r3, [r1, #16]
 800774c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007750:	4293      	cmp	r3, r2
 8007752:	bfb8      	it	lt
 8007754:	4613      	movlt	r3, r2
 8007756:	6033      	str	r3, [r6, #0]
 8007758:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800775c:	4607      	mov	r7, r0
 800775e:	460c      	mov	r4, r1
 8007760:	b10a      	cbz	r2, 8007766 <_printf_common+0x26>
 8007762:	3301      	adds	r3, #1
 8007764:	6033      	str	r3, [r6, #0]
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	0699      	lsls	r1, r3, #26
 800776a:	bf42      	ittt	mi
 800776c:	6833      	ldrmi	r3, [r6, #0]
 800776e:	3302      	addmi	r3, #2
 8007770:	6033      	strmi	r3, [r6, #0]
 8007772:	6825      	ldr	r5, [r4, #0]
 8007774:	f015 0506 	ands.w	r5, r5, #6
 8007778:	d106      	bne.n	8007788 <_printf_common+0x48>
 800777a:	f104 0a19 	add.w	sl, r4, #25
 800777e:	68e3      	ldr	r3, [r4, #12]
 8007780:	6832      	ldr	r2, [r6, #0]
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	42ab      	cmp	r3, r5
 8007786:	dc26      	bgt.n	80077d6 <_printf_common+0x96>
 8007788:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800778c:	6822      	ldr	r2, [r4, #0]
 800778e:	3b00      	subs	r3, #0
 8007790:	bf18      	it	ne
 8007792:	2301      	movne	r3, #1
 8007794:	0692      	lsls	r2, r2, #26
 8007796:	d42b      	bmi.n	80077f0 <_printf_common+0xb0>
 8007798:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800779c:	4641      	mov	r1, r8
 800779e:	4638      	mov	r0, r7
 80077a0:	47c8      	blx	r9
 80077a2:	3001      	adds	r0, #1
 80077a4:	d01e      	beq.n	80077e4 <_printf_common+0xa4>
 80077a6:	6823      	ldr	r3, [r4, #0]
 80077a8:	6922      	ldr	r2, [r4, #16]
 80077aa:	f003 0306 	and.w	r3, r3, #6
 80077ae:	2b04      	cmp	r3, #4
 80077b0:	bf02      	ittt	eq
 80077b2:	68e5      	ldreq	r5, [r4, #12]
 80077b4:	6833      	ldreq	r3, [r6, #0]
 80077b6:	1aed      	subeq	r5, r5, r3
 80077b8:	68a3      	ldr	r3, [r4, #8]
 80077ba:	bf0c      	ite	eq
 80077bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077c0:	2500      	movne	r5, #0
 80077c2:	4293      	cmp	r3, r2
 80077c4:	bfc4      	itt	gt
 80077c6:	1a9b      	subgt	r3, r3, r2
 80077c8:	18ed      	addgt	r5, r5, r3
 80077ca:	2600      	movs	r6, #0
 80077cc:	341a      	adds	r4, #26
 80077ce:	42b5      	cmp	r5, r6
 80077d0:	d11a      	bne.n	8007808 <_printf_common+0xc8>
 80077d2:	2000      	movs	r0, #0
 80077d4:	e008      	b.n	80077e8 <_printf_common+0xa8>
 80077d6:	2301      	movs	r3, #1
 80077d8:	4652      	mov	r2, sl
 80077da:	4641      	mov	r1, r8
 80077dc:	4638      	mov	r0, r7
 80077de:	47c8      	blx	r9
 80077e0:	3001      	adds	r0, #1
 80077e2:	d103      	bne.n	80077ec <_printf_common+0xac>
 80077e4:	f04f 30ff 	mov.w	r0, #4294967295
 80077e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077ec:	3501      	adds	r5, #1
 80077ee:	e7c6      	b.n	800777e <_printf_common+0x3e>
 80077f0:	18e1      	adds	r1, r4, r3
 80077f2:	1c5a      	adds	r2, r3, #1
 80077f4:	2030      	movs	r0, #48	@ 0x30
 80077f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077fa:	4422      	add	r2, r4
 80077fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007800:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007804:	3302      	adds	r3, #2
 8007806:	e7c7      	b.n	8007798 <_printf_common+0x58>
 8007808:	2301      	movs	r3, #1
 800780a:	4622      	mov	r2, r4
 800780c:	4641      	mov	r1, r8
 800780e:	4638      	mov	r0, r7
 8007810:	47c8      	blx	r9
 8007812:	3001      	adds	r0, #1
 8007814:	d0e6      	beq.n	80077e4 <_printf_common+0xa4>
 8007816:	3601      	adds	r6, #1
 8007818:	e7d9      	b.n	80077ce <_printf_common+0x8e>
	...

0800781c <_printf_i>:
 800781c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007820:	7e0f      	ldrb	r7, [r1, #24]
 8007822:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007824:	2f78      	cmp	r7, #120	@ 0x78
 8007826:	4691      	mov	r9, r2
 8007828:	4680      	mov	r8, r0
 800782a:	460c      	mov	r4, r1
 800782c:	469a      	mov	sl, r3
 800782e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007832:	d807      	bhi.n	8007844 <_printf_i+0x28>
 8007834:	2f62      	cmp	r7, #98	@ 0x62
 8007836:	d80a      	bhi.n	800784e <_printf_i+0x32>
 8007838:	2f00      	cmp	r7, #0
 800783a:	f000 80d1 	beq.w	80079e0 <_printf_i+0x1c4>
 800783e:	2f58      	cmp	r7, #88	@ 0x58
 8007840:	f000 80b8 	beq.w	80079b4 <_printf_i+0x198>
 8007844:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007848:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800784c:	e03a      	b.n	80078c4 <_printf_i+0xa8>
 800784e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007852:	2b15      	cmp	r3, #21
 8007854:	d8f6      	bhi.n	8007844 <_printf_i+0x28>
 8007856:	a101      	add	r1, pc, #4	@ (adr r1, 800785c <_printf_i+0x40>)
 8007858:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800785c:	080078b5 	.word	0x080078b5
 8007860:	080078c9 	.word	0x080078c9
 8007864:	08007845 	.word	0x08007845
 8007868:	08007845 	.word	0x08007845
 800786c:	08007845 	.word	0x08007845
 8007870:	08007845 	.word	0x08007845
 8007874:	080078c9 	.word	0x080078c9
 8007878:	08007845 	.word	0x08007845
 800787c:	08007845 	.word	0x08007845
 8007880:	08007845 	.word	0x08007845
 8007884:	08007845 	.word	0x08007845
 8007888:	080079c7 	.word	0x080079c7
 800788c:	080078f3 	.word	0x080078f3
 8007890:	08007981 	.word	0x08007981
 8007894:	08007845 	.word	0x08007845
 8007898:	08007845 	.word	0x08007845
 800789c:	080079e9 	.word	0x080079e9
 80078a0:	08007845 	.word	0x08007845
 80078a4:	080078f3 	.word	0x080078f3
 80078a8:	08007845 	.word	0x08007845
 80078ac:	08007845 	.word	0x08007845
 80078b0:	08007989 	.word	0x08007989
 80078b4:	6833      	ldr	r3, [r6, #0]
 80078b6:	1d1a      	adds	r2, r3, #4
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6032      	str	r2, [r6, #0]
 80078bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078c4:	2301      	movs	r3, #1
 80078c6:	e09c      	b.n	8007a02 <_printf_i+0x1e6>
 80078c8:	6833      	ldr	r3, [r6, #0]
 80078ca:	6820      	ldr	r0, [r4, #0]
 80078cc:	1d19      	adds	r1, r3, #4
 80078ce:	6031      	str	r1, [r6, #0]
 80078d0:	0606      	lsls	r6, r0, #24
 80078d2:	d501      	bpl.n	80078d8 <_printf_i+0xbc>
 80078d4:	681d      	ldr	r5, [r3, #0]
 80078d6:	e003      	b.n	80078e0 <_printf_i+0xc4>
 80078d8:	0645      	lsls	r5, r0, #25
 80078da:	d5fb      	bpl.n	80078d4 <_printf_i+0xb8>
 80078dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078e0:	2d00      	cmp	r5, #0
 80078e2:	da03      	bge.n	80078ec <_printf_i+0xd0>
 80078e4:	232d      	movs	r3, #45	@ 0x2d
 80078e6:	426d      	negs	r5, r5
 80078e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078ec:	4858      	ldr	r0, [pc, #352]	@ (8007a50 <_printf_i+0x234>)
 80078ee:	230a      	movs	r3, #10
 80078f0:	e011      	b.n	8007916 <_printf_i+0xfa>
 80078f2:	6821      	ldr	r1, [r4, #0]
 80078f4:	6833      	ldr	r3, [r6, #0]
 80078f6:	0608      	lsls	r0, r1, #24
 80078f8:	f853 5b04 	ldr.w	r5, [r3], #4
 80078fc:	d402      	bmi.n	8007904 <_printf_i+0xe8>
 80078fe:	0649      	lsls	r1, r1, #25
 8007900:	bf48      	it	mi
 8007902:	b2ad      	uxthmi	r5, r5
 8007904:	2f6f      	cmp	r7, #111	@ 0x6f
 8007906:	4852      	ldr	r0, [pc, #328]	@ (8007a50 <_printf_i+0x234>)
 8007908:	6033      	str	r3, [r6, #0]
 800790a:	bf14      	ite	ne
 800790c:	230a      	movne	r3, #10
 800790e:	2308      	moveq	r3, #8
 8007910:	2100      	movs	r1, #0
 8007912:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007916:	6866      	ldr	r6, [r4, #4]
 8007918:	60a6      	str	r6, [r4, #8]
 800791a:	2e00      	cmp	r6, #0
 800791c:	db05      	blt.n	800792a <_printf_i+0x10e>
 800791e:	6821      	ldr	r1, [r4, #0]
 8007920:	432e      	orrs	r6, r5
 8007922:	f021 0104 	bic.w	r1, r1, #4
 8007926:	6021      	str	r1, [r4, #0]
 8007928:	d04b      	beq.n	80079c2 <_printf_i+0x1a6>
 800792a:	4616      	mov	r6, r2
 800792c:	fbb5 f1f3 	udiv	r1, r5, r3
 8007930:	fb03 5711 	mls	r7, r3, r1, r5
 8007934:	5dc7      	ldrb	r7, [r0, r7]
 8007936:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800793a:	462f      	mov	r7, r5
 800793c:	42bb      	cmp	r3, r7
 800793e:	460d      	mov	r5, r1
 8007940:	d9f4      	bls.n	800792c <_printf_i+0x110>
 8007942:	2b08      	cmp	r3, #8
 8007944:	d10b      	bne.n	800795e <_printf_i+0x142>
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	07df      	lsls	r7, r3, #31
 800794a:	d508      	bpl.n	800795e <_printf_i+0x142>
 800794c:	6923      	ldr	r3, [r4, #16]
 800794e:	6861      	ldr	r1, [r4, #4]
 8007950:	4299      	cmp	r1, r3
 8007952:	bfde      	ittt	le
 8007954:	2330      	movle	r3, #48	@ 0x30
 8007956:	f806 3c01 	strble.w	r3, [r6, #-1]
 800795a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800795e:	1b92      	subs	r2, r2, r6
 8007960:	6122      	str	r2, [r4, #16]
 8007962:	f8cd a000 	str.w	sl, [sp]
 8007966:	464b      	mov	r3, r9
 8007968:	aa03      	add	r2, sp, #12
 800796a:	4621      	mov	r1, r4
 800796c:	4640      	mov	r0, r8
 800796e:	f7ff fee7 	bl	8007740 <_printf_common>
 8007972:	3001      	adds	r0, #1
 8007974:	d14a      	bne.n	8007a0c <_printf_i+0x1f0>
 8007976:	f04f 30ff 	mov.w	r0, #4294967295
 800797a:	b004      	add	sp, #16
 800797c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007980:	6823      	ldr	r3, [r4, #0]
 8007982:	f043 0320 	orr.w	r3, r3, #32
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	4832      	ldr	r0, [pc, #200]	@ (8007a54 <_printf_i+0x238>)
 800798a:	2778      	movs	r7, #120	@ 0x78
 800798c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007990:	6823      	ldr	r3, [r4, #0]
 8007992:	6831      	ldr	r1, [r6, #0]
 8007994:	061f      	lsls	r7, r3, #24
 8007996:	f851 5b04 	ldr.w	r5, [r1], #4
 800799a:	d402      	bmi.n	80079a2 <_printf_i+0x186>
 800799c:	065f      	lsls	r7, r3, #25
 800799e:	bf48      	it	mi
 80079a0:	b2ad      	uxthmi	r5, r5
 80079a2:	6031      	str	r1, [r6, #0]
 80079a4:	07d9      	lsls	r1, r3, #31
 80079a6:	bf44      	itt	mi
 80079a8:	f043 0320 	orrmi.w	r3, r3, #32
 80079ac:	6023      	strmi	r3, [r4, #0]
 80079ae:	b11d      	cbz	r5, 80079b8 <_printf_i+0x19c>
 80079b0:	2310      	movs	r3, #16
 80079b2:	e7ad      	b.n	8007910 <_printf_i+0xf4>
 80079b4:	4826      	ldr	r0, [pc, #152]	@ (8007a50 <_printf_i+0x234>)
 80079b6:	e7e9      	b.n	800798c <_printf_i+0x170>
 80079b8:	6823      	ldr	r3, [r4, #0]
 80079ba:	f023 0320 	bic.w	r3, r3, #32
 80079be:	6023      	str	r3, [r4, #0]
 80079c0:	e7f6      	b.n	80079b0 <_printf_i+0x194>
 80079c2:	4616      	mov	r6, r2
 80079c4:	e7bd      	b.n	8007942 <_printf_i+0x126>
 80079c6:	6833      	ldr	r3, [r6, #0]
 80079c8:	6825      	ldr	r5, [r4, #0]
 80079ca:	6961      	ldr	r1, [r4, #20]
 80079cc:	1d18      	adds	r0, r3, #4
 80079ce:	6030      	str	r0, [r6, #0]
 80079d0:	062e      	lsls	r6, r5, #24
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	d501      	bpl.n	80079da <_printf_i+0x1be>
 80079d6:	6019      	str	r1, [r3, #0]
 80079d8:	e002      	b.n	80079e0 <_printf_i+0x1c4>
 80079da:	0668      	lsls	r0, r5, #25
 80079dc:	d5fb      	bpl.n	80079d6 <_printf_i+0x1ba>
 80079de:	8019      	strh	r1, [r3, #0]
 80079e0:	2300      	movs	r3, #0
 80079e2:	6123      	str	r3, [r4, #16]
 80079e4:	4616      	mov	r6, r2
 80079e6:	e7bc      	b.n	8007962 <_printf_i+0x146>
 80079e8:	6833      	ldr	r3, [r6, #0]
 80079ea:	1d1a      	adds	r2, r3, #4
 80079ec:	6032      	str	r2, [r6, #0]
 80079ee:	681e      	ldr	r6, [r3, #0]
 80079f0:	6862      	ldr	r2, [r4, #4]
 80079f2:	2100      	movs	r1, #0
 80079f4:	4630      	mov	r0, r6
 80079f6:	f7f8 fbf3 	bl	80001e0 <memchr>
 80079fa:	b108      	cbz	r0, 8007a00 <_printf_i+0x1e4>
 80079fc:	1b80      	subs	r0, r0, r6
 80079fe:	6060      	str	r0, [r4, #4]
 8007a00:	6863      	ldr	r3, [r4, #4]
 8007a02:	6123      	str	r3, [r4, #16]
 8007a04:	2300      	movs	r3, #0
 8007a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a0a:	e7aa      	b.n	8007962 <_printf_i+0x146>
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	4632      	mov	r2, r6
 8007a10:	4649      	mov	r1, r9
 8007a12:	4640      	mov	r0, r8
 8007a14:	47d0      	blx	sl
 8007a16:	3001      	adds	r0, #1
 8007a18:	d0ad      	beq.n	8007976 <_printf_i+0x15a>
 8007a1a:	6823      	ldr	r3, [r4, #0]
 8007a1c:	079b      	lsls	r3, r3, #30
 8007a1e:	d413      	bmi.n	8007a48 <_printf_i+0x22c>
 8007a20:	68e0      	ldr	r0, [r4, #12]
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	4298      	cmp	r0, r3
 8007a26:	bfb8      	it	lt
 8007a28:	4618      	movlt	r0, r3
 8007a2a:	e7a6      	b.n	800797a <_printf_i+0x15e>
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	4632      	mov	r2, r6
 8007a30:	4649      	mov	r1, r9
 8007a32:	4640      	mov	r0, r8
 8007a34:	47d0      	blx	sl
 8007a36:	3001      	adds	r0, #1
 8007a38:	d09d      	beq.n	8007976 <_printf_i+0x15a>
 8007a3a:	3501      	adds	r5, #1
 8007a3c:	68e3      	ldr	r3, [r4, #12]
 8007a3e:	9903      	ldr	r1, [sp, #12]
 8007a40:	1a5b      	subs	r3, r3, r1
 8007a42:	42ab      	cmp	r3, r5
 8007a44:	dcf2      	bgt.n	8007a2c <_printf_i+0x210>
 8007a46:	e7eb      	b.n	8007a20 <_printf_i+0x204>
 8007a48:	2500      	movs	r5, #0
 8007a4a:	f104 0619 	add.w	r6, r4, #25
 8007a4e:	e7f5      	b.n	8007a3c <_printf_i+0x220>
 8007a50:	08009b6e 	.word	0x08009b6e
 8007a54:	08009b7f 	.word	0x08009b7f

08007a58 <std>:
 8007a58:	2300      	movs	r3, #0
 8007a5a:	b510      	push	{r4, lr}
 8007a5c:	4604      	mov	r4, r0
 8007a5e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a66:	6083      	str	r3, [r0, #8]
 8007a68:	8181      	strh	r1, [r0, #12]
 8007a6a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a6c:	81c2      	strh	r2, [r0, #14]
 8007a6e:	6183      	str	r3, [r0, #24]
 8007a70:	4619      	mov	r1, r3
 8007a72:	2208      	movs	r2, #8
 8007a74:	305c      	adds	r0, #92	@ 0x5c
 8007a76:	f000 f906 	bl	8007c86 <memset>
 8007a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab0 <std+0x58>)
 8007a7c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <std+0x5c>)
 8007a80:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a82:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab8 <std+0x60>)
 8007a84:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a86:	4b0d      	ldr	r3, [pc, #52]	@ (8007abc <std+0x64>)
 8007a88:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8007ac0 <std+0x68>)
 8007a8c:	6224      	str	r4, [r4, #32]
 8007a8e:	429c      	cmp	r4, r3
 8007a90:	d006      	beq.n	8007aa0 <std+0x48>
 8007a92:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a96:	4294      	cmp	r4, r2
 8007a98:	d002      	beq.n	8007aa0 <std+0x48>
 8007a9a:	33d0      	adds	r3, #208	@ 0xd0
 8007a9c:	429c      	cmp	r4, r3
 8007a9e:	d105      	bne.n	8007aac <std+0x54>
 8007aa0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007aa4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007aa8:	f000 b96a 	b.w	8007d80 <__retarget_lock_init_recursive>
 8007aac:	bd10      	pop	{r4, pc}
 8007aae:	bf00      	nop
 8007ab0:	08007c01 	.word	0x08007c01
 8007ab4:	08007c23 	.word	0x08007c23
 8007ab8:	08007c5b 	.word	0x08007c5b
 8007abc:	08007c7f 	.word	0x08007c7f
 8007ac0:	20000438 	.word	0x20000438

08007ac4 <stdio_exit_handler>:
 8007ac4:	4a02      	ldr	r2, [pc, #8]	@ (8007ad0 <stdio_exit_handler+0xc>)
 8007ac6:	4903      	ldr	r1, [pc, #12]	@ (8007ad4 <stdio_exit_handler+0x10>)
 8007ac8:	4803      	ldr	r0, [pc, #12]	@ (8007ad8 <stdio_exit_handler+0x14>)
 8007aca:	f000 b869 	b.w	8007ba0 <_fwalk_sglue>
 8007ace:	bf00      	nop
 8007ad0:	20000028 	.word	0x20000028
 8007ad4:	080096b9 	.word	0x080096b9
 8007ad8:	20000038 	.word	0x20000038

08007adc <cleanup_stdio>:
 8007adc:	6841      	ldr	r1, [r0, #4]
 8007ade:	4b0c      	ldr	r3, [pc, #48]	@ (8007b10 <cleanup_stdio+0x34>)
 8007ae0:	4299      	cmp	r1, r3
 8007ae2:	b510      	push	{r4, lr}
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	d001      	beq.n	8007aec <cleanup_stdio+0x10>
 8007ae8:	f001 fde6 	bl	80096b8 <_fflush_r>
 8007aec:	68a1      	ldr	r1, [r4, #8]
 8007aee:	4b09      	ldr	r3, [pc, #36]	@ (8007b14 <cleanup_stdio+0x38>)
 8007af0:	4299      	cmp	r1, r3
 8007af2:	d002      	beq.n	8007afa <cleanup_stdio+0x1e>
 8007af4:	4620      	mov	r0, r4
 8007af6:	f001 fddf 	bl	80096b8 <_fflush_r>
 8007afa:	68e1      	ldr	r1, [r4, #12]
 8007afc:	4b06      	ldr	r3, [pc, #24]	@ (8007b18 <cleanup_stdio+0x3c>)
 8007afe:	4299      	cmp	r1, r3
 8007b00:	d004      	beq.n	8007b0c <cleanup_stdio+0x30>
 8007b02:	4620      	mov	r0, r4
 8007b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b08:	f001 bdd6 	b.w	80096b8 <_fflush_r>
 8007b0c:	bd10      	pop	{r4, pc}
 8007b0e:	bf00      	nop
 8007b10:	20000438 	.word	0x20000438
 8007b14:	200004a0 	.word	0x200004a0
 8007b18:	20000508 	.word	0x20000508

08007b1c <global_stdio_init.part.0>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8007b4c <global_stdio_init.part.0+0x30>)
 8007b20:	4c0b      	ldr	r4, [pc, #44]	@ (8007b50 <global_stdio_init.part.0+0x34>)
 8007b22:	4a0c      	ldr	r2, [pc, #48]	@ (8007b54 <global_stdio_init.part.0+0x38>)
 8007b24:	601a      	str	r2, [r3, #0]
 8007b26:	4620      	mov	r0, r4
 8007b28:	2200      	movs	r2, #0
 8007b2a:	2104      	movs	r1, #4
 8007b2c:	f7ff ff94 	bl	8007a58 <std>
 8007b30:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b34:	2201      	movs	r2, #1
 8007b36:	2109      	movs	r1, #9
 8007b38:	f7ff ff8e 	bl	8007a58 <std>
 8007b3c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b40:	2202      	movs	r2, #2
 8007b42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b46:	2112      	movs	r1, #18
 8007b48:	f7ff bf86 	b.w	8007a58 <std>
 8007b4c:	20000570 	.word	0x20000570
 8007b50:	20000438 	.word	0x20000438
 8007b54:	08007ac5 	.word	0x08007ac5

08007b58 <__sfp_lock_acquire>:
 8007b58:	4801      	ldr	r0, [pc, #4]	@ (8007b60 <__sfp_lock_acquire+0x8>)
 8007b5a:	f000 b912 	b.w	8007d82 <__retarget_lock_acquire_recursive>
 8007b5e:	bf00      	nop
 8007b60:	20000579 	.word	0x20000579

08007b64 <__sfp_lock_release>:
 8007b64:	4801      	ldr	r0, [pc, #4]	@ (8007b6c <__sfp_lock_release+0x8>)
 8007b66:	f000 b90d 	b.w	8007d84 <__retarget_lock_release_recursive>
 8007b6a:	bf00      	nop
 8007b6c:	20000579 	.word	0x20000579

08007b70 <__sinit>:
 8007b70:	b510      	push	{r4, lr}
 8007b72:	4604      	mov	r4, r0
 8007b74:	f7ff fff0 	bl	8007b58 <__sfp_lock_acquire>
 8007b78:	6a23      	ldr	r3, [r4, #32]
 8007b7a:	b11b      	cbz	r3, 8007b84 <__sinit+0x14>
 8007b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b80:	f7ff bff0 	b.w	8007b64 <__sfp_lock_release>
 8007b84:	4b04      	ldr	r3, [pc, #16]	@ (8007b98 <__sinit+0x28>)
 8007b86:	6223      	str	r3, [r4, #32]
 8007b88:	4b04      	ldr	r3, [pc, #16]	@ (8007b9c <__sinit+0x2c>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d1f5      	bne.n	8007b7c <__sinit+0xc>
 8007b90:	f7ff ffc4 	bl	8007b1c <global_stdio_init.part.0>
 8007b94:	e7f2      	b.n	8007b7c <__sinit+0xc>
 8007b96:	bf00      	nop
 8007b98:	08007add 	.word	0x08007add
 8007b9c:	20000570 	.word	0x20000570

08007ba0 <_fwalk_sglue>:
 8007ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ba4:	4607      	mov	r7, r0
 8007ba6:	4688      	mov	r8, r1
 8007ba8:	4614      	mov	r4, r2
 8007baa:	2600      	movs	r6, #0
 8007bac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007bb0:	f1b9 0901 	subs.w	r9, r9, #1
 8007bb4:	d505      	bpl.n	8007bc2 <_fwalk_sglue+0x22>
 8007bb6:	6824      	ldr	r4, [r4, #0]
 8007bb8:	2c00      	cmp	r4, #0
 8007bba:	d1f7      	bne.n	8007bac <_fwalk_sglue+0xc>
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007bc2:	89ab      	ldrh	r3, [r5, #12]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d907      	bls.n	8007bd8 <_fwalk_sglue+0x38>
 8007bc8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bcc:	3301      	adds	r3, #1
 8007bce:	d003      	beq.n	8007bd8 <_fwalk_sglue+0x38>
 8007bd0:	4629      	mov	r1, r5
 8007bd2:	4638      	mov	r0, r7
 8007bd4:	47c0      	blx	r8
 8007bd6:	4306      	orrs	r6, r0
 8007bd8:	3568      	adds	r5, #104	@ 0x68
 8007bda:	e7e9      	b.n	8007bb0 <_fwalk_sglue+0x10>

08007bdc <iprintf>:
 8007bdc:	b40f      	push	{r0, r1, r2, r3}
 8007bde:	b507      	push	{r0, r1, r2, lr}
 8007be0:	4906      	ldr	r1, [pc, #24]	@ (8007bfc <iprintf+0x20>)
 8007be2:	ab04      	add	r3, sp, #16
 8007be4:	6808      	ldr	r0, [r1, #0]
 8007be6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bea:	6881      	ldr	r1, [r0, #8]
 8007bec:	9301      	str	r3, [sp, #4]
 8007bee:	f001 fbc7 	bl	8009380 <_vfiprintf_r>
 8007bf2:	b003      	add	sp, #12
 8007bf4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bf8:	b004      	add	sp, #16
 8007bfa:	4770      	bx	lr
 8007bfc:	20000034 	.word	0x20000034

08007c00 <__sread>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	460c      	mov	r4, r1
 8007c04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c08:	f000 f86c 	bl	8007ce4 <_read_r>
 8007c0c:	2800      	cmp	r0, #0
 8007c0e:	bfab      	itete	ge
 8007c10:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007c12:	89a3      	ldrhlt	r3, [r4, #12]
 8007c14:	181b      	addge	r3, r3, r0
 8007c16:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007c1a:	bfac      	ite	ge
 8007c1c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007c1e:	81a3      	strhlt	r3, [r4, #12]
 8007c20:	bd10      	pop	{r4, pc}

08007c22 <__swrite>:
 8007c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c26:	461f      	mov	r7, r3
 8007c28:	898b      	ldrh	r3, [r1, #12]
 8007c2a:	05db      	lsls	r3, r3, #23
 8007c2c:	4605      	mov	r5, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	4616      	mov	r6, r2
 8007c32:	d505      	bpl.n	8007c40 <__swrite+0x1e>
 8007c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c38:	2302      	movs	r3, #2
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f000 f840 	bl	8007cc0 <_lseek_r>
 8007c40:	89a3      	ldrh	r3, [r4, #12]
 8007c42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c46:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007c4a:	81a3      	strh	r3, [r4, #12]
 8007c4c:	4632      	mov	r2, r6
 8007c4e:	463b      	mov	r3, r7
 8007c50:	4628      	mov	r0, r5
 8007c52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c56:	f000 b857 	b.w	8007d08 <_write_r>

08007c5a <__sseek>:
 8007c5a:	b510      	push	{r4, lr}
 8007c5c:	460c      	mov	r4, r1
 8007c5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c62:	f000 f82d 	bl	8007cc0 <_lseek_r>
 8007c66:	1c43      	adds	r3, r0, #1
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	bf15      	itete	ne
 8007c6c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007c6e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007c72:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007c76:	81a3      	strheq	r3, [r4, #12]
 8007c78:	bf18      	it	ne
 8007c7a:	81a3      	strhne	r3, [r4, #12]
 8007c7c:	bd10      	pop	{r4, pc}

08007c7e <__sclose>:
 8007c7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c82:	f000 b80d 	b.w	8007ca0 <_close_r>

08007c86 <memset>:
 8007c86:	4402      	add	r2, r0
 8007c88:	4603      	mov	r3, r0
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d100      	bne.n	8007c90 <memset+0xa>
 8007c8e:	4770      	bx	lr
 8007c90:	f803 1b01 	strb.w	r1, [r3], #1
 8007c94:	e7f9      	b.n	8007c8a <memset+0x4>
	...

08007c98 <_localeconv_r>:
 8007c98:	4800      	ldr	r0, [pc, #0]	@ (8007c9c <_localeconv_r+0x4>)
 8007c9a:	4770      	bx	lr
 8007c9c:	20000174 	.word	0x20000174

08007ca0 <_close_r>:
 8007ca0:	b538      	push	{r3, r4, r5, lr}
 8007ca2:	4d06      	ldr	r5, [pc, #24]	@ (8007cbc <_close_r+0x1c>)
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	4604      	mov	r4, r0
 8007ca8:	4608      	mov	r0, r1
 8007caa:	602b      	str	r3, [r5, #0]
 8007cac:	f7f9 fed6 	bl	8001a5c <_close>
 8007cb0:	1c43      	adds	r3, r0, #1
 8007cb2:	d102      	bne.n	8007cba <_close_r+0x1a>
 8007cb4:	682b      	ldr	r3, [r5, #0]
 8007cb6:	b103      	cbz	r3, 8007cba <_close_r+0x1a>
 8007cb8:	6023      	str	r3, [r4, #0]
 8007cba:	bd38      	pop	{r3, r4, r5, pc}
 8007cbc:	20000574 	.word	0x20000574

08007cc0 <_lseek_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	4d07      	ldr	r5, [pc, #28]	@ (8007ce0 <_lseek_r+0x20>)
 8007cc4:	4604      	mov	r4, r0
 8007cc6:	4608      	mov	r0, r1
 8007cc8:	4611      	mov	r1, r2
 8007cca:	2200      	movs	r2, #0
 8007ccc:	602a      	str	r2, [r5, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f7f9 feeb 	bl	8001aaa <_lseek>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	d102      	bne.n	8007cde <_lseek_r+0x1e>
 8007cd8:	682b      	ldr	r3, [r5, #0]
 8007cda:	b103      	cbz	r3, 8007cde <_lseek_r+0x1e>
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	bd38      	pop	{r3, r4, r5, pc}
 8007ce0:	20000574 	.word	0x20000574

08007ce4 <_read_r>:
 8007ce4:	b538      	push	{r3, r4, r5, lr}
 8007ce6:	4d07      	ldr	r5, [pc, #28]	@ (8007d04 <_read_r+0x20>)
 8007ce8:	4604      	mov	r4, r0
 8007cea:	4608      	mov	r0, r1
 8007cec:	4611      	mov	r1, r2
 8007cee:	2200      	movs	r2, #0
 8007cf0:	602a      	str	r2, [r5, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	f7f9 fe79 	bl	80019ea <_read>
 8007cf8:	1c43      	adds	r3, r0, #1
 8007cfa:	d102      	bne.n	8007d02 <_read_r+0x1e>
 8007cfc:	682b      	ldr	r3, [r5, #0]
 8007cfe:	b103      	cbz	r3, 8007d02 <_read_r+0x1e>
 8007d00:	6023      	str	r3, [r4, #0]
 8007d02:	bd38      	pop	{r3, r4, r5, pc}
 8007d04:	20000574 	.word	0x20000574

08007d08 <_write_r>:
 8007d08:	b538      	push	{r3, r4, r5, lr}
 8007d0a:	4d07      	ldr	r5, [pc, #28]	@ (8007d28 <_write_r+0x20>)
 8007d0c:	4604      	mov	r4, r0
 8007d0e:	4608      	mov	r0, r1
 8007d10:	4611      	mov	r1, r2
 8007d12:	2200      	movs	r2, #0
 8007d14:	602a      	str	r2, [r5, #0]
 8007d16:	461a      	mov	r2, r3
 8007d18:	f7f9 fe84 	bl	8001a24 <_write>
 8007d1c:	1c43      	adds	r3, r0, #1
 8007d1e:	d102      	bne.n	8007d26 <_write_r+0x1e>
 8007d20:	682b      	ldr	r3, [r5, #0]
 8007d22:	b103      	cbz	r3, 8007d26 <_write_r+0x1e>
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	bd38      	pop	{r3, r4, r5, pc}
 8007d28:	20000574 	.word	0x20000574

08007d2c <__errno>:
 8007d2c:	4b01      	ldr	r3, [pc, #4]	@ (8007d34 <__errno+0x8>)
 8007d2e:	6818      	ldr	r0, [r3, #0]
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000034 	.word	0x20000034

08007d38 <__libc_init_array>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	4d0d      	ldr	r5, [pc, #52]	@ (8007d70 <__libc_init_array+0x38>)
 8007d3c:	4c0d      	ldr	r4, [pc, #52]	@ (8007d74 <__libc_init_array+0x3c>)
 8007d3e:	1b64      	subs	r4, r4, r5
 8007d40:	10a4      	asrs	r4, r4, #2
 8007d42:	2600      	movs	r6, #0
 8007d44:	42a6      	cmp	r6, r4
 8007d46:	d109      	bne.n	8007d5c <__libc_init_array+0x24>
 8007d48:	4d0b      	ldr	r5, [pc, #44]	@ (8007d78 <__libc_init_array+0x40>)
 8007d4a:	4c0c      	ldr	r4, [pc, #48]	@ (8007d7c <__libc_init_array+0x44>)
 8007d4c:	f001 fec2 	bl	8009ad4 <_init>
 8007d50:	1b64      	subs	r4, r4, r5
 8007d52:	10a4      	asrs	r4, r4, #2
 8007d54:	2600      	movs	r6, #0
 8007d56:	42a6      	cmp	r6, r4
 8007d58:	d105      	bne.n	8007d66 <__libc_init_array+0x2e>
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d60:	4798      	blx	r3
 8007d62:	3601      	adds	r6, #1
 8007d64:	e7ee      	b.n	8007d44 <__libc_init_array+0xc>
 8007d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6a:	4798      	blx	r3
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	e7f2      	b.n	8007d56 <__libc_init_array+0x1e>
 8007d70:	08009edc 	.word	0x08009edc
 8007d74:	08009edc 	.word	0x08009edc
 8007d78:	08009edc 	.word	0x08009edc
 8007d7c:	08009ee0 	.word	0x08009ee0

08007d80 <__retarget_lock_init_recursive>:
 8007d80:	4770      	bx	lr

08007d82 <__retarget_lock_acquire_recursive>:
 8007d82:	4770      	bx	lr

08007d84 <__retarget_lock_release_recursive>:
 8007d84:	4770      	bx	lr

08007d86 <quorem>:
 8007d86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d8a:	6903      	ldr	r3, [r0, #16]
 8007d8c:	690c      	ldr	r4, [r1, #16]
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	4607      	mov	r7, r0
 8007d92:	db7e      	blt.n	8007e92 <quorem+0x10c>
 8007d94:	3c01      	subs	r4, #1
 8007d96:	f101 0814 	add.w	r8, r1, #20
 8007d9a:	00a3      	lsls	r3, r4, #2
 8007d9c:	f100 0514 	add.w	r5, r0, #20
 8007da0:	9300      	str	r3, [sp, #0]
 8007da2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007da6:	9301      	str	r3, [sp, #4]
 8007da8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007dac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007db0:	3301      	adds	r3, #1
 8007db2:	429a      	cmp	r2, r3
 8007db4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007db8:	fbb2 f6f3 	udiv	r6, r2, r3
 8007dbc:	d32e      	bcc.n	8007e1c <quorem+0x96>
 8007dbe:	f04f 0a00 	mov.w	sl, #0
 8007dc2:	46c4      	mov	ip, r8
 8007dc4:	46ae      	mov	lr, r5
 8007dc6:	46d3      	mov	fp, sl
 8007dc8:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007dcc:	b298      	uxth	r0, r3
 8007dce:	fb06 a000 	mla	r0, r6, r0, sl
 8007dd2:	0c02      	lsrs	r2, r0, #16
 8007dd4:	0c1b      	lsrs	r3, r3, #16
 8007dd6:	fb06 2303 	mla	r3, r6, r3, r2
 8007dda:	f8de 2000 	ldr.w	r2, [lr]
 8007dde:	b280      	uxth	r0, r0
 8007de0:	b292      	uxth	r2, r2
 8007de2:	1a12      	subs	r2, r2, r0
 8007de4:	445a      	add	r2, fp
 8007de6:	f8de 0000 	ldr.w	r0, [lr]
 8007dea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007df4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007df8:	b292      	uxth	r2, r2
 8007dfa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007dfe:	45e1      	cmp	r9, ip
 8007e00:	f84e 2b04 	str.w	r2, [lr], #4
 8007e04:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007e08:	d2de      	bcs.n	8007dc8 <quorem+0x42>
 8007e0a:	9b00      	ldr	r3, [sp, #0]
 8007e0c:	58eb      	ldr	r3, [r5, r3]
 8007e0e:	b92b      	cbnz	r3, 8007e1c <quorem+0x96>
 8007e10:	9b01      	ldr	r3, [sp, #4]
 8007e12:	3b04      	subs	r3, #4
 8007e14:	429d      	cmp	r5, r3
 8007e16:	461a      	mov	r2, r3
 8007e18:	d32f      	bcc.n	8007e7a <quorem+0xf4>
 8007e1a:	613c      	str	r4, [r7, #16]
 8007e1c:	4638      	mov	r0, r7
 8007e1e:	f001 f97d 	bl	800911c <__mcmp>
 8007e22:	2800      	cmp	r0, #0
 8007e24:	db25      	blt.n	8007e72 <quorem+0xec>
 8007e26:	4629      	mov	r1, r5
 8007e28:	2000      	movs	r0, #0
 8007e2a:	f858 2b04 	ldr.w	r2, [r8], #4
 8007e2e:	f8d1 c000 	ldr.w	ip, [r1]
 8007e32:	fa1f fe82 	uxth.w	lr, r2
 8007e36:	fa1f f38c 	uxth.w	r3, ip
 8007e3a:	eba3 030e 	sub.w	r3, r3, lr
 8007e3e:	4403      	add	r3, r0
 8007e40:	0c12      	lsrs	r2, r2, #16
 8007e42:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007e46:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007e4a:	b29b      	uxth	r3, r3
 8007e4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e50:	45c1      	cmp	r9, r8
 8007e52:	f841 3b04 	str.w	r3, [r1], #4
 8007e56:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007e5a:	d2e6      	bcs.n	8007e2a <quorem+0xa4>
 8007e5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e64:	b922      	cbnz	r2, 8007e70 <quorem+0xea>
 8007e66:	3b04      	subs	r3, #4
 8007e68:	429d      	cmp	r5, r3
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	d30b      	bcc.n	8007e86 <quorem+0x100>
 8007e6e:	613c      	str	r4, [r7, #16]
 8007e70:	3601      	adds	r6, #1
 8007e72:	4630      	mov	r0, r6
 8007e74:	b003      	add	sp, #12
 8007e76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e7a:	6812      	ldr	r2, [r2, #0]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	2a00      	cmp	r2, #0
 8007e80:	d1cb      	bne.n	8007e1a <quorem+0x94>
 8007e82:	3c01      	subs	r4, #1
 8007e84:	e7c6      	b.n	8007e14 <quorem+0x8e>
 8007e86:	6812      	ldr	r2, [r2, #0]
 8007e88:	3b04      	subs	r3, #4
 8007e8a:	2a00      	cmp	r2, #0
 8007e8c:	d1ef      	bne.n	8007e6e <quorem+0xe8>
 8007e8e:	3c01      	subs	r4, #1
 8007e90:	e7ea      	b.n	8007e68 <quorem+0xe2>
 8007e92:	2000      	movs	r0, #0
 8007e94:	e7ee      	b.n	8007e74 <quorem+0xee>
	...

08007e98 <_dtoa_r>:
 8007e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e9c:	69c7      	ldr	r7, [r0, #28]
 8007e9e:	b097      	sub	sp, #92	@ 0x5c
 8007ea0:	ed8d 0b04 	vstr	d0, [sp, #16]
 8007ea4:	ec55 4b10 	vmov	r4, r5, d0
 8007ea8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8007eaa:	9107      	str	r1, [sp, #28]
 8007eac:	4681      	mov	r9, r0
 8007eae:	920c      	str	r2, [sp, #48]	@ 0x30
 8007eb0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007eb2:	b97f      	cbnz	r7, 8007ed4 <_dtoa_r+0x3c>
 8007eb4:	2010      	movs	r0, #16
 8007eb6:	f000 fe09 	bl	8008acc <malloc>
 8007eba:	4602      	mov	r2, r0
 8007ebc:	f8c9 001c 	str.w	r0, [r9, #28]
 8007ec0:	b920      	cbnz	r0, 8007ecc <_dtoa_r+0x34>
 8007ec2:	4ba9      	ldr	r3, [pc, #676]	@ (8008168 <_dtoa_r+0x2d0>)
 8007ec4:	21ef      	movs	r1, #239	@ 0xef
 8007ec6:	48a9      	ldr	r0, [pc, #676]	@ (800816c <_dtoa_r+0x2d4>)
 8007ec8:	f001 fcd0 	bl	800986c <__assert_func>
 8007ecc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007ed0:	6007      	str	r7, [r0, #0]
 8007ed2:	60c7      	str	r7, [r0, #12]
 8007ed4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ed8:	6819      	ldr	r1, [r3, #0]
 8007eda:	b159      	cbz	r1, 8007ef4 <_dtoa_r+0x5c>
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	604a      	str	r2, [r1, #4]
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	4093      	lsls	r3, r2
 8007ee4:	608b      	str	r3, [r1, #8]
 8007ee6:	4648      	mov	r0, r9
 8007ee8:	f000 fee6 	bl	8008cb8 <_Bfree>
 8007eec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	601a      	str	r2, [r3, #0]
 8007ef4:	1e2b      	subs	r3, r5, #0
 8007ef6:	bfb9      	ittee	lt
 8007ef8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007efc:	9305      	strlt	r3, [sp, #20]
 8007efe:	2300      	movge	r3, #0
 8007f00:	6033      	strge	r3, [r6, #0]
 8007f02:	9f05      	ldr	r7, [sp, #20]
 8007f04:	4b9a      	ldr	r3, [pc, #616]	@ (8008170 <_dtoa_r+0x2d8>)
 8007f06:	bfbc      	itt	lt
 8007f08:	2201      	movlt	r2, #1
 8007f0a:	6032      	strlt	r2, [r6, #0]
 8007f0c:	43bb      	bics	r3, r7
 8007f0e:	d112      	bne.n	8007f36 <_dtoa_r+0x9e>
 8007f10:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f12:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f1c:	4323      	orrs	r3, r4
 8007f1e:	f000 855a 	beq.w	80089d6 <_dtoa_r+0xb3e>
 8007f22:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f24:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8008184 <_dtoa_r+0x2ec>
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 855c 	beq.w	80089e6 <_dtoa_r+0xb4e>
 8007f2e:	f10a 0303 	add.w	r3, sl, #3
 8007f32:	f000 bd56 	b.w	80089e2 <_dtoa_r+0xb4a>
 8007f36:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	ec51 0b17 	vmov	r0, r1, d7
 8007f40:	2300      	movs	r3, #0
 8007f42:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007f46:	f7f8 fdc7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f4a:	4680      	mov	r8, r0
 8007f4c:	b158      	cbz	r0, 8007f66 <_dtoa_r+0xce>
 8007f4e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007f50:	2301      	movs	r3, #1
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f56:	b113      	cbz	r3, 8007f5e <_dtoa_r+0xc6>
 8007f58:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007f5a:	4b86      	ldr	r3, [pc, #536]	@ (8008174 <_dtoa_r+0x2dc>)
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008188 <_dtoa_r+0x2f0>
 8007f62:	f000 bd40 	b.w	80089e6 <_dtoa_r+0xb4e>
 8007f66:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007f6a:	aa14      	add	r2, sp, #80	@ 0x50
 8007f6c:	a915      	add	r1, sp, #84	@ 0x54
 8007f6e:	4648      	mov	r0, r9
 8007f70:	f001 f984 	bl	800927c <__d2b>
 8007f74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007f78:	9002      	str	r0, [sp, #8]
 8007f7a:	2e00      	cmp	r6, #0
 8007f7c:	d078      	beq.n	8008070 <_dtoa_r+0x1d8>
 8007f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f80:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007f84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007f8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007f90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007f94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007f98:	4619      	mov	r1, r3
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	4b76      	ldr	r3, [pc, #472]	@ (8008178 <_dtoa_r+0x2e0>)
 8007f9e:	f7f8 f97b 	bl	8000298 <__aeabi_dsub>
 8007fa2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008150 <_dtoa_r+0x2b8>)
 8007fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa8:	f7f8 fb2e 	bl	8000608 <__aeabi_dmul>
 8007fac:	a36a      	add	r3, pc, #424	@ (adr r3, 8008158 <_dtoa_r+0x2c0>)
 8007fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb2:	f7f8 f973 	bl	800029c <__adddf3>
 8007fb6:	4604      	mov	r4, r0
 8007fb8:	4630      	mov	r0, r6
 8007fba:	460d      	mov	r5, r1
 8007fbc:	f7f8 faba 	bl	8000534 <__aeabi_i2d>
 8007fc0:	a367      	add	r3, pc, #412	@ (adr r3, 8008160 <_dtoa_r+0x2c8>)
 8007fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fc6:	f7f8 fb1f 	bl	8000608 <__aeabi_dmul>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4620      	mov	r0, r4
 8007fd0:	4629      	mov	r1, r5
 8007fd2:	f7f8 f963 	bl	800029c <__adddf3>
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	460d      	mov	r5, r1
 8007fda:	f7f8 fdc5 	bl	8000b68 <__aeabi_d2iz>
 8007fde:	2200      	movs	r2, #0
 8007fe0:	4607      	mov	r7, r0
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	4629      	mov	r1, r5
 8007fe8:	f7f8 fd80 	bl	8000aec <__aeabi_dcmplt>
 8007fec:	b140      	cbz	r0, 8008000 <_dtoa_r+0x168>
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f7f8 faa0 	bl	8000534 <__aeabi_i2d>
 8007ff4:	4622      	mov	r2, r4
 8007ff6:	462b      	mov	r3, r5
 8007ff8:	f7f8 fd6e 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ffc:	b900      	cbnz	r0, 8008000 <_dtoa_r+0x168>
 8007ffe:	3f01      	subs	r7, #1
 8008000:	2f16      	cmp	r7, #22
 8008002:	d852      	bhi.n	80080aa <_dtoa_r+0x212>
 8008004:	4b5d      	ldr	r3, [pc, #372]	@ (800817c <_dtoa_r+0x2e4>)
 8008006:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008012:	f7f8 fd6b 	bl	8000aec <__aeabi_dcmplt>
 8008016:	2800      	cmp	r0, #0
 8008018:	d049      	beq.n	80080ae <_dtoa_r+0x216>
 800801a:	3f01      	subs	r7, #1
 800801c:	2300      	movs	r3, #0
 800801e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008020:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008022:	1b9b      	subs	r3, r3, r6
 8008024:	1e5a      	subs	r2, r3, #1
 8008026:	bf45      	ittet	mi
 8008028:	f1c3 0301 	rsbmi	r3, r3, #1
 800802c:	9300      	strmi	r3, [sp, #0]
 800802e:	2300      	movpl	r3, #0
 8008030:	2300      	movmi	r3, #0
 8008032:	9206      	str	r2, [sp, #24]
 8008034:	bf54      	ite	pl
 8008036:	9300      	strpl	r3, [sp, #0]
 8008038:	9306      	strmi	r3, [sp, #24]
 800803a:	2f00      	cmp	r7, #0
 800803c:	db39      	blt.n	80080b2 <_dtoa_r+0x21a>
 800803e:	9b06      	ldr	r3, [sp, #24]
 8008040:	970d      	str	r7, [sp, #52]	@ 0x34
 8008042:	443b      	add	r3, r7
 8008044:	9306      	str	r3, [sp, #24]
 8008046:	2300      	movs	r3, #0
 8008048:	9308      	str	r3, [sp, #32]
 800804a:	9b07      	ldr	r3, [sp, #28]
 800804c:	2b09      	cmp	r3, #9
 800804e:	d863      	bhi.n	8008118 <_dtoa_r+0x280>
 8008050:	2b05      	cmp	r3, #5
 8008052:	bfc4      	itt	gt
 8008054:	3b04      	subgt	r3, #4
 8008056:	9307      	strgt	r3, [sp, #28]
 8008058:	9b07      	ldr	r3, [sp, #28]
 800805a:	f1a3 0302 	sub.w	r3, r3, #2
 800805e:	bfcc      	ite	gt
 8008060:	2400      	movgt	r4, #0
 8008062:	2401      	movle	r4, #1
 8008064:	2b03      	cmp	r3, #3
 8008066:	d863      	bhi.n	8008130 <_dtoa_r+0x298>
 8008068:	e8df f003 	tbb	[pc, r3]
 800806c:	2b375452 	.word	0x2b375452
 8008070:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008074:	441e      	add	r6, r3
 8008076:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800807a:	2b20      	cmp	r3, #32
 800807c:	bfc1      	itttt	gt
 800807e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008082:	409f      	lslgt	r7, r3
 8008084:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008088:	fa24 f303 	lsrgt.w	r3, r4, r3
 800808c:	bfd6      	itet	le
 800808e:	f1c3 0320 	rsble	r3, r3, #32
 8008092:	ea47 0003 	orrgt.w	r0, r7, r3
 8008096:	fa04 f003 	lslle.w	r0, r4, r3
 800809a:	f7f8 fa3b 	bl	8000514 <__aeabi_ui2d>
 800809e:	2201      	movs	r2, #1
 80080a0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80080a4:	3e01      	subs	r6, #1
 80080a6:	9212      	str	r2, [sp, #72]	@ 0x48
 80080a8:	e776      	b.n	8007f98 <_dtoa_r+0x100>
 80080aa:	2301      	movs	r3, #1
 80080ac:	e7b7      	b.n	800801e <_dtoa_r+0x186>
 80080ae:	9010      	str	r0, [sp, #64]	@ 0x40
 80080b0:	e7b6      	b.n	8008020 <_dtoa_r+0x188>
 80080b2:	9b00      	ldr	r3, [sp, #0]
 80080b4:	1bdb      	subs	r3, r3, r7
 80080b6:	9300      	str	r3, [sp, #0]
 80080b8:	427b      	negs	r3, r7
 80080ba:	9308      	str	r3, [sp, #32]
 80080bc:	2300      	movs	r3, #0
 80080be:	930d      	str	r3, [sp, #52]	@ 0x34
 80080c0:	e7c3      	b.n	800804a <_dtoa_r+0x1b2>
 80080c2:	2301      	movs	r3, #1
 80080c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80080c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080c8:	eb07 0b03 	add.w	fp, r7, r3
 80080cc:	f10b 0301 	add.w	r3, fp, #1
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	9303      	str	r3, [sp, #12]
 80080d4:	bfb8      	it	lt
 80080d6:	2301      	movlt	r3, #1
 80080d8:	e006      	b.n	80080e8 <_dtoa_r+0x250>
 80080da:	2301      	movs	r3, #1
 80080dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80080de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dd28      	ble.n	8008136 <_dtoa_r+0x29e>
 80080e4:	469b      	mov	fp, r3
 80080e6:	9303      	str	r3, [sp, #12]
 80080e8:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80080ec:	2100      	movs	r1, #0
 80080ee:	2204      	movs	r2, #4
 80080f0:	f102 0514 	add.w	r5, r2, #20
 80080f4:	429d      	cmp	r5, r3
 80080f6:	d926      	bls.n	8008146 <_dtoa_r+0x2ae>
 80080f8:	6041      	str	r1, [r0, #4]
 80080fa:	4648      	mov	r0, r9
 80080fc:	f000 fd9c 	bl	8008c38 <_Balloc>
 8008100:	4682      	mov	sl, r0
 8008102:	2800      	cmp	r0, #0
 8008104:	d142      	bne.n	800818c <_dtoa_r+0x2f4>
 8008106:	4b1e      	ldr	r3, [pc, #120]	@ (8008180 <_dtoa_r+0x2e8>)
 8008108:	4602      	mov	r2, r0
 800810a:	f240 11af 	movw	r1, #431	@ 0x1af
 800810e:	e6da      	b.n	8007ec6 <_dtoa_r+0x2e>
 8008110:	2300      	movs	r3, #0
 8008112:	e7e3      	b.n	80080dc <_dtoa_r+0x244>
 8008114:	2300      	movs	r3, #0
 8008116:	e7d5      	b.n	80080c4 <_dtoa_r+0x22c>
 8008118:	2401      	movs	r4, #1
 800811a:	2300      	movs	r3, #0
 800811c:	9307      	str	r3, [sp, #28]
 800811e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008120:	f04f 3bff 	mov.w	fp, #4294967295
 8008124:	2200      	movs	r2, #0
 8008126:	f8cd b00c 	str.w	fp, [sp, #12]
 800812a:	2312      	movs	r3, #18
 800812c:	920c      	str	r2, [sp, #48]	@ 0x30
 800812e:	e7db      	b.n	80080e8 <_dtoa_r+0x250>
 8008130:	2301      	movs	r3, #1
 8008132:	9309      	str	r3, [sp, #36]	@ 0x24
 8008134:	e7f4      	b.n	8008120 <_dtoa_r+0x288>
 8008136:	f04f 0b01 	mov.w	fp, #1
 800813a:	f8cd b00c 	str.w	fp, [sp, #12]
 800813e:	465b      	mov	r3, fp
 8008140:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008144:	e7d0      	b.n	80080e8 <_dtoa_r+0x250>
 8008146:	3101      	adds	r1, #1
 8008148:	0052      	lsls	r2, r2, #1
 800814a:	e7d1      	b.n	80080f0 <_dtoa_r+0x258>
 800814c:	f3af 8000 	nop.w
 8008150:	636f4361 	.word	0x636f4361
 8008154:	3fd287a7 	.word	0x3fd287a7
 8008158:	8b60c8b3 	.word	0x8b60c8b3
 800815c:	3fc68a28 	.word	0x3fc68a28
 8008160:	509f79fb 	.word	0x509f79fb
 8008164:	3fd34413 	.word	0x3fd34413
 8008168:	08009b9d 	.word	0x08009b9d
 800816c:	08009bb4 	.word	0x08009bb4
 8008170:	7ff00000 	.word	0x7ff00000
 8008174:	08009b6d 	.word	0x08009b6d
 8008178:	3ff80000 	.word	0x3ff80000
 800817c:	08009d08 	.word	0x08009d08
 8008180:	08009c0c 	.word	0x08009c0c
 8008184:	08009b99 	.word	0x08009b99
 8008188:	08009b6c 	.word	0x08009b6c
 800818c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008190:	6018      	str	r0, [r3, #0]
 8008192:	9b03      	ldr	r3, [sp, #12]
 8008194:	2b0e      	cmp	r3, #14
 8008196:	f200 80a1 	bhi.w	80082dc <_dtoa_r+0x444>
 800819a:	2c00      	cmp	r4, #0
 800819c:	f000 809e 	beq.w	80082dc <_dtoa_r+0x444>
 80081a0:	2f00      	cmp	r7, #0
 80081a2:	dd33      	ble.n	800820c <_dtoa_r+0x374>
 80081a4:	4b9c      	ldr	r3, [pc, #624]	@ (8008418 <_dtoa_r+0x580>)
 80081a6:	f007 020f 	and.w	r2, r7, #15
 80081aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081ae:	ed93 7b00 	vldr	d7, [r3]
 80081b2:	05f8      	lsls	r0, r7, #23
 80081b4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80081b8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80081bc:	d516      	bpl.n	80081ec <_dtoa_r+0x354>
 80081be:	4b97      	ldr	r3, [pc, #604]	@ (800841c <_dtoa_r+0x584>)
 80081c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80081c4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081c8:	f7f8 fb48 	bl	800085c <__aeabi_ddiv>
 80081cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081d0:	f004 040f 	and.w	r4, r4, #15
 80081d4:	2603      	movs	r6, #3
 80081d6:	4d91      	ldr	r5, [pc, #580]	@ (800841c <_dtoa_r+0x584>)
 80081d8:	b954      	cbnz	r4, 80081f0 <_dtoa_r+0x358>
 80081da:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80081de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081e2:	f7f8 fb3b 	bl	800085c <__aeabi_ddiv>
 80081e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081ea:	e028      	b.n	800823e <_dtoa_r+0x3a6>
 80081ec:	2602      	movs	r6, #2
 80081ee:	e7f2      	b.n	80081d6 <_dtoa_r+0x33e>
 80081f0:	07e1      	lsls	r1, r4, #31
 80081f2:	d508      	bpl.n	8008206 <_dtoa_r+0x36e>
 80081f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80081f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80081fc:	f7f8 fa04 	bl	8000608 <__aeabi_dmul>
 8008200:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008204:	3601      	adds	r6, #1
 8008206:	1064      	asrs	r4, r4, #1
 8008208:	3508      	adds	r5, #8
 800820a:	e7e5      	b.n	80081d8 <_dtoa_r+0x340>
 800820c:	f000 80af 	beq.w	800836e <_dtoa_r+0x4d6>
 8008210:	427c      	negs	r4, r7
 8008212:	4b81      	ldr	r3, [pc, #516]	@ (8008418 <_dtoa_r+0x580>)
 8008214:	4d81      	ldr	r5, [pc, #516]	@ (800841c <_dtoa_r+0x584>)
 8008216:	f004 020f 	and.w	r2, r4, #15
 800821a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008226:	f7f8 f9ef 	bl	8000608 <__aeabi_dmul>
 800822a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800822e:	1124      	asrs	r4, r4, #4
 8008230:	2300      	movs	r3, #0
 8008232:	2602      	movs	r6, #2
 8008234:	2c00      	cmp	r4, #0
 8008236:	f040 808f 	bne.w	8008358 <_dtoa_r+0x4c0>
 800823a:	2b00      	cmp	r3, #0
 800823c:	d1d3      	bne.n	80081e6 <_dtoa_r+0x34e>
 800823e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008240:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	f000 8094 	beq.w	8008372 <_dtoa_r+0x4da>
 800824a:	4b75      	ldr	r3, [pc, #468]	@ (8008420 <_dtoa_r+0x588>)
 800824c:	2200      	movs	r2, #0
 800824e:	4620      	mov	r0, r4
 8008250:	4629      	mov	r1, r5
 8008252:	f7f8 fc4b 	bl	8000aec <__aeabi_dcmplt>
 8008256:	2800      	cmp	r0, #0
 8008258:	f000 808b 	beq.w	8008372 <_dtoa_r+0x4da>
 800825c:	9b03      	ldr	r3, [sp, #12]
 800825e:	2b00      	cmp	r3, #0
 8008260:	f000 8087 	beq.w	8008372 <_dtoa_r+0x4da>
 8008264:	f1bb 0f00 	cmp.w	fp, #0
 8008268:	dd34      	ble.n	80082d4 <_dtoa_r+0x43c>
 800826a:	4620      	mov	r0, r4
 800826c:	4b6d      	ldr	r3, [pc, #436]	@ (8008424 <_dtoa_r+0x58c>)
 800826e:	2200      	movs	r2, #0
 8008270:	4629      	mov	r1, r5
 8008272:	f7f8 f9c9 	bl	8000608 <__aeabi_dmul>
 8008276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800827a:	f107 38ff 	add.w	r8, r7, #4294967295
 800827e:	3601      	adds	r6, #1
 8008280:	465c      	mov	r4, fp
 8008282:	4630      	mov	r0, r6
 8008284:	f7f8 f956 	bl	8000534 <__aeabi_i2d>
 8008288:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800828c:	f7f8 f9bc 	bl	8000608 <__aeabi_dmul>
 8008290:	4b65      	ldr	r3, [pc, #404]	@ (8008428 <_dtoa_r+0x590>)
 8008292:	2200      	movs	r2, #0
 8008294:	f7f8 f802 	bl	800029c <__adddf3>
 8008298:	4605      	mov	r5, r0
 800829a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800829e:	2c00      	cmp	r4, #0
 80082a0:	d16a      	bne.n	8008378 <_dtoa_r+0x4e0>
 80082a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082a6:	4b61      	ldr	r3, [pc, #388]	@ (800842c <_dtoa_r+0x594>)
 80082a8:	2200      	movs	r2, #0
 80082aa:	f7f7 fff5 	bl	8000298 <__aeabi_dsub>
 80082ae:	4602      	mov	r2, r0
 80082b0:	460b      	mov	r3, r1
 80082b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082b6:	462a      	mov	r2, r5
 80082b8:	4633      	mov	r3, r6
 80082ba:	f7f8 fc35 	bl	8000b28 <__aeabi_dcmpgt>
 80082be:	2800      	cmp	r0, #0
 80082c0:	f040 8298 	bne.w	80087f4 <_dtoa_r+0x95c>
 80082c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c8:	462a      	mov	r2, r5
 80082ca:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80082ce:	f7f8 fc0d 	bl	8000aec <__aeabi_dcmplt>
 80082d2:	bb38      	cbnz	r0, 8008324 <_dtoa_r+0x48c>
 80082d4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80082d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082dc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80082de:	2b00      	cmp	r3, #0
 80082e0:	f2c0 8157 	blt.w	8008592 <_dtoa_r+0x6fa>
 80082e4:	2f0e      	cmp	r7, #14
 80082e6:	f300 8154 	bgt.w	8008592 <_dtoa_r+0x6fa>
 80082ea:	4b4b      	ldr	r3, [pc, #300]	@ (8008418 <_dtoa_r+0x580>)
 80082ec:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082f0:	ed93 7b00 	vldr	d7, [r3]
 80082f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	ed8d 7b00 	vstr	d7, [sp]
 80082fc:	f280 80e5 	bge.w	80084ca <_dtoa_r+0x632>
 8008300:	9b03      	ldr	r3, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f300 80e1 	bgt.w	80084ca <_dtoa_r+0x632>
 8008308:	d10c      	bne.n	8008324 <_dtoa_r+0x48c>
 800830a:	4b48      	ldr	r3, [pc, #288]	@ (800842c <_dtoa_r+0x594>)
 800830c:	2200      	movs	r2, #0
 800830e:	ec51 0b17 	vmov	r0, r1, d7
 8008312:	f7f8 f979 	bl	8000608 <__aeabi_dmul>
 8008316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800831a:	f7f8 fbfb 	bl	8000b14 <__aeabi_dcmpge>
 800831e:	2800      	cmp	r0, #0
 8008320:	f000 8266 	beq.w	80087f0 <_dtoa_r+0x958>
 8008324:	2400      	movs	r4, #0
 8008326:	4625      	mov	r5, r4
 8008328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800832a:	4656      	mov	r6, sl
 800832c:	ea6f 0803 	mvn.w	r8, r3
 8008330:	2700      	movs	r7, #0
 8008332:	4621      	mov	r1, r4
 8008334:	4648      	mov	r0, r9
 8008336:	f000 fcbf 	bl	8008cb8 <_Bfree>
 800833a:	2d00      	cmp	r5, #0
 800833c:	f000 80bd 	beq.w	80084ba <_dtoa_r+0x622>
 8008340:	b12f      	cbz	r7, 800834e <_dtoa_r+0x4b6>
 8008342:	42af      	cmp	r7, r5
 8008344:	d003      	beq.n	800834e <_dtoa_r+0x4b6>
 8008346:	4639      	mov	r1, r7
 8008348:	4648      	mov	r0, r9
 800834a:	f000 fcb5 	bl	8008cb8 <_Bfree>
 800834e:	4629      	mov	r1, r5
 8008350:	4648      	mov	r0, r9
 8008352:	f000 fcb1 	bl	8008cb8 <_Bfree>
 8008356:	e0b0      	b.n	80084ba <_dtoa_r+0x622>
 8008358:	07e2      	lsls	r2, r4, #31
 800835a:	d505      	bpl.n	8008368 <_dtoa_r+0x4d0>
 800835c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008360:	f7f8 f952 	bl	8000608 <__aeabi_dmul>
 8008364:	3601      	adds	r6, #1
 8008366:	2301      	movs	r3, #1
 8008368:	1064      	asrs	r4, r4, #1
 800836a:	3508      	adds	r5, #8
 800836c:	e762      	b.n	8008234 <_dtoa_r+0x39c>
 800836e:	2602      	movs	r6, #2
 8008370:	e765      	b.n	800823e <_dtoa_r+0x3a6>
 8008372:	9c03      	ldr	r4, [sp, #12]
 8008374:	46b8      	mov	r8, r7
 8008376:	e784      	b.n	8008282 <_dtoa_r+0x3ea>
 8008378:	4b27      	ldr	r3, [pc, #156]	@ (8008418 <_dtoa_r+0x580>)
 800837a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800837c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008380:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008384:	4454      	add	r4, sl
 8008386:	2900      	cmp	r1, #0
 8008388:	d054      	beq.n	8008434 <_dtoa_r+0x59c>
 800838a:	4929      	ldr	r1, [pc, #164]	@ (8008430 <_dtoa_r+0x598>)
 800838c:	2000      	movs	r0, #0
 800838e:	f7f8 fa65 	bl	800085c <__aeabi_ddiv>
 8008392:	4633      	mov	r3, r6
 8008394:	462a      	mov	r2, r5
 8008396:	f7f7 ff7f 	bl	8000298 <__aeabi_dsub>
 800839a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800839e:	4656      	mov	r6, sl
 80083a0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a4:	f7f8 fbe0 	bl	8000b68 <__aeabi_d2iz>
 80083a8:	4605      	mov	r5, r0
 80083aa:	f7f8 f8c3 	bl	8000534 <__aeabi_i2d>
 80083ae:	4602      	mov	r2, r0
 80083b0:	460b      	mov	r3, r1
 80083b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083b6:	f7f7 ff6f 	bl	8000298 <__aeabi_dsub>
 80083ba:	3530      	adds	r5, #48	@ 0x30
 80083bc:	4602      	mov	r2, r0
 80083be:	460b      	mov	r3, r1
 80083c0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083c4:	f806 5b01 	strb.w	r5, [r6], #1
 80083c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083cc:	f7f8 fb8e 	bl	8000aec <__aeabi_dcmplt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d172      	bne.n	80084ba <_dtoa_r+0x622>
 80083d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083d8:	4911      	ldr	r1, [pc, #68]	@ (8008420 <_dtoa_r+0x588>)
 80083da:	2000      	movs	r0, #0
 80083dc:	f7f7 ff5c 	bl	8000298 <__aeabi_dsub>
 80083e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80083e4:	f7f8 fb82 	bl	8000aec <__aeabi_dcmplt>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	f040 80b4 	bne.w	8008556 <_dtoa_r+0x6be>
 80083ee:	42a6      	cmp	r6, r4
 80083f0:	f43f af70 	beq.w	80082d4 <_dtoa_r+0x43c>
 80083f4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80083f8:	4b0a      	ldr	r3, [pc, #40]	@ (8008424 <_dtoa_r+0x58c>)
 80083fa:	2200      	movs	r2, #0
 80083fc:	f7f8 f904 	bl	8000608 <__aeabi_dmul>
 8008400:	4b08      	ldr	r3, [pc, #32]	@ (8008424 <_dtoa_r+0x58c>)
 8008402:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008406:	2200      	movs	r2, #0
 8008408:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800840c:	f7f8 f8fc 	bl	8000608 <__aeabi_dmul>
 8008410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008414:	e7c4      	b.n	80083a0 <_dtoa_r+0x508>
 8008416:	bf00      	nop
 8008418:	08009d08 	.word	0x08009d08
 800841c:	08009ce0 	.word	0x08009ce0
 8008420:	3ff00000 	.word	0x3ff00000
 8008424:	40240000 	.word	0x40240000
 8008428:	401c0000 	.word	0x401c0000
 800842c:	40140000 	.word	0x40140000
 8008430:	3fe00000 	.word	0x3fe00000
 8008434:	4631      	mov	r1, r6
 8008436:	4628      	mov	r0, r5
 8008438:	f7f8 f8e6 	bl	8000608 <__aeabi_dmul>
 800843c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008440:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008442:	4656      	mov	r6, sl
 8008444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008448:	f7f8 fb8e 	bl	8000b68 <__aeabi_d2iz>
 800844c:	4605      	mov	r5, r0
 800844e:	f7f8 f871 	bl	8000534 <__aeabi_i2d>
 8008452:	4602      	mov	r2, r0
 8008454:	460b      	mov	r3, r1
 8008456:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800845a:	f7f7 ff1d 	bl	8000298 <__aeabi_dsub>
 800845e:	3530      	adds	r5, #48	@ 0x30
 8008460:	f806 5b01 	strb.w	r5, [r6], #1
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	42a6      	cmp	r6, r4
 800846a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800846e:	f04f 0200 	mov.w	r2, #0
 8008472:	d124      	bne.n	80084be <_dtoa_r+0x626>
 8008474:	4baf      	ldr	r3, [pc, #700]	@ (8008734 <_dtoa_r+0x89c>)
 8008476:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800847a:	f7f7 ff0f 	bl	800029c <__adddf3>
 800847e:	4602      	mov	r2, r0
 8008480:	460b      	mov	r3, r1
 8008482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008486:	f7f8 fb4f 	bl	8000b28 <__aeabi_dcmpgt>
 800848a:	2800      	cmp	r0, #0
 800848c:	d163      	bne.n	8008556 <_dtoa_r+0x6be>
 800848e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008492:	49a8      	ldr	r1, [pc, #672]	@ (8008734 <_dtoa_r+0x89c>)
 8008494:	2000      	movs	r0, #0
 8008496:	f7f7 feff 	bl	8000298 <__aeabi_dsub>
 800849a:	4602      	mov	r2, r0
 800849c:	460b      	mov	r3, r1
 800849e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084a2:	f7f8 fb23 	bl	8000aec <__aeabi_dcmplt>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f43f af14 	beq.w	80082d4 <_dtoa_r+0x43c>
 80084ac:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80084ae:	1e73      	subs	r3, r6, #1
 80084b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80084b2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80084b6:	2b30      	cmp	r3, #48	@ 0x30
 80084b8:	d0f8      	beq.n	80084ac <_dtoa_r+0x614>
 80084ba:	4647      	mov	r7, r8
 80084bc:	e03b      	b.n	8008536 <_dtoa_r+0x69e>
 80084be:	4b9e      	ldr	r3, [pc, #632]	@ (8008738 <_dtoa_r+0x8a0>)
 80084c0:	f7f8 f8a2 	bl	8000608 <__aeabi_dmul>
 80084c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084c8:	e7bc      	b.n	8008444 <_dtoa_r+0x5ac>
 80084ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80084ce:	4656      	mov	r6, sl
 80084d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084d4:	4620      	mov	r0, r4
 80084d6:	4629      	mov	r1, r5
 80084d8:	f7f8 f9c0 	bl	800085c <__aeabi_ddiv>
 80084dc:	f7f8 fb44 	bl	8000b68 <__aeabi_d2iz>
 80084e0:	4680      	mov	r8, r0
 80084e2:	f7f8 f827 	bl	8000534 <__aeabi_i2d>
 80084e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084ea:	f7f8 f88d 	bl	8000608 <__aeabi_dmul>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4620      	mov	r0, r4
 80084f4:	4629      	mov	r1, r5
 80084f6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80084fa:	f7f7 fecd 	bl	8000298 <__aeabi_dsub>
 80084fe:	f806 4b01 	strb.w	r4, [r6], #1
 8008502:	9d03      	ldr	r5, [sp, #12]
 8008504:	eba6 040a 	sub.w	r4, r6, sl
 8008508:	42a5      	cmp	r5, r4
 800850a:	4602      	mov	r2, r0
 800850c:	460b      	mov	r3, r1
 800850e:	d133      	bne.n	8008578 <_dtoa_r+0x6e0>
 8008510:	f7f7 fec4 	bl	800029c <__adddf3>
 8008514:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008518:	4604      	mov	r4, r0
 800851a:	460d      	mov	r5, r1
 800851c:	f7f8 fb04 	bl	8000b28 <__aeabi_dcmpgt>
 8008520:	b9c0      	cbnz	r0, 8008554 <_dtoa_r+0x6bc>
 8008522:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008526:	4620      	mov	r0, r4
 8008528:	4629      	mov	r1, r5
 800852a:	f7f8 fad5 	bl	8000ad8 <__aeabi_dcmpeq>
 800852e:	b110      	cbz	r0, 8008536 <_dtoa_r+0x69e>
 8008530:	f018 0f01 	tst.w	r8, #1
 8008534:	d10e      	bne.n	8008554 <_dtoa_r+0x6bc>
 8008536:	9902      	ldr	r1, [sp, #8]
 8008538:	4648      	mov	r0, r9
 800853a:	f000 fbbd 	bl	8008cb8 <_Bfree>
 800853e:	2300      	movs	r3, #0
 8008540:	7033      	strb	r3, [r6, #0]
 8008542:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008544:	3701      	adds	r7, #1
 8008546:	601f      	str	r7, [r3, #0]
 8008548:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800854a:	2b00      	cmp	r3, #0
 800854c:	f000 824b 	beq.w	80089e6 <_dtoa_r+0xb4e>
 8008550:	601e      	str	r6, [r3, #0]
 8008552:	e248      	b.n	80089e6 <_dtoa_r+0xb4e>
 8008554:	46b8      	mov	r8, r7
 8008556:	4633      	mov	r3, r6
 8008558:	461e      	mov	r6, r3
 800855a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800855e:	2a39      	cmp	r2, #57	@ 0x39
 8008560:	d106      	bne.n	8008570 <_dtoa_r+0x6d8>
 8008562:	459a      	cmp	sl, r3
 8008564:	d1f8      	bne.n	8008558 <_dtoa_r+0x6c0>
 8008566:	2230      	movs	r2, #48	@ 0x30
 8008568:	f108 0801 	add.w	r8, r8, #1
 800856c:	f88a 2000 	strb.w	r2, [sl]
 8008570:	781a      	ldrb	r2, [r3, #0]
 8008572:	3201      	adds	r2, #1
 8008574:	701a      	strb	r2, [r3, #0]
 8008576:	e7a0      	b.n	80084ba <_dtoa_r+0x622>
 8008578:	4b6f      	ldr	r3, [pc, #444]	@ (8008738 <_dtoa_r+0x8a0>)
 800857a:	2200      	movs	r2, #0
 800857c:	f7f8 f844 	bl	8000608 <__aeabi_dmul>
 8008580:	2200      	movs	r2, #0
 8008582:	2300      	movs	r3, #0
 8008584:	4604      	mov	r4, r0
 8008586:	460d      	mov	r5, r1
 8008588:	f7f8 faa6 	bl	8000ad8 <__aeabi_dcmpeq>
 800858c:	2800      	cmp	r0, #0
 800858e:	d09f      	beq.n	80084d0 <_dtoa_r+0x638>
 8008590:	e7d1      	b.n	8008536 <_dtoa_r+0x69e>
 8008592:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008594:	2a00      	cmp	r2, #0
 8008596:	f000 80ea 	beq.w	800876e <_dtoa_r+0x8d6>
 800859a:	9a07      	ldr	r2, [sp, #28]
 800859c:	2a01      	cmp	r2, #1
 800859e:	f300 80cd 	bgt.w	800873c <_dtoa_r+0x8a4>
 80085a2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80085a4:	2a00      	cmp	r2, #0
 80085a6:	f000 80c1 	beq.w	800872c <_dtoa_r+0x894>
 80085aa:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80085ae:	9c08      	ldr	r4, [sp, #32]
 80085b0:	9e00      	ldr	r6, [sp, #0]
 80085b2:	9a00      	ldr	r2, [sp, #0]
 80085b4:	441a      	add	r2, r3
 80085b6:	9200      	str	r2, [sp, #0]
 80085b8:	9a06      	ldr	r2, [sp, #24]
 80085ba:	2101      	movs	r1, #1
 80085bc:	441a      	add	r2, r3
 80085be:	4648      	mov	r0, r9
 80085c0:	9206      	str	r2, [sp, #24]
 80085c2:	f000 fc2d 	bl	8008e20 <__i2b>
 80085c6:	4605      	mov	r5, r0
 80085c8:	b166      	cbz	r6, 80085e4 <_dtoa_r+0x74c>
 80085ca:	9b06      	ldr	r3, [sp, #24]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	dd09      	ble.n	80085e4 <_dtoa_r+0x74c>
 80085d0:	42b3      	cmp	r3, r6
 80085d2:	9a00      	ldr	r2, [sp, #0]
 80085d4:	bfa8      	it	ge
 80085d6:	4633      	movge	r3, r6
 80085d8:	1ad2      	subs	r2, r2, r3
 80085da:	9200      	str	r2, [sp, #0]
 80085dc:	9a06      	ldr	r2, [sp, #24]
 80085de:	1af6      	subs	r6, r6, r3
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	9306      	str	r3, [sp, #24]
 80085e4:	9b08      	ldr	r3, [sp, #32]
 80085e6:	b30b      	cbz	r3, 800862c <_dtoa_r+0x794>
 80085e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 80c6 	beq.w	800877c <_dtoa_r+0x8e4>
 80085f0:	2c00      	cmp	r4, #0
 80085f2:	f000 80c0 	beq.w	8008776 <_dtoa_r+0x8de>
 80085f6:	4629      	mov	r1, r5
 80085f8:	4622      	mov	r2, r4
 80085fa:	4648      	mov	r0, r9
 80085fc:	f000 fcc8 	bl	8008f90 <__pow5mult>
 8008600:	9a02      	ldr	r2, [sp, #8]
 8008602:	4601      	mov	r1, r0
 8008604:	4605      	mov	r5, r0
 8008606:	4648      	mov	r0, r9
 8008608:	f000 fc20 	bl	8008e4c <__multiply>
 800860c:	9902      	ldr	r1, [sp, #8]
 800860e:	4680      	mov	r8, r0
 8008610:	4648      	mov	r0, r9
 8008612:	f000 fb51 	bl	8008cb8 <_Bfree>
 8008616:	9b08      	ldr	r3, [sp, #32]
 8008618:	1b1b      	subs	r3, r3, r4
 800861a:	9308      	str	r3, [sp, #32]
 800861c:	f000 80b1 	beq.w	8008782 <_dtoa_r+0x8ea>
 8008620:	9a08      	ldr	r2, [sp, #32]
 8008622:	4641      	mov	r1, r8
 8008624:	4648      	mov	r0, r9
 8008626:	f000 fcb3 	bl	8008f90 <__pow5mult>
 800862a:	9002      	str	r0, [sp, #8]
 800862c:	2101      	movs	r1, #1
 800862e:	4648      	mov	r0, r9
 8008630:	f000 fbf6 	bl	8008e20 <__i2b>
 8008634:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008636:	4604      	mov	r4, r0
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 81d8 	beq.w	80089ee <_dtoa_r+0xb56>
 800863e:	461a      	mov	r2, r3
 8008640:	4601      	mov	r1, r0
 8008642:	4648      	mov	r0, r9
 8008644:	f000 fca4 	bl	8008f90 <__pow5mult>
 8008648:	9b07      	ldr	r3, [sp, #28]
 800864a:	2b01      	cmp	r3, #1
 800864c:	4604      	mov	r4, r0
 800864e:	f300 809f 	bgt.w	8008790 <_dtoa_r+0x8f8>
 8008652:	9b04      	ldr	r3, [sp, #16]
 8008654:	2b00      	cmp	r3, #0
 8008656:	f040 8097 	bne.w	8008788 <_dtoa_r+0x8f0>
 800865a:	9b05      	ldr	r3, [sp, #20]
 800865c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 8093 	bne.w	800878c <_dtoa_r+0x8f4>
 8008666:	9b05      	ldr	r3, [sp, #20]
 8008668:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800866c:	0d1b      	lsrs	r3, r3, #20
 800866e:	051b      	lsls	r3, r3, #20
 8008670:	b133      	cbz	r3, 8008680 <_dtoa_r+0x7e8>
 8008672:	9b00      	ldr	r3, [sp, #0]
 8008674:	3301      	adds	r3, #1
 8008676:	9300      	str	r3, [sp, #0]
 8008678:	9b06      	ldr	r3, [sp, #24]
 800867a:	3301      	adds	r3, #1
 800867c:	9306      	str	r3, [sp, #24]
 800867e:	2301      	movs	r3, #1
 8008680:	9308      	str	r3, [sp, #32]
 8008682:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008684:	2b00      	cmp	r3, #0
 8008686:	f000 81b8 	beq.w	80089fa <_dtoa_r+0xb62>
 800868a:	6923      	ldr	r3, [r4, #16]
 800868c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008690:	6918      	ldr	r0, [r3, #16]
 8008692:	f000 fb79 	bl	8008d88 <__hi0bits>
 8008696:	f1c0 0020 	rsb	r0, r0, #32
 800869a:	9b06      	ldr	r3, [sp, #24]
 800869c:	4418      	add	r0, r3
 800869e:	f010 001f 	ands.w	r0, r0, #31
 80086a2:	f000 8082 	beq.w	80087aa <_dtoa_r+0x912>
 80086a6:	f1c0 0320 	rsb	r3, r0, #32
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	dd73      	ble.n	8008796 <_dtoa_r+0x8fe>
 80086ae:	9b00      	ldr	r3, [sp, #0]
 80086b0:	f1c0 001c 	rsb	r0, r0, #28
 80086b4:	4403      	add	r3, r0
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	9b06      	ldr	r3, [sp, #24]
 80086ba:	4403      	add	r3, r0
 80086bc:	4406      	add	r6, r0
 80086be:	9306      	str	r3, [sp, #24]
 80086c0:	9b00      	ldr	r3, [sp, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	dd05      	ble.n	80086d2 <_dtoa_r+0x83a>
 80086c6:	9902      	ldr	r1, [sp, #8]
 80086c8:	461a      	mov	r2, r3
 80086ca:	4648      	mov	r0, r9
 80086cc:	f000 fcba 	bl	8009044 <__lshift>
 80086d0:	9002      	str	r0, [sp, #8]
 80086d2:	9b06      	ldr	r3, [sp, #24]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dd05      	ble.n	80086e4 <_dtoa_r+0x84c>
 80086d8:	4621      	mov	r1, r4
 80086da:	461a      	mov	r2, r3
 80086dc:	4648      	mov	r0, r9
 80086de:	f000 fcb1 	bl	8009044 <__lshift>
 80086e2:	4604      	mov	r4, r0
 80086e4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d061      	beq.n	80087ae <_dtoa_r+0x916>
 80086ea:	9802      	ldr	r0, [sp, #8]
 80086ec:	4621      	mov	r1, r4
 80086ee:	f000 fd15 	bl	800911c <__mcmp>
 80086f2:	2800      	cmp	r0, #0
 80086f4:	da5b      	bge.n	80087ae <_dtoa_r+0x916>
 80086f6:	2300      	movs	r3, #0
 80086f8:	9902      	ldr	r1, [sp, #8]
 80086fa:	220a      	movs	r2, #10
 80086fc:	4648      	mov	r0, r9
 80086fe:	f000 fafd 	bl	8008cfc <__multadd>
 8008702:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008704:	9002      	str	r0, [sp, #8]
 8008706:	f107 38ff 	add.w	r8, r7, #4294967295
 800870a:	2b00      	cmp	r3, #0
 800870c:	f000 8177 	beq.w	80089fe <_dtoa_r+0xb66>
 8008710:	4629      	mov	r1, r5
 8008712:	2300      	movs	r3, #0
 8008714:	220a      	movs	r2, #10
 8008716:	4648      	mov	r0, r9
 8008718:	f000 faf0 	bl	8008cfc <__multadd>
 800871c:	f1bb 0f00 	cmp.w	fp, #0
 8008720:	4605      	mov	r5, r0
 8008722:	dc6f      	bgt.n	8008804 <_dtoa_r+0x96c>
 8008724:	9b07      	ldr	r3, [sp, #28]
 8008726:	2b02      	cmp	r3, #2
 8008728:	dc49      	bgt.n	80087be <_dtoa_r+0x926>
 800872a:	e06b      	b.n	8008804 <_dtoa_r+0x96c>
 800872c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800872e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008732:	e73c      	b.n	80085ae <_dtoa_r+0x716>
 8008734:	3fe00000 	.word	0x3fe00000
 8008738:	40240000 	.word	0x40240000
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	1e5c      	subs	r4, r3, #1
 8008740:	9b08      	ldr	r3, [sp, #32]
 8008742:	42a3      	cmp	r3, r4
 8008744:	db09      	blt.n	800875a <_dtoa_r+0x8c2>
 8008746:	1b1c      	subs	r4, r3, r4
 8008748:	9b03      	ldr	r3, [sp, #12]
 800874a:	2b00      	cmp	r3, #0
 800874c:	f6bf af30 	bge.w	80085b0 <_dtoa_r+0x718>
 8008750:	9b00      	ldr	r3, [sp, #0]
 8008752:	9a03      	ldr	r2, [sp, #12]
 8008754:	1a9e      	subs	r6, r3, r2
 8008756:	2300      	movs	r3, #0
 8008758:	e72b      	b.n	80085b2 <_dtoa_r+0x71a>
 800875a:	9b08      	ldr	r3, [sp, #32]
 800875c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800875e:	9408      	str	r4, [sp, #32]
 8008760:	1ae3      	subs	r3, r4, r3
 8008762:	441a      	add	r2, r3
 8008764:	9e00      	ldr	r6, [sp, #0]
 8008766:	9b03      	ldr	r3, [sp, #12]
 8008768:	920d      	str	r2, [sp, #52]	@ 0x34
 800876a:	2400      	movs	r4, #0
 800876c:	e721      	b.n	80085b2 <_dtoa_r+0x71a>
 800876e:	9c08      	ldr	r4, [sp, #32]
 8008770:	9e00      	ldr	r6, [sp, #0]
 8008772:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008774:	e728      	b.n	80085c8 <_dtoa_r+0x730>
 8008776:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800877a:	e751      	b.n	8008620 <_dtoa_r+0x788>
 800877c:	9a08      	ldr	r2, [sp, #32]
 800877e:	9902      	ldr	r1, [sp, #8]
 8008780:	e750      	b.n	8008624 <_dtoa_r+0x78c>
 8008782:	f8cd 8008 	str.w	r8, [sp, #8]
 8008786:	e751      	b.n	800862c <_dtoa_r+0x794>
 8008788:	2300      	movs	r3, #0
 800878a:	e779      	b.n	8008680 <_dtoa_r+0x7e8>
 800878c:	9b04      	ldr	r3, [sp, #16]
 800878e:	e777      	b.n	8008680 <_dtoa_r+0x7e8>
 8008790:	2300      	movs	r3, #0
 8008792:	9308      	str	r3, [sp, #32]
 8008794:	e779      	b.n	800868a <_dtoa_r+0x7f2>
 8008796:	d093      	beq.n	80086c0 <_dtoa_r+0x828>
 8008798:	9a00      	ldr	r2, [sp, #0]
 800879a:	331c      	adds	r3, #28
 800879c:	441a      	add	r2, r3
 800879e:	9200      	str	r2, [sp, #0]
 80087a0:	9a06      	ldr	r2, [sp, #24]
 80087a2:	441a      	add	r2, r3
 80087a4:	441e      	add	r6, r3
 80087a6:	9206      	str	r2, [sp, #24]
 80087a8:	e78a      	b.n	80086c0 <_dtoa_r+0x828>
 80087aa:	4603      	mov	r3, r0
 80087ac:	e7f4      	b.n	8008798 <_dtoa_r+0x900>
 80087ae:	9b03      	ldr	r3, [sp, #12]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	46b8      	mov	r8, r7
 80087b4:	dc20      	bgt.n	80087f8 <_dtoa_r+0x960>
 80087b6:	469b      	mov	fp, r3
 80087b8:	9b07      	ldr	r3, [sp, #28]
 80087ba:	2b02      	cmp	r3, #2
 80087bc:	dd1e      	ble.n	80087fc <_dtoa_r+0x964>
 80087be:	f1bb 0f00 	cmp.w	fp, #0
 80087c2:	f47f adb1 	bne.w	8008328 <_dtoa_r+0x490>
 80087c6:	4621      	mov	r1, r4
 80087c8:	465b      	mov	r3, fp
 80087ca:	2205      	movs	r2, #5
 80087cc:	4648      	mov	r0, r9
 80087ce:	f000 fa95 	bl	8008cfc <__multadd>
 80087d2:	4601      	mov	r1, r0
 80087d4:	4604      	mov	r4, r0
 80087d6:	9802      	ldr	r0, [sp, #8]
 80087d8:	f000 fca0 	bl	800911c <__mcmp>
 80087dc:	2800      	cmp	r0, #0
 80087de:	f77f ada3 	ble.w	8008328 <_dtoa_r+0x490>
 80087e2:	4656      	mov	r6, sl
 80087e4:	2331      	movs	r3, #49	@ 0x31
 80087e6:	f806 3b01 	strb.w	r3, [r6], #1
 80087ea:	f108 0801 	add.w	r8, r8, #1
 80087ee:	e59f      	b.n	8008330 <_dtoa_r+0x498>
 80087f0:	9c03      	ldr	r4, [sp, #12]
 80087f2:	46b8      	mov	r8, r7
 80087f4:	4625      	mov	r5, r4
 80087f6:	e7f4      	b.n	80087e2 <_dtoa_r+0x94a>
 80087f8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80087fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 8101 	beq.w	8008a06 <_dtoa_r+0xb6e>
 8008804:	2e00      	cmp	r6, #0
 8008806:	dd05      	ble.n	8008814 <_dtoa_r+0x97c>
 8008808:	4629      	mov	r1, r5
 800880a:	4632      	mov	r2, r6
 800880c:	4648      	mov	r0, r9
 800880e:	f000 fc19 	bl	8009044 <__lshift>
 8008812:	4605      	mov	r5, r0
 8008814:	9b08      	ldr	r3, [sp, #32]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d05c      	beq.n	80088d4 <_dtoa_r+0xa3c>
 800881a:	6869      	ldr	r1, [r5, #4]
 800881c:	4648      	mov	r0, r9
 800881e:	f000 fa0b 	bl	8008c38 <_Balloc>
 8008822:	4606      	mov	r6, r0
 8008824:	b928      	cbnz	r0, 8008832 <_dtoa_r+0x99a>
 8008826:	4b82      	ldr	r3, [pc, #520]	@ (8008a30 <_dtoa_r+0xb98>)
 8008828:	4602      	mov	r2, r0
 800882a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800882e:	f7ff bb4a 	b.w	8007ec6 <_dtoa_r+0x2e>
 8008832:	692a      	ldr	r2, [r5, #16]
 8008834:	3202      	adds	r2, #2
 8008836:	0092      	lsls	r2, r2, #2
 8008838:	f105 010c 	add.w	r1, r5, #12
 800883c:	300c      	adds	r0, #12
 800883e:	f001 f807 	bl	8009850 <memcpy>
 8008842:	2201      	movs	r2, #1
 8008844:	4631      	mov	r1, r6
 8008846:	4648      	mov	r0, r9
 8008848:	f000 fbfc 	bl	8009044 <__lshift>
 800884c:	f10a 0301 	add.w	r3, sl, #1
 8008850:	9300      	str	r3, [sp, #0]
 8008852:	eb0a 030b 	add.w	r3, sl, fp
 8008856:	9308      	str	r3, [sp, #32]
 8008858:	9b04      	ldr	r3, [sp, #16]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	462f      	mov	r7, r5
 8008860:	9306      	str	r3, [sp, #24]
 8008862:	4605      	mov	r5, r0
 8008864:	9b00      	ldr	r3, [sp, #0]
 8008866:	9802      	ldr	r0, [sp, #8]
 8008868:	4621      	mov	r1, r4
 800886a:	f103 3bff 	add.w	fp, r3, #4294967295
 800886e:	f7ff fa8a 	bl	8007d86 <quorem>
 8008872:	4603      	mov	r3, r0
 8008874:	3330      	adds	r3, #48	@ 0x30
 8008876:	9003      	str	r0, [sp, #12]
 8008878:	4639      	mov	r1, r7
 800887a:	9802      	ldr	r0, [sp, #8]
 800887c:	9309      	str	r3, [sp, #36]	@ 0x24
 800887e:	f000 fc4d 	bl	800911c <__mcmp>
 8008882:	462a      	mov	r2, r5
 8008884:	9004      	str	r0, [sp, #16]
 8008886:	4621      	mov	r1, r4
 8008888:	4648      	mov	r0, r9
 800888a:	f000 fc63 	bl	8009154 <__mdiff>
 800888e:	68c2      	ldr	r2, [r0, #12]
 8008890:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008892:	4606      	mov	r6, r0
 8008894:	bb02      	cbnz	r2, 80088d8 <_dtoa_r+0xa40>
 8008896:	4601      	mov	r1, r0
 8008898:	9802      	ldr	r0, [sp, #8]
 800889a:	f000 fc3f 	bl	800911c <__mcmp>
 800889e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088a0:	4602      	mov	r2, r0
 80088a2:	4631      	mov	r1, r6
 80088a4:	4648      	mov	r0, r9
 80088a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80088a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80088aa:	f000 fa05 	bl	8008cb8 <_Bfree>
 80088ae:	9b07      	ldr	r3, [sp, #28]
 80088b0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80088b2:	9e00      	ldr	r6, [sp, #0]
 80088b4:	ea42 0103 	orr.w	r1, r2, r3
 80088b8:	9b06      	ldr	r3, [sp, #24]
 80088ba:	4319      	orrs	r1, r3
 80088bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088be:	d10d      	bne.n	80088dc <_dtoa_r+0xa44>
 80088c0:	2b39      	cmp	r3, #57	@ 0x39
 80088c2:	d027      	beq.n	8008914 <_dtoa_r+0xa7c>
 80088c4:	9a04      	ldr	r2, [sp, #16]
 80088c6:	2a00      	cmp	r2, #0
 80088c8:	dd01      	ble.n	80088ce <_dtoa_r+0xa36>
 80088ca:	9b03      	ldr	r3, [sp, #12]
 80088cc:	3331      	adds	r3, #49	@ 0x31
 80088ce:	f88b 3000 	strb.w	r3, [fp]
 80088d2:	e52e      	b.n	8008332 <_dtoa_r+0x49a>
 80088d4:	4628      	mov	r0, r5
 80088d6:	e7b9      	b.n	800884c <_dtoa_r+0x9b4>
 80088d8:	2201      	movs	r2, #1
 80088da:	e7e2      	b.n	80088a2 <_dtoa_r+0xa0a>
 80088dc:	9904      	ldr	r1, [sp, #16]
 80088de:	2900      	cmp	r1, #0
 80088e0:	db04      	blt.n	80088ec <_dtoa_r+0xa54>
 80088e2:	9807      	ldr	r0, [sp, #28]
 80088e4:	4301      	orrs	r1, r0
 80088e6:	9806      	ldr	r0, [sp, #24]
 80088e8:	4301      	orrs	r1, r0
 80088ea:	d120      	bne.n	800892e <_dtoa_r+0xa96>
 80088ec:	2a00      	cmp	r2, #0
 80088ee:	ddee      	ble.n	80088ce <_dtoa_r+0xa36>
 80088f0:	9902      	ldr	r1, [sp, #8]
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	2201      	movs	r2, #1
 80088f6:	4648      	mov	r0, r9
 80088f8:	f000 fba4 	bl	8009044 <__lshift>
 80088fc:	4621      	mov	r1, r4
 80088fe:	9002      	str	r0, [sp, #8]
 8008900:	f000 fc0c 	bl	800911c <__mcmp>
 8008904:	2800      	cmp	r0, #0
 8008906:	9b00      	ldr	r3, [sp, #0]
 8008908:	dc02      	bgt.n	8008910 <_dtoa_r+0xa78>
 800890a:	d1e0      	bne.n	80088ce <_dtoa_r+0xa36>
 800890c:	07da      	lsls	r2, r3, #31
 800890e:	d5de      	bpl.n	80088ce <_dtoa_r+0xa36>
 8008910:	2b39      	cmp	r3, #57	@ 0x39
 8008912:	d1da      	bne.n	80088ca <_dtoa_r+0xa32>
 8008914:	2339      	movs	r3, #57	@ 0x39
 8008916:	f88b 3000 	strb.w	r3, [fp]
 800891a:	4633      	mov	r3, r6
 800891c:	461e      	mov	r6, r3
 800891e:	3b01      	subs	r3, #1
 8008920:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008924:	2a39      	cmp	r2, #57	@ 0x39
 8008926:	d04e      	beq.n	80089c6 <_dtoa_r+0xb2e>
 8008928:	3201      	adds	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
 800892c:	e501      	b.n	8008332 <_dtoa_r+0x49a>
 800892e:	2a00      	cmp	r2, #0
 8008930:	dd03      	ble.n	800893a <_dtoa_r+0xaa2>
 8008932:	2b39      	cmp	r3, #57	@ 0x39
 8008934:	d0ee      	beq.n	8008914 <_dtoa_r+0xa7c>
 8008936:	3301      	adds	r3, #1
 8008938:	e7c9      	b.n	80088ce <_dtoa_r+0xa36>
 800893a:	9a00      	ldr	r2, [sp, #0]
 800893c:	9908      	ldr	r1, [sp, #32]
 800893e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008942:	428a      	cmp	r2, r1
 8008944:	d028      	beq.n	8008998 <_dtoa_r+0xb00>
 8008946:	9902      	ldr	r1, [sp, #8]
 8008948:	2300      	movs	r3, #0
 800894a:	220a      	movs	r2, #10
 800894c:	4648      	mov	r0, r9
 800894e:	f000 f9d5 	bl	8008cfc <__multadd>
 8008952:	42af      	cmp	r7, r5
 8008954:	9002      	str	r0, [sp, #8]
 8008956:	f04f 0300 	mov.w	r3, #0
 800895a:	f04f 020a 	mov.w	r2, #10
 800895e:	4639      	mov	r1, r7
 8008960:	4648      	mov	r0, r9
 8008962:	d107      	bne.n	8008974 <_dtoa_r+0xadc>
 8008964:	f000 f9ca 	bl	8008cfc <__multadd>
 8008968:	4607      	mov	r7, r0
 800896a:	4605      	mov	r5, r0
 800896c:	9b00      	ldr	r3, [sp, #0]
 800896e:	3301      	adds	r3, #1
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	e777      	b.n	8008864 <_dtoa_r+0x9cc>
 8008974:	f000 f9c2 	bl	8008cfc <__multadd>
 8008978:	4629      	mov	r1, r5
 800897a:	4607      	mov	r7, r0
 800897c:	2300      	movs	r3, #0
 800897e:	220a      	movs	r2, #10
 8008980:	4648      	mov	r0, r9
 8008982:	f000 f9bb 	bl	8008cfc <__multadd>
 8008986:	4605      	mov	r5, r0
 8008988:	e7f0      	b.n	800896c <_dtoa_r+0xad4>
 800898a:	f1bb 0f00 	cmp.w	fp, #0
 800898e:	bfcc      	ite	gt
 8008990:	465e      	movgt	r6, fp
 8008992:	2601      	movle	r6, #1
 8008994:	4456      	add	r6, sl
 8008996:	2700      	movs	r7, #0
 8008998:	9902      	ldr	r1, [sp, #8]
 800899a:	9300      	str	r3, [sp, #0]
 800899c:	2201      	movs	r2, #1
 800899e:	4648      	mov	r0, r9
 80089a0:	f000 fb50 	bl	8009044 <__lshift>
 80089a4:	4621      	mov	r1, r4
 80089a6:	9002      	str	r0, [sp, #8]
 80089a8:	f000 fbb8 	bl	800911c <__mcmp>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	dcb4      	bgt.n	800891a <_dtoa_r+0xa82>
 80089b0:	d102      	bne.n	80089b8 <_dtoa_r+0xb20>
 80089b2:	9b00      	ldr	r3, [sp, #0]
 80089b4:	07db      	lsls	r3, r3, #31
 80089b6:	d4b0      	bmi.n	800891a <_dtoa_r+0xa82>
 80089b8:	4633      	mov	r3, r6
 80089ba:	461e      	mov	r6, r3
 80089bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089c0:	2a30      	cmp	r2, #48	@ 0x30
 80089c2:	d0fa      	beq.n	80089ba <_dtoa_r+0xb22>
 80089c4:	e4b5      	b.n	8008332 <_dtoa_r+0x49a>
 80089c6:	459a      	cmp	sl, r3
 80089c8:	d1a8      	bne.n	800891c <_dtoa_r+0xa84>
 80089ca:	2331      	movs	r3, #49	@ 0x31
 80089cc:	f108 0801 	add.w	r8, r8, #1
 80089d0:	f88a 3000 	strb.w	r3, [sl]
 80089d4:	e4ad      	b.n	8008332 <_dtoa_r+0x49a>
 80089d6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089d8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008a34 <_dtoa_r+0xb9c>
 80089dc:	b11b      	cbz	r3, 80089e6 <_dtoa_r+0xb4e>
 80089de:	f10a 0308 	add.w	r3, sl, #8
 80089e2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	4650      	mov	r0, sl
 80089e8:	b017      	add	sp, #92	@ 0x5c
 80089ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089ee:	9b07      	ldr	r3, [sp, #28]
 80089f0:	2b01      	cmp	r3, #1
 80089f2:	f77f ae2e 	ble.w	8008652 <_dtoa_r+0x7ba>
 80089f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089f8:	9308      	str	r3, [sp, #32]
 80089fa:	2001      	movs	r0, #1
 80089fc:	e64d      	b.n	800869a <_dtoa_r+0x802>
 80089fe:	f1bb 0f00 	cmp.w	fp, #0
 8008a02:	f77f aed9 	ble.w	80087b8 <_dtoa_r+0x920>
 8008a06:	4656      	mov	r6, sl
 8008a08:	9802      	ldr	r0, [sp, #8]
 8008a0a:	4621      	mov	r1, r4
 8008a0c:	f7ff f9bb 	bl	8007d86 <quorem>
 8008a10:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008a14:	f806 3b01 	strb.w	r3, [r6], #1
 8008a18:	eba6 020a 	sub.w	r2, r6, sl
 8008a1c:	4593      	cmp	fp, r2
 8008a1e:	ddb4      	ble.n	800898a <_dtoa_r+0xaf2>
 8008a20:	9902      	ldr	r1, [sp, #8]
 8008a22:	2300      	movs	r3, #0
 8008a24:	220a      	movs	r2, #10
 8008a26:	4648      	mov	r0, r9
 8008a28:	f000 f968 	bl	8008cfc <__multadd>
 8008a2c:	9002      	str	r0, [sp, #8]
 8008a2e:	e7eb      	b.n	8008a08 <_dtoa_r+0xb70>
 8008a30:	08009c0c 	.word	0x08009c0c
 8008a34:	08009b90 	.word	0x08009b90

08008a38 <_free_r>:
 8008a38:	b538      	push	{r3, r4, r5, lr}
 8008a3a:	4605      	mov	r5, r0
 8008a3c:	2900      	cmp	r1, #0
 8008a3e:	d041      	beq.n	8008ac4 <_free_r+0x8c>
 8008a40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a44:	1f0c      	subs	r4, r1, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	bfb8      	it	lt
 8008a4a:	18e4      	addlt	r4, r4, r3
 8008a4c:	f000 f8e8 	bl	8008c20 <__malloc_lock>
 8008a50:	4a1d      	ldr	r2, [pc, #116]	@ (8008ac8 <_free_r+0x90>)
 8008a52:	6813      	ldr	r3, [r2, #0]
 8008a54:	b933      	cbnz	r3, 8008a64 <_free_r+0x2c>
 8008a56:	6063      	str	r3, [r4, #4]
 8008a58:	6014      	str	r4, [r2, #0]
 8008a5a:	4628      	mov	r0, r5
 8008a5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008a60:	f000 b8e4 	b.w	8008c2c <__malloc_unlock>
 8008a64:	42a3      	cmp	r3, r4
 8008a66:	d908      	bls.n	8008a7a <_free_r+0x42>
 8008a68:	6820      	ldr	r0, [r4, #0]
 8008a6a:	1821      	adds	r1, r4, r0
 8008a6c:	428b      	cmp	r3, r1
 8008a6e:	bf01      	itttt	eq
 8008a70:	6819      	ldreq	r1, [r3, #0]
 8008a72:	685b      	ldreq	r3, [r3, #4]
 8008a74:	1809      	addeq	r1, r1, r0
 8008a76:	6021      	streq	r1, [r4, #0]
 8008a78:	e7ed      	b.n	8008a56 <_free_r+0x1e>
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	b10b      	cbz	r3, 8008a84 <_free_r+0x4c>
 8008a80:	42a3      	cmp	r3, r4
 8008a82:	d9fa      	bls.n	8008a7a <_free_r+0x42>
 8008a84:	6811      	ldr	r1, [r2, #0]
 8008a86:	1850      	adds	r0, r2, r1
 8008a88:	42a0      	cmp	r0, r4
 8008a8a:	d10b      	bne.n	8008aa4 <_free_r+0x6c>
 8008a8c:	6820      	ldr	r0, [r4, #0]
 8008a8e:	4401      	add	r1, r0
 8008a90:	1850      	adds	r0, r2, r1
 8008a92:	4283      	cmp	r3, r0
 8008a94:	6011      	str	r1, [r2, #0]
 8008a96:	d1e0      	bne.n	8008a5a <_free_r+0x22>
 8008a98:	6818      	ldr	r0, [r3, #0]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	6053      	str	r3, [r2, #4]
 8008a9e:	4408      	add	r0, r1
 8008aa0:	6010      	str	r0, [r2, #0]
 8008aa2:	e7da      	b.n	8008a5a <_free_r+0x22>
 8008aa4:	d902      	bls.n	8008aac <_free_r+0x74>
 8008aa6:	230c      	movs	r3, #12
 8008aa8:	602b      	str	r3, [r5, #0]
 8008aaa:	e7d6      	b.n	8008a5a <_free_r+0x22>
 8008aac:	6820      	ldr	r0, [r4, #0]
 8008aae:	1821      	adds	r1, r4, r0
 8008ab0:	428b      	cmp	r3, r1
 8008ab2:	bf04      	itt	eq
 8008ab4:	6819      	ldreq	r1, [r3, #0]
 8008ab6:	685b      	ldreq	r3, [r3, #4]
 8008ab8:	6063      	str	r3, [r4, #4]
 8008aba:	bf04      	itt	eq
 8008abc:	1809      	addeq	r1, r1, r0
 8008abe:	6021      	streq	r1, [r4, #0]
 8008ac0:	6054      	str	r4, [r2, #4]
 8008ac2:	e7ca      	b.n	8008a5a <_free_r+0x22>
 8008ac4:	bd38      	pop	{r3, r4, r5, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20000580 	.word	0x20000580

08008acc <malloc>:
 8008acc:	4b02      	ldr	r3, [pc, #8]	@ (8008ad8 <malloc+0xc>)
 8008ace:	4601      	mov	r1, r0
 8008ad0:	6818      	ldr	r0, [r3, #0]
 8008ad2:	f000 b825 	b.w	8008b20 <_malloc_r>
 8008ad6:	bf00      	nop
 8008ad8:	20000034 	.word	0x20000034

08008adc <sbrk_aligned>:
 8008adc:	b570      	push	{r4, r5, r6, lr}
 8008ade:	4e0f      	ldr	r6, [pc, #60]	@ (8008b1c <sbrk_aligned+0x40>)
 8008ae0:	460c      	mov	r4, r1
 8008ae2:	6831      	ldr	r1, [r6, #0]
 8008ae4:	4605      	mov	r5, r0
 8008ae6:	b911      	cbnz	r1, 8008aee <sbrk_aligned+0x12>
 8008ae8:	f000 fea2 	bl	8009830 <_sbrk_r>
 8008aec:	6030      	str	r0, [r6, #0]
 8008aee:	4621      	mov	r1, r4
 8008af0:	4628      	mov	r0, r5
 8008af2:	f000 fe9d 	bl	8009830 <_sbrk_r>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d103      	bne.n	8008b02 <sbrk_aligned+0x26>
 8008afa:	f04f 34ff 	mov.w	r4, #4294967295
 8008afe:	4620      	mov	r0, r4
 8008b00:	bd70      	pop	{r4, r5, r6, pc}
 8008b02:	1cc4      	adds	r4, r0, #3
 8008b04:	f024 0403 	bic.w	r4, r4, #3
 8008b08:	42a0      	cmp	r0, r4
 8008b0a:	d0f8      	beq.n	8008afe <sbrk_aligned+0x22>
 8008b0c:	1a21      	subs	r1, r4, r0
 8008b0e:	4628      	mov	r0, r5
 8008b10:	f000 fe8e 	bl	8009830 <_sbrk_r>
 8008b14:	3001      	adds	r0, #1
 8008b16:	d1f2      	bne.n	8008afe <sbrk_aligned+0x22>
 8008b18:	e7ef      	b.n	8008afa <sbrk_aligned+0x1e>
 8008b1a:	bf00      	nop
 8008b1c:	2000057c 	.word	0x2000057c

08008b20 <_malloc_r>:
 8008b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b24:	1ccd      	adds	r5, r1, #3
 8008b26:	f025 0503 	bic.w	r5, r5, #3
 8008b2a:	3508      	adds	r5, #8
 8008b2c:	2d0c      	cmp	r5, #12
 8008b2e:	bf38      	it	cc
 8008b30:	250c      	movcc	r5, #12
 8008b32:	2d00      	cmp	r5, #0
 8008b34:	4606      	mov	r6, r0
 8008b36:	db01      	blt.n	8008b3c <_malloc_r+0x1c>
 8008b38:	42a9      	cmp	r1, r5
 8008b3a:	d904      	bls.n	8008b46 <_malloc_r+0x26>
 8008b3c:	230c      	movs	r3, #12
 8008b3e:	6033      	str	r3, [r6, #0]
 8008b40:	2000      	movs	r0, #0
 8008b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008c1c <_malloc_r+0xfc>
 8008b4a:	f000 f869 	bl	8008c20 <__malloc_lock>
 8008b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8008b52:	461c      	mov	r4, r3
 8008b54:	bb44      	cbnz	r4, 8008ba8 <_malloc_r+0x88>
 8008b56:	4629      	mov	r1, r5
 8008b58:	4630      	mov	r0, r6
 8008b5a:	f7ff ffbf 	bl	8008adc <sbrk_aligned>
 8008b5e:	1c43      	adds	r3, r0, #1
 8008b60:	4604      	mov	r4, r0
 8008b62:	d158      	bne.n	8008c16 <_malloc_r+0xf6>
 8008b64:	f8d8 4000 	ldr.w	r4, [r8]
 8008b68:	4627      	mov	r7, r4
 8008b6a:	2f00      	cmp	r7, #0
 8008b6c:	d143      	bne.n	8008bf6 <_malloc_r+0xd6>
 8008b6e:	2c00      	cmp	r4, #0
 8008b70:	d04b      	beq.n	8008c0a <_malloc_r+0xea>
 8008b72:	6823      	ldr	r3, [r4, #0]
 8008b74:	4639      	mov	r1, r7
 8008b76:	4630      	mov	r0, r6
 8008b78:	eb04 0903 	add.w	r9, r4, r3
 8008b7c:	f000 fe58 	bl	8009830 <_sbrk_r>
 8008b80:	4581      	cmp	r9, r0
 8008b82:	d142      	bne.n	8008c0a <_malloc_r+0xea>
 8008b84:	6821      	ldr	r1, [r4, #0]
 8008b86:	1a6d      	subs	r5, r5, r1
 8008b88:	4629      	mov	r1, r5
 8008b8a:	4630      	mov	r0, r6
 8008b8c:	f7ff ffa6 	bl	8008adc <sbrk_aligned>
 8008b90:	3001      	adds	r0, #1
 8008b92:	d03a      	beq.n	8008c0a <_malloc_r+0xea>
 8008b94:	6823      	ldr	r3, [r4, #0]
 8008b96:	442b      	add	r3, r5
 8008b98:	6023      	str	r3, [r4, #0]
 8008b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b9e:	685a      	ldr	r2, [r3, #4]
 8008ba0:	bb62      	cbnz	r2, 8008bfc <_malloc_r+0xdc>
 8008ba2:	f8c8 7000 	str.w	r7, [r8]
 8008ba6:	e00f      	b.n	8008bc8 <_malloc_r+0xa8>
 8008ba8:	6822      	ldr	r2, [r4, #0]
 8008baa:	1b52      	subs	r2, r2, r5
 8008bac:	d420      	bmi.n	8008bf0 <_malloc_r+0xd0>
 8008bae:	2a0b      	cmp	r2, #11
 8008bb0:	d917      	bls.n	8008be2 <_malloc_r+0xc2>
 8008bb2:	1961      	adds	r1, r4, r5
 8008bb4:	42a3      	cmp	r3, r4
 8008bb6:	6025      	str	r5, [r4, #0]
 8008bb8:	bf18      	it	ne
 8008bba:	6059      	strne	r1, [r3, #4]
 8008bbc:	6863      	ldr	r3, [r4, #4]
 8008bbe:	bf08      	it	eq
 8008bc0:	f8c8 1000 	streq.w	r1, [r8]
 8008bc4:	5162      	str	r2, [r4, r5]
 8008bc6:	604b      	str	r3, [r1, #4]
 8008bc8:	4630      	mov	r0, r6
 8008bca:	f000 f82f 	bl	8008c2c <__malloc_unlock>
 8008bce:	f104 000b 	add.w	r0, r4, #11
 8008bd2:	1d23      	adds	r3, r4, #4
 8008bd4:	f020 0007 	bic.w	r0, r0, #7
 8008bd8:	1ac2      	subs	r2, r0, r3
 8008bda:	bf1c      	itt	ne
 8008bdc:	1a1b      	subne	r3, r3, r0
 8008bde:	50a3      	strne	r3, [r4, r2]
 8008be0:	e7af      	b.n	8008b42 <_malloc_r+0x22>
 8008be2:	6862      	ldr	r2, [r4, #4]
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	bf0c      	ite	eq
 8008be8:	f8c8 2000 	streq.w	r2, [r8]
 8008bec:	605a      	strne	r2, [r3, #4]
 8008bee:	e7eb      	b.n	8008bc8 <_malloc_r+0xa8>
 8008bf0:	4623      	mov	r3, r4
 8008bf2:	6864      	ldr	r4, [r4, #4]
 8008bf4:	e7ae      	b.n	8008b54 <_malloc_r+0x34>
 8008bf6:	463c      	mov	r4, r7
 8008bf8:	687f      	ldr	r7, [r7, #4]
 8008bfa:	e7b6      	b.n	8008b6a <_malloc_r+0x4a>
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	d1fb      	bne.n	8008bfc <_malloc_r+0xdc>
 8008c04:	2300      	movs	r3, #0
 8008c06:	6053      	str	r3, [r2, #4]
 8008c08:	e7de      	b.n	8008bc8 <_malloc_r+0xa8>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	6033      	str	r3, [r6, #0]
 8008c0e:	4630      	mov	r0, r6
 8008c10:	f000 f80c 	bl	8008c2c <__malloc_unlock>
 8008c14:	e794      	b.n	8008b40 <_malloc_r+0x20>
 8008c16:	6005      	str	r5, [r0, #0]
 8008c18:	e7d6      	b.n	8008bc8 <_malloc_r+0xa8>
 8008c1a:	bf00      	nop
 8008c1c:	20000580 	.word	0x20000580

08008c20 <__malloc_lock>:
 8008c20:	4801      	ldr	r0, [pc, #4]	@ (8008c28 <__malloc_lock+0x8>)
 8008c22:	f7ff b8ae 	b.w	8007d82 <__retarget_lock_acquire_recursive>
 8008c26:	bf00      	nop
 8008c28:	20000578 	.word	0x20000578

08008c2c <__malloc_unlock>:
 8008c2c:	4801      	ldr	r0, [pc, #4]	@ (8008c34 <__malloc_unlock+0x8>)
 8008c2e:	f7ff b8a9 	b.w	8007d84 <__retarget_lock_release_recursive>
 8008c32:	bf00      	nop
 8008c34:	20000578 	.word	0x20000578

08008c38 <_Balloc>:
 8008c38:	b570      	push	{r4, r5, r6, lr}
 8008c3a:	69c6      	ldr	r6, [r0, #28]
 8008c3c:	4604      	mov	r4, r0
 8008c3e:	460d      	mov	r5, r1
 8008c40:	b976      	cbnz	r6, 8008c60 <_Balloc+0x28>
 8008c42:	2010      	movs	r0, #16
 8008c44:	f7ff ff42 	bl	8008acc <malloc>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	61e0      	str	r0, [r4, #28]
 8008c4c:	b920      	cbnz	r0, 8008c58 <_Balloc+0x20>
 8008c4e:	4b18      	ldr	r3, [pc, #96]	@ (8008cb0 <_Balloc+0x78>)
 8008c50:	4818      	ldr	r0, [pc, #96]	@ (8008cb4 <_Balloc+0x7c>)
 8008c52:	216b      	movs	r1, #107	@ 0x6b
 8008c54:	f000 fe0a 	bl	800986c <__assert_func>
 8008c58:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c5c:	6006      	str	r6, [r0, #0]
 8008c5e:	60c6      	str	r6, [r0, #12]
 8008c60:	69e6      	ldr	r6, [r4, #28]
 8008c62:	68f3      	ldr	r3, [r6, #12]
 8008c64:	b183      	cbz	r3, 8008c88 <_Balloc+0x50>
 8008c66:	69e3      	ldr	r3, [r4, #28]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c6e:	b9b8      	cbnz	r0, 8008ca0 <_Balloc+0x68>
 8008c70:	2101      	movs	r1, #1
 8008c72:	fa01 f605 	lsl.w	r6, r1, r5
 8008c76:	1d72      	adds	r2, r6, #5
 8008c78:	0092      	lsls	r2, r2, #2
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f000 fe14 	bl	80098a8 <_calloc_r>
 8008c80:	b160      	cbz	r0, 8008c9c <_Balloc+0x64>
 8008c82:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c86:	e00e      	b.n	8008ca6 <_Balloc+0x6e>
 8008c88:	2221      	movs	r2, #33	@ 0x21
 8008c8a:	2104      	movs	r1, #4
 8008c8c:	4620      	mov	r0, r4
 8008c8e:	f000 fe0b 	bl	80098a8 <_calloc_r>
 8008c92:	69e3      	ldr	r3, [r4, #28]
 8008c94:	60f0      	str	r0, [r6, #12]
 8008c96:	68db      	ldr	r3, [r3, #12]
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d1e4      	bne.n	8008c66 <_Balloc+0x2e>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
 8008ca0:	6802      	ldr	r2, [r0, #0]
 8008ca2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cac:	e7f7      	b.n	8008c9e <_Balloc+0x66>
 8008cae:	bf00      	nop
 8008cb0:	08009b9d 	.word	0x08009b9d
 8008cb4:	08009c1d 	.word	0x08009c1d

08008cb8 <_Bfree>:
 8008cb8:	b570      	push	{r4, r5, r6, lr}
 8008cba:	69c6      	ldr	r6, [r0, #28]
 8008cbc:	4605      	mov	r5, r0
 8008cbe:	460c      	mov	r4, r1
 8008cc0:	b976      	cbnz	r6, 8008ce0 <_Bfree+0x28>
 8008cc2:	2010      	movs	r0, #16
 8008cc4:	f7ff ff02 	bl	8008acc <malloc>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	61e8      	str	r0, [r5, #28]
 8008ccc:	b920      	cbnz	r0, 8008cd8 <_Bfree+0x20>
 8008cce:	4b09      	ldr	r3, [pc, #36]	@ (8008cf4 <_Bfree+0x3c>)
 8008cd0:	4809      	ldr	r0, [pc, #36]	@ (8008cf8 <_Bfree+0x40>)
 8008cd2:	218f      	movs	r1, #143	@ 0x8f
 8008cd4:	f000 fdca 	bl	800986c <__assert_func>
 8008cd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cdc:	6006      	str	r6, [r0, #0]
 8008cde:	60c6      	str	r6, [r0, #12]
 8008ce0:	b13c      	cbz	r4, 8008cf2 <_Bfree+0x3a>
 8008ce2:	69eb      	ldr	r3, [r5, #28]
 8008ce4:	6862      	ldr	r2, [r4, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cec:	6021      	str	r1, [r4, #0]
 8008cee:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008cf2:	bd70      	pop	{r4, r5, r6, pc}
 8008cf4:	08009b9d 	.word	0x08009b9d
 8008cf8:	08009c1d 	.word	0x08009c1d

08008cfc <__multadd>:
 8008cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d00:	690d      	ldr	r5, [r1, #16]
 8008d02:	4607      	mov	r7, r0
 8008d04:	460c      	mov	r4, r1
 8008d06:	461e      	mov	r6, r3
 8008d08:	f101 0c14 	add.w	ip, r1, #20
 8008d0c:	2000      	movs	r0, #0
 8008d0e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d12:	b299      	uxth	r1, r3
 8008d14:	fb02 6101 	mla	r1, r2, r1, r6
 8008d18:	0c1e      	lsrs	r6, r3, #16
 8008d1a:	0c0b      	lsrs	r3, r1, #16
 8008d1c:	fb02 3306 	mla	r3, r2, r6, r3
 8008d20:	b289      	uxth	r1, r1
 8008d22:	3001      	adds	r0, #1
 8008d24:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d28:	4285      	cmp	r5, r0
 8008d2a:	f84c 1b04 	str.w	r1, [ip], #4
 8008d2e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d32:	dcec      	bgt.n	8008d0e <__multadd+0x12>
 8008d34:	b30e      	cbz	r6, 8008d7a <__multadd+0x7e>
 8008d36:	68a3      	ldr	r3, [r4, #8]
 8008d38:	42ab      	cmp	r3, r5
 8008d3a:	dc19      	bgt.n	8008d70 <__multadd+0x74>
 8008d3c:	6861      	ldr	r1, [r4, #4]
 8008d3e:	4638      	mov	r0, r7
 8008d40:	3101      	adds	r1, #1
 8008d42:	f7ff ff79 	bl	8008c38 <_Balloc>
 8008d46:	4680      	mov	r8, r0
 8008d48:	b928      	cbnz	r0, 8008d56 <__multadd+0x5a>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008d80 <__multadd+0x84>)
 8008d4e:	480d      	ldr	r0, [pc, #52]	@ (8008d84 <__multadd+0x88>)
 8008d50:	21ba      	movs	r1, #186	@ 0xba
 8008d52:	f000 fd8b 	bl	800986c <__assert_func>
 8008d56:	6922      	ldr	r2, [r4, #16]
 8008d58:	3202      	adds	r2, #2
 8008d5a:	f104 010c 	add.w	r1, r4, #12
 8008d5e:	0092      	lsls	r2, r2, #2
 8008d60:	300c      	adds	r0, #12
 8008d62:	f000 fd75 	bl	8009850 <memcpy>
 8008d66:	4621      	mov	r1, r4
 8008d68:	4638      	mov	r0, r7
 8008d6a:	f7ff ffa5 	bl	8008cb8 <_Bfree>
 8008d6e:	4644      	mov	r4, r8
 8008d70:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d74:	3501      	adds	r5, #1
 8008d76:	615e      	str	r6, [r3, #20]
 8008d78:	6125      	str	r5, [r4, #16]
 8008d7a:	4620      	mov	r0, r4
 8008d7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d80:	08009c0c 	.word	0x08009c0c
 8008d84:	08009c1d 	.word	0x08009c1d

08008d88 <__hi0bits>:
 8008d88:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	bf36      	itet	cc
 8008d90:	0403      	lslcc	r3, r0, #16
 8008d92:	2000      	movcs	r0, #0
 8008d94:	2010      	movcc	r0, #16
 8008d96:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d9a:	bf3c      	itt	cc
 8008d9c:	021b      	lslcc	r3, r3, #8
 8008d9e:	3008      	addcc	r0, #8
 8008da0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008da4:	bf3c      	itt	cc
 8008da6:	011b      	lslcc	r3, r3, #4
 8008da8:	3004      	addcc	r0, #4
 8008daa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008dae:	bf3c      	itt	cc
 8008db0:	009b      	lslcc	r3, r3, #2
 8008db2:	3002      	addcc	r0, #2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	db05      	blt.n	8008dc4 <__hi0bits+0x3c>
 8008db8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008dbc:	f100 0001 	add.w	r0, r0, #1
 8008dc0:	bf08      	it	eq
 8008dc2:	2020      	moveq	r0, #32
 8008dc4:	4770      	bx	lr

08008dc6 <__lo0bits>:
 8008dc6:	6803      	ldr	r3, [r0, #0]
 8008dc8:	4602      	mov	r2, r0
 8008dca:	f013 0007 	ands.w	r0, r3, #7
 8008dce:	d00b      	beq.n	8008de8 <__lo0bits+0x22>
 8008dd0:	07d9      	lsls	r1, r3, #31
 8008dd2:	d421      	bmi.n	8008e18 <__lo0bits+0x52>
 8008dd4:	0798      	lsls	r0, r3, #30
 8008dd6:	bf49      	itett	mi
 8008dd8:	085b      	lsrmi	r3, r3, #1
 8008dda:	089b      	lsrpl	r3, r3, #2
 8008ddc:	2001      	movmi	r0, #1
 8008dde:	6013      	strmi	r3, [r2, #0]
 8008de0:	bf5c      	itt	pl
 8008de2:	6013      	strpl	r3, [r2, #0]
 8008de4:	2002      	movpl	r0, #2
 8008de6:	4770      	bx	lr
 8008de8:	b299      	uxth	r1, r3
 8008dea:	b909      	cbnz	r1, 8008df0 <__lo0bits+0x2a>
 8008dec:	0c1b      	lsrs	r3, r3, #16
 8008dee:	2010      	movs	r0, #16
 8008df0:	b2d9      	uxtb	r1, r3
 8008df2:	b909      	cbnz	r1, 8008df8 <__lo0bits+0x32>
 8008df4:	3008      	adds	r0, #8
 8008df6:	0a1b      	lsrs	r3, r3, #8
 8008df8:	0719      	lsls	r1, r3, #28
 8008dfa:	bf04      	itt	eq
 8008dfc:	091b      	lsreq	r3, r3, #4
 8008dfe:	3004      	addeq	r0, #4
 8008e00:	0799      	lsls	r1, r3, #30
 8008e02:	bf04      	itt	eq
 8008e04:	089b      	lsreq	r3, r3, #2
 8008e06:	3002      	addeq	r0, #2
 8008e08:	07d9      	lsls	r1, r3, #31
 8008e0a:	d403      	bmi.n	8008e14 <__lo0bits+0x4e>
 8008e0c:	085b      	lsrs	r3, r3, #1
 8008e0e:	f100 0001 	add.w	r0, r0, #1
 8008e12:	d003      	beq.n	8008e1c <__lo0bits+0x56>
 8008e14:	6013      	str	r3, [r2, #0]
 8008e16:	4770      	bx	lr
 8008e18:	2000      	movs	r0, #0
 8008e1a:	4770      	bx	lr
 8008e1c:	2020      	movs	r0, #32
 8008e1e:	4770      	bx	lr

08008e20 <__i2b>:
 8008e20:	b510      	push	{r4, lr}
 8008e22:	460c      	mov	r4, r1
 8008e24:	2101      	movs	r1, #1
 8008e26:	f7ff ff07 	bl	8008c38 <_Balloc>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	b928      	cbnz	r0, 8008e3a <__i2b+0x1a>
 8008e2e:	4b05      	ldr	r3, [pc, #20]	@ (8008e44 <__i2b+0x24>)
 8008e30:	4805      	ldr	r0, [pc, #20]	@ (8008e48 <__i2b+0x28>)
 8008e32:	f240 1145 	movw	r1, #325	@ 0x145
 8008e36:	f000 fd19 	bl	800986c <__assert_func>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	6144      	str	r4, [r0, #20]
 8008e3e:	6103      	str	r3, [r0, #16]
 8008e40:	bd10      	pop	{r4, pc}
 8008e42:	bf00      	nop
 8008e44:	08009c0c 	.word	0x08009c0c
 8008e48:	08009c1d 	.word	0x08009c1d

08008e4c <__multiply>:
 8008e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e50:	4617      	mov	r7, r2
 8008e52:	690a      	ldr	r2, [r1, #16]
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	bfa8      	it	ge
 8008e5a:	463b      	movge	r3, r7
 8008e5c:	4689      	mov	r9, r1
 8008e5e:	bfa4      	itt	ge
 8008e60:	460f      	movge	r7, r1
 8008e62:	4699      	movge	r9, r3
 8008e64:	693d      	ldr	r5, [r7, #16]
 8008e66:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	eb05 060a 	add.w	r6, r5, sl
 8008e72:	42b3      	cmp	r3, r6
 8008e74:	b085      	sub	sp, #20
 8008e76:	bfb8      	it	lt
 8008e78:	3101      	addlt	r1, #1
 8008e7a:	f7ff fedd 	bl	8008c38 <_Balloc>
 8008e7e:	b930      	cbnz	r0, 8008e8e <__multiply+0x42>
 8008e80:	4602      	mov	r2, r0
 8008e82:	4b41      	ldr	r3, [pc, #260]	@ (8008f88 <__multiply+0x13c>)
 8008e84:	4841      	ldr	r0, [pc, #260]	@ (8008f8c <__multiply+0x140>)
 8008e86:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008e8a:	f000 fcef 	bl	800986c <__assert_func>
 8008e8e:	f100 0414 	add.w	r4, r0, #20
 8008e92:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008e96:	4623      	mov	r3, r4
 8008e98:	2200      	movs	r2, #0
 8008e9a:	4573      	cmp	r3, lr
 8008e9c:	d320      	bcc.n	8008ee0 <__multiply+0x94>
 8008e9e:	f107 0814 	add.w	r8, r7, #20
 8008ea2:	f109 0114 	add.w	r1, r9, #20
 8008ea6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008eaa:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008eae:	9302      	str	r3, [sp, #8]
 8008eb0:	1beb      	subs	r3, r5, r7
 8008eb2:	3b15      	subs	r3, #21
 8008eb4:	f023 0303 	bic.w	r3, r3, #3
 8008eb8:	3304      	adds	r3, #4
 8008eba:	3715      	adds	r7, #21
 8008ebc:	42bd      	cmp	r5, r7
 8008ebe:	bf38      	it	cc
 8008ec0:	2304      	movcc	r3, #4
 8008ec2:	9301      	str	r3, [sp, #4]
 8008ec4:	9b02      	ldr	r3, [sp, #8]
 8008ec6:	9103      	str	r1, [sp, #12]
 8008ec8:	428b      	cmp	r3, r1
 8008eca:	d80c      	bhi.n	8008ee6 <__multiply+0x9a>
 8008ecc:	2e00      	cmp	r6, #0
 8008ece:	dd03      	ble.n	8008ed8 <__multiply+0x8c>
 8008ed0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d055      	beq.n	8008f84 <__multiply+0x138>
 8008ed8:	6106      	str	r6, [r0, #16]
 8008eda:	b005      	add	sp, #20
 8008edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee0:	f843 2b04 	str.w	r2, [r3], #4
 8008ee4:	e7d9      	b.n	8008e9a <__multiply+0x4e>
 8008ee6:	f8b1 a000 	ldrh.w	sl, [r1]
 8008eea:	f1ba 0f00 	cmp.w	sl, #0
 8008eee:	d01f      	beq.n	8008f30 <__multiply+0xe4>
 8008ef0:	46c4      	mov	ip, r8
 8008ef2:	46a1      	mov	r9, r4
 8008ef4:	2700      	movs	r7, #0
 8008ef6:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008efa:	f8d9 3000 	ldr.w	r3, [r9]
 8008efe:	fa1f fb82 	uxth.w	fp, r2
 8008f02:	b29b      	uxth	r3, r3
 8008f04:	fb0a 330b 	mla	r3, sl, fp, r3
 8008f08:	443b      	add	r3, r7
 8008f0a:	f8d9 7000 	ldr.w	r7, [r9]
 8008f0e:	0c12      	lsrs	r2, r2, #16
 8008f10:	0c3f      	lsrs	r7, r7, #16
 8008f12:	fb0a 7202 	mla	r2, sl, r2, r7
 8008f16:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f20:	4565      	cmp	r5, ip
 8008f22:	f849 3b04 	str.w	r3, [r9], #4
 8008f26:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008f2a:	d8e4      	bhi.n	8008ef6 <__multiply+0xaa>
 8008f2c:	9b01      	ldr	r3, [sp, #4]
 8008f2e:	50e7      	str	r7, [r4, r3]
 8008f30:	9b03      	ldr	r3, [sp, #12]
 8008f32:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008f36:	3104      	adds	r1, #4
 8008f38:	f1b9 0f00 	cmp.w	r9, #0
 8008f3c:	d020      	beq.n	8008f80 <__multiply+0x134>
 8008f3e:	6823      	ldr	r3, [r4, #0]
 8008f40:	4647      	mov	r7, r8
 8008f42:	46a4      	mov	ip, r4
 8008f44:	f04f 0a00 	mov.w	sl, #0
 8008f48:	f8b7 b000 	ldrh.w	fp, [r7]
 8008f4c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008f50:	fb09 220b 	mla	r2, r9, fp, r2
 8008f54:	4452      	add	r2, sl
 8008f56:	b29b      	uxth	r3, r3
 8008f58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f5c:	f84c 3b04 	str.w	r3, [ip], #4
 8008f60:	f857 3b04 	ldr.w	r3, [r7], #4
 8008f64:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f68:	f8bc 3000 	ldrh.w	r3, [ip]
 8008f6c:	fb09 330a 	mla	r3, r9, sl, r3
 8008f70:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008f74:	42bd      	cmp	r5, r7
 8008f76:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f7a:	d8e5      	bhi.n	8008f48 <__multiply+0xfc>
 8008f7c:	9a01      	ldr	r2, [sp, #4]
 8008f7e:	50a3      	str	r3, [r4, r2]
 8008f80:	3404      	adds	r4, #4
 8008f82:	e79f      	b.n	8008ec4 <__multiply+0x78>
 8008f84:	3e01      	subs	r6, #1
 8008f86:	e7a1      	b.n	8008ecc <__multiply+0x80>
 8008f88:	08009c0c 	.word	0x08009c0c
 8008f8c:	08009c1d 	.word	0x08009c1d

08008f90 <__pow5mult>:
 8008f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f94:	4615      	mov	r5, r2
 8008f96:	f012 0203 	ands.w	r2, r2, #3
 8008f9a:	4607      	mov	r7, r0
 8008f9c:	460e      	mov	r6, r1
 8008f9e:	d007      	beq.n	8008fb0 <__pow5mult+0x20>
 8008fa0:	4c25      	ldr	r4, [pc, #148]	@ (8009038 <__pow5mult+0xa8>)
 8008fa2:	3a01      	subs	r2, #1
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008faa:	f7ff fea7 	bl	8008cfc <__multadd>
 8008fae:	4606      	mov	r6, r0
 8008fb0:	10ad      	asrs	r5, r5, #2
 8008fb2:	d03d      	beq.n	8009030 <__pow5mult+0xa0>
 8008fb4:	69fc      	ldr	r4, [r7, #28]
 8008fb6:	b97c      	cbnz	r4, 8008fd8 <__pow5mult+0x48>
 8008fb8:	2010      	movs	r0, #16
 8008fba:	f7ff fd87 	bl	8008acc <malloc>
 8008fbe:	4602      	mov	r2, r0
 8008fc0:	61f8      	str	r0, [r7, #28]
 8008fc2:	b928      	cbnz	r0, 8008fd0 <__pow5mult+0x40>
 8008fc4:	4b1d      	ldr	r3, [pc, #116]	@ (800903c <__pow5mult+0xac>)
 8008fc6:	481e      	ldr	r0, [pc, #120]	@ (8009040 <__pow5mult+0xb0>)
 8008fc8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008fcc:	f000 fc4e 	bl	800986c <__assert_func>
 8008fd0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008fd4:	6004      	str	r4, [r0, #0]
 8008fd6:	60c4      	str	r4, [r0, #12]
 8008fd8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008fdc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008fe0:	b94c      	cbnz	r4, 8008ff6 <__pow5mult+0x66>
 8008fe2:	f240 2171 	movw	r1, #625	@ 0x271
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	f7ff ff1a 	bl	8008e20 <__i2b>
 8008fec:	2300      	movs	r3, #0
 8008fee:	f8c8 0008 	str.w	r0, [r8, #8]
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	6003      	str	r3, [r0, #0]
 8008ff6:	f04f 0900 	mov.w	r9, #0
 8008ffa:	07eb      	lsls	r3, r5, #31
 8008ffc:	d50a      	bpl.n	8009014 <__pow5mult+0x84>
 8008ffe:	4631      	mov	r1, r6
 8009000:	4622      	mov	r2, r4
 8009002:	4638      	mov	r0, r7
 8009004:	f7ff ff22 	bl	8008e4c <__multiply>
 8009008:	4631      	mov	r1, r6
 800900a:	4680      	mov	r8, r0
 800900c:	4638      	mov	r0, r7
 800900e:	f7ff fe53 	bl	8008cb8 <_Bfree>
 8009012:	4646      	mov	r6, r8
 8009014:	106d      	asrs	r5, r5, #1
 8009016:	d00b      	beq.n	8009030 <__pow5mult+0xa0>
 8009018:	6820      	ldr	r0, [r4, #0]
 800901a:	b938      	cbnz	r0, 800902c <__pow5mult+0x9c>
 800901c:	4622      	mov	r2, r4
 800901e:	4621      	mov	r1, r4
 8009020:	4638      	mov	r0, r7
 8009022:	f7ff ff13 	bl	8008e4c <__multiply>
 8009026:	6020      	str	r0, [r4, #0]
 8009028:	f8c0 9000 	str.w	r9, [r0]
 800902c:	4604      	mov	r4, r0
 800902e:	e7e4      	b.n	8008ffa <__pow5mult+0x6a>
 8009030:	4630      	mov	r0, r6
 8009032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009036:	bf00      	nop
 8009038:	08009cd0 	.word	0x08009cd0
 800903c:	08009b9d 	.word	0x08009b9d
 8009040:	08009c1d 	.word	0x08009c1d

08009044 <__lshift>:
 8009044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009048:	460c      	mov	r4, r1
 800904a:	6849      	ldr	r1, [r1, #4]
 800904c:	6923      	ldr	r3, [r4, #16]
 800904e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009052:	68a3      	ldr	r3, [r4, #8]
 8009054:	4607      	mov	r7, r0
 8009056:	4691      	mov	r9, r2
 8009058:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800905c:	f108 0601 	add.w	r6, r8, #1
 8009060:	42b3      	cmp	r3, r6
 8009062:	db0b      	blt.n	800907c <__lshift+0x38>
 8009064:	4638      	mov	r0, r7
 8009066:	f7ff fde7 	bl	8008c38 <_Balloc>
 800906a:	4605      	mov	r5, r0
 800906c:	b948      	cbnz	r0, 8009082 <__lshift+0x3e>
 800906e:	4602      	mov	r2, r0
 8009070:	4b28      	ldr	r3, [pc, #160]	@ (8009114 <__lshift+0xd0>)
 8009072:	4829      	ldr	r0, [pc, #164]	@ (8009118 <__lshift+0xd4>)
 8009074:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009078:	f000 fbf8 	bl	800986c <__assert_func>
 800907c:	3101      	adds	r1, #1
 800907e:	005b      	lsls	r3, r3, #1
 8009080:	e7ee      	b.n	8009060 <__lshift+0x1c>
 8009082:	2300      	movs	r3, #0
 8009084:	f100 0114 	add.w	r1, r0, #20
 8009088:	f100 0210 	add.w	r2, r0, #16
 800908c:	4618      	mov	r0, r3
 800908e:	4553      	cmp	r3, sl
 8009090:	db33      	blt.n	80090fa <__lshift+0xb6>
 8009092:	6920      	ldr	r0, [r4, #16]
 8009094:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009098:	f104 0314 	add.w	r3, r4, #20
 800909c:	f019 091f 	ands.w	r9, r9, #31
 80090a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80090a8:	d02b      	beq.n	8009102 <__lshift+0xbe>
 80090aa:	f1c9 0e20 	rsb	lr, r9, #32
 80090ae:	468a      	mov	sl, r1
 80090b0:	2200      	movs	r2, #0
 80090b2:	6818      	ldr	r0, [r3, #0]
 80090b4:	fa00 f009 	lsl.w	r0, r0, r9
 80090b8:	4310      	orrs	r0, r2
 80090ba:	f84a 0b04 	str.w	r0, [sl], #4
 80090be:	f853 2b04 	ldr.w	r2, [r3], #4
 80090c2:	459c      	cmp	ip, r3
 80090c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80090c8:	d8f3      	bhi.n	80090b2 <__lshift+0x6e>
 80090ca:	ebac 0304 	sub.w	r3, ip, r4
 80090ce:	3b15      	subs	r3, #21
 80090d0:	f023 0303 	bic.w	r3, r3, #3
 80090d4:	3304      	adds	r3, #4
 80090d6:	f104 0015 	add.w	r0, r4, #21
 80090da:	4560      	cmp	r0, ip
 80090dc:	bf88      	it	hi
 80090de:	2304      	movhi	r3, #4
 80090e0:	50ca      	str	r2, [r1, r3]
 80090e2:	b10a      	cbz	r2, 80090e8 <__lshift+0xa4>
 80090e4:	f108 0602 	add.w	r6, r8, #2
 80090e8:	3e01      	subs	r6, #1
 80090ea:	4638      	mov	r0, r7
 80090ec:	612e      	str	r6, [r5, #16]
 80090ee:	4621      	mov	r1, r4
 80090f0:	f7ff fde2 	bl	8008cb8 <_Bfree>
 80090f4:	4628      	mov	r0, r5
 80090f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80090fe:	3301      	adds	r3, #1
 8009100:	e7c5      	b.n	800908e <__lshift+0x4a>
 8009102:	3904      	subs	r1, #4
 8009104:	f853 2b04 	ldr.w	r2, [r3], #4
 8009108:	f841 2f04 	str.w	r2, [r1, #4]!
 800910c:	459c      	cmp	ip, r3
 800910e:	d8f9      	bhi.n	8009104 <__lshift+0xc0>
 8009110:	e7ea      	b.n	80090e8 <__lshift+0xa4>
 8009112:	bf00      	nop
 8009114:	08009c0c 	.word	0x08009c0c
 8009118:	08009c1d 	.word	0x08009c1d

0800911c <__mcmp>:
 800911c:	690a      	ldr	r2, [r1, #16]
 800911e:	4603      	mov	r3, r0
 8009120:	6900      	ldr	r0, [r0, #16]
 8009122:	1a80      	subs	r0, r0, r2
 8009124:	b530      	push	{r4, r5, lr}
 8009126:	d10e      	bne.n	8009146 <__mcmp+0x2a>
 8009128:	3314      	adds	r3, #20
 800912a:	3114      	adds	r1, #20
 800912c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009130:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009134:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009138:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800913c:	4295      	cmp	r5, r2
 800913e:	d003      	beq.n	8009148 <__mcmp+0x2c>
 8009140:	d205      	bcs.n	800914e <__mcmp+0x32>
 8009142:	f04f 30ff 	mov.w	r0, #4294967295
 8009146:	bd30      	pop	{r4, r5, pc}
 8009148:	42a3      	cmp	r3, r4
 800914a:	d3f3      	bcc.n	8009134 <__mcmp+0x18>
 800914c:	e7fb      	b.n	8009146 <__mcmp+0x2a>
 800914e:	2001      	movs	r0, #1
 8009150:	e7f9      	b.n	8009146 <__mcmp+0x2a>
	...

08009154 <__mdiff>:
 8009154:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009158:	4689      	mov	r9, r1
 800915a:	4606      	mov	r6, r0
 800915c:	4611      	mov	r1, r2
 800915e:	4648      	mov	r0, r9
 8009160:	4614      	mov	r4, r2
 8009162:	f7ff ffdb 	bl	800911c <__mcmp>
 8009166:	1e05      	subs	r5, r0, #0
 8009168:	d112      	bne.n	8009190 <__mdiff+0x3c>
 800916a:	4629      	mov	r1, r5
 800916c:	4630      	mov	r0, r6
 800916e:	f7ff fd63 	bl	8008c38 <_Balloc>
 8009172:	4602      	mov	r2, r0
 8009174:	b928      	cbnz	r0, 8009182 <__mdiff+0x2e>
 8009176:	4b3f      	ldr	r3, [pc, #252]	@ (8009274 <__mdiff+0x120>)
 8009178:	f240 2137 	movw	r1, #567	@ 0x237
 800917c:	483e      	ldr	r0, [pc, #248]	@ (8009278 <__mdiff+0x124>)
 800917e:	f000 fb75 	bl	800986c <__assert_func>
 8009182:	2301      	movs	r3, #1
 8009184:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009188:	4610      	mov	r0, r2
 800918a:	b003      	add	sp, #12
 800918c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009190:	bfbc      	itt	lt
 8009192:	464b      	movlt	r3, r9
 8009194:	46a1      	movlt	r9, r4
 8009196:	4630      	mov	r0, r6
 8009198:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800919c:	bfba      	itte	lt
 800919e:	461c      	movlt	r4, r3
 80091a0:	2501      	movlt	r5, #1
 80091a2:	2500      	movge	r5, #0
 80091a4:	f7ff fd48 	bl	8008c38 <_Balloc>
 80091a8:	4602      	mov	r2, r0
 80091aa:	b918      	cbnz	r0, 80091b4 <__mdiff+0x60>
 80091ac:	4b31      	ldr	r3, [pc, #196]	@ (8009274 <__mdiff+0x120>)
 80091ae:	f240 2145 	movw	r1, #581	@ 0x245
 80091b2:	e7e3      	b.n	800917c <__mdiff+0x28>
 80091b4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80091b8:	6926      	ldr	r6, [r4, #16]
 80091ba:	60c5      	str	r5, [r0, #12]
 80091bc:	f109 0310 	add.w	r3, r9, #16
 80091c0:	f109 0514 	add.w	r5, r9, #20
 80091c4:	f104 0e14 	add.w	lr, r4, #20
 80091c8:	f100 0b14 	add.w	fp, r0, #20
 80091cc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80091d0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	46d9      	mov	r9, fp
 80091d8:	f04f 0c00 	mov.w	ip, #0
 80091dc:	9b01      	ldr	r3, [sp, #4]
 80091de:	f85e 0b04 	ldr.w	r0, [lr], #4
 80091e2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80091e6:	9301      	str	r3, [sp, #4]
 80091e8:	fa1f f38a 	uxth.w	r3, sl
 80091ec:	4619      	mov	r1, r3
 80091ee:	b283      	uxth	r3, r0
 80091f0:	1acb      	subs	r3, r1, r3
 80091f2:	0c00      	lsrs	r0, r0, #16
 80091f4:	4463      	add	r3, ip
 80091f6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80091fa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80091fe:	b29b      	uxth	r3, r3
 8009200:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009204:	4576      	cmp	r6, lr
 8009206:	f849 3b04 	str.w	r3, [r9], #4
 800920a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800920e:	d8e5      	bhi.n	80091dc <__mdiff+0x88>
 8009210:	1b33      	subs	r3, r6, r4
 8009212:	3b15      	subs	r3, #21
 8009214:	f023 0303 	bic.w	r3, r3, #3
 8009218:	3415      	adds	r4, #21
 800921a:	3304      	adds	r3, #4
 800921c:	42a6      	cmp	r6, r4
 800921e:	bf38      	it	cc
 8009220:	2304      	movcc	r3, #4
 8009222:	441d      	add	r5, r3
 8009224:	445b      	add	r3, fp
 8009226:	461e      	mov	r6, r3
 8009228:	462c      	mov	r4, r5
 800922a:	4544      	cmp	r4, r8
 800922c:	d30e      	bcc.n	800924c <__mdiff+0xf8>
 800922e:	f108 0103 	add.w	r1, r8, #3
 8009232:	1b49      	subs	r1, r1, r5
 8009234:	f021 0103 	bic.w	r1, r1, #3
 8009238:	3d03      	subs	r5, #3
 800923a:	45a8      	cmp	r8, r5
 800923c:	bf38      	it	cc
 800923e:	2100      	movcc	r1, #0
 8009240:	440b      	add	r3, r1
 8009242:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009246:	b191      	cbz	r1, 800926e <__mdiff+0x11a>
 8009248:	6117      	str	r7, [r2, #16]
 800924a:	e79d      	b.n	8009188 <__mdiff+0x34>
 800924c:	f854 1b04 	ldr.w	r1, [r4], #4
 8009250:	46e6      	mov	lr, ip
 8009252:	0c08      	lsrs	r0, r1, #16
 8009254:	fa1c fc81 	uxtah	ip, ip, r1
 8009258:	4471      	add	r1, lr
 800925a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800925e:	b289      	uxth	r1, r1
 8009260:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009264:	f846 1b04 	str.w	r1, [r6], #4
 8009268:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800926c:	e7dd      	b.n	800922a <__mdiff+0xd6>
 800926e:	3f01      	subs	r7, #1
 8009270:	e7e7      	b.n	8009242 <__mdiff+0xee>
 8009272:	bf00      	nop
 8009274:	08009c0c 	.word	0x08009c0c
 8009278:	08009c1d 	.word	0x08009c1d

0800927c <__d2b>:
 800927c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009280:	460f      	mov	r7, r1
 8009282:	2101      	movs	r1, #1
 8009284:	ec59 8b10 	vmov	r8, r9, d0
 8009288:	4616      	mov	r6, r2
 800928a:	f7ff fcd5 	bl	8008c38 <_Balloc>
 800928e:	4604      	mov	r4, r0
 8009290:	b930      	cbnz	r0, 80092a0 <__d2b+0x24>
 8009292:	4602      	mov	r2, r0
 8009294:	4b23      	ldr	r3, [pc, #140]	@ (8009324 <__d2b+0xa8>)
 8009296:	4824      	ldr	r0, [pc, #144]	@ (8009328 <__d2b+0xac>)
 8009298:	f240 310f 	movw	r1, #783	@ 0x30f
 800929c:	f000 fae6 	bl	800986c <__assert_func>
 80092a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80092a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80092a8:	b10d      	cbz	r5, 80092ae <__d2b+0x32>
 80092aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80092ae:	9301      	str	r3, [sp, #4]
 80092b0:	f1b8 0300 	subs.w	r3, r8, #0
 80092b4:	d023      	beq.n	80092fe <__d2b+0x82>
 80092b6:	4668      	mov	r0, sp
 80092b8:	9300      	str	r3, [sp, #0]
 80092ba:	f7ff fd84 	bl	8008dc6 <__lo0bits>
 80092be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80092c2:	b1d0      	cbz	r0, 80092fa <__d2b+0x7e>
 80092c4:	f1c0 0320 	rsb	r3, r0, #32
 80092c8:	fa02 f303 	lsl.w	r3, r2, r3
 80092cc:	430b      	orrs	r3, r1
 80092ce:	40c2      	lsrs	r2, r0
 80092d0:	6163      	str	r3, [r4, #20]
 80092d2:	9201      	str	r2, [sp, #4]
 80092d4:	9b01      	ldr	r3, [sp, #4]
 80092d6:	61a3      	str	r3, [r4, #24]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	bf0c      	ite	eq
 80092dc:	2201      	moveq	r2, #1
 80092de:	2202      	movne	r2, #2
 80092e0:	6122      	str	r2, [r4, #16]
 80092e2:	b1a5      	cbz	r5, 800930e <__d2b+0x92>
 80092e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80092e8:	4405      	add	r5, r0
 80092ea:	603d      	str	r5, [r7, #0]
 80092ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80092f0:	6030      	str	r0, [r6, #0]
 80092f2:	4620      	mov	r0, r4
 80092f4:	b003      	add	sp, #12
 80092f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092fa:	6161      	str	r1, [r4, #20]
 80092fc:	e7ea      	b.n	80092d4 <__d2b+0x58>
 80092fe:	a801      	add	r0, sp, #4
 8009300:	f7ff fd61 	bl	8008dc6 <__lo0bits>
 8009304:	9b01      	ldr	r3, [sp, #4]
 8009306:	6163      	str	r3, [r4, #20]
 8009308:	3020      	adds	r0, #32
 800930a:	2201      	movs	r2, #1
 800930c:	e7e8      	b.n	80092e0 <__d2b+0x64>
 800930e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009312:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009316:	6038      	str	r0, [r7, #0]
 8009318:	6918      	ldr	r0, [r3, #16]
 800931a:	f7ff fd35 	bl	8008d88 <__hi0bits>
 800931e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009322:	e7e5      	b.n	80092f0 <__d2b+0x74>
 8009324:	08009c0c 	.word	0x08009c0c
 8009328:	08009c1d 	.word	0x08009c1d

0800932c <__sfputc_r>:
 800932c:	6893      	ldr	r3, [r2, #8]
 800932e:	3b01      	subs	r3, #1
 8009330:	2b00      	cmp	r3, #0
 8009332:	b410      	push	{r4}
 8009334:	6093      	str	r3, [r2, #8]
 8009336:	da08      	bge.n	800934a <__sfputc_r+0x1e>
 8009338:	6994      	ldr	r4, [r2, #24]
 800933a:	42a3      	cmp	r3, r4
 800933c:	db01      	blt.n	8009342 <__sfputc_r+0x16>
 800933e:	290a      	cmp	r1, #10
 8009340:	d103      	bne.n	800934a <__sfputc_r+0x1e>
 8009342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009346:	f000 b9df 	b.w	8009708 <__swbuf_r>
 800934a:	6813      	ldr	r3, [r2, #0]
 800934c:	1c58      	adds	r0, r3, #1
 800934e:	6010      	str	r0, [r2, #0]
 8009350:	7019      	strb	r1, [r3, #0]
 8009352:	4608      	mov	r0, r1
 8009354:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009358:	4770      	bx	lr

0800935a <__sfputs_r>:
 800935a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800935c:	4606      	mov	r6, r0
 800935e:	460f      	mov	r7, r1
 8009360:	4614      	mov	r4, r2
 8009362:	18d5      	adds	r5, r2, r3
 8009364:	42ac      	cmp	r4, r5
 8009366:	d101      	bne.n	800936c <__sfputs_r+0x12>
 8009368:	2000      	movs	r0, #0
 800936a:	e007      	b.n	800937c <__sfputs_r+0x22>
 800936c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009370:	463a      	mov	r2, r7
 8009372:	4630      	mov	r0, r6
 8009374:	f7ff ffda 	bl	800932c <__sfputc_r>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d1f3      	bne.n	8009364 <__sfputs_r+0xa>
 800937c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009380 <_vfiprintf_r>:
 8009380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009384:	460d      	mov	r5, r1
 8009386:	b09d      	sub	sp, #116	@ 0x74
 8009388:	4614      	mov	r4, r2
 800938a:	4698      	mov	r8, r3
 800938c:	4606      	mov	r6, r0
 800938e:	b118      	cbz	r0, 8009398 <_vfiprintf_r+0x18>
 8009390:	6a03      	ldr	r3, [r0, #32]
 8009392:	b90b      	cbnz	r3, 8009398 <_vfiprintf_r+0x18>
 8009394:	f7fe fbec 	bl	8007b70 <__sinit>
 8009398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800939a:	07d9      	lsls	r1, r3, #31
 800939c:	d405      	bmi.n	80093aa <_vfiprintf_r+0x2a>
 800939e:	89ab      	ldrh	r3, [r5, #12]
 80093a0:	059a      	lsls	r2, r3, #22
 80093a2:	d402      	bmi.n	80093aa <_vfiprintf_r+0x2a>
 80093a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093a6:	f7fe fcec 	bl	8007d82 <__retarget_lock_acquire_recursive>
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	071b      	lsls	r3, r3, #28
 80093ae:	d501      	bpl.n	80093b4 <_vfiprintf_r+0x34>
 80093b0:	692b      	ldr	r3, [r5, #16]
 80093b2:	b99b      	cbnz	r3, 80093dc <_vfiprintf_r+0x5c>
 80093b4:	4629      	mov	r1, r5
 80093b6:	4630      	mov	r0, r6
 80093b8:	f000 f9e4 	bl	8009784 <__swsetup_r>
 80093bc:	b170      	cbz	r0, 80093dc <_vfiprintf_r+0x5c>
 80093be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80093c0:	07dc      	lsls	r4, r3, #31
 80093c2:	d504      	bpl.n	80093ce <_vfiprintf_r+0x4e>
 80093c4:	f04f 30ff 	mov.w	r0, #4294967295
 80093c8:	b01d      	add	sp, #116	@ 0x74
 80093ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093ce:	89ab      	ldrh	r3, [r5, #12]
 80093d0:	0598      	lsls	r0, r3, #22
 80093d2:	d4f7      	bmi.n	80093c4 <_vfiprintf_r+0x44>
 80093d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80093d6:	f7fe fcd5 	bl	8007d84 <__retarget_lock_release_recursive>
 80093da:	e7f3      	b.n	80093c4 <_vfiprintf_r+0x44>
 80093dc:	2300      	movs	r3, #0
 80093de:	9309      	str	r3, [sp, #36]	@ 0x24
 80093e0:	2320      	movs	r3, #32
 80093e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80093e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80093ea:	2330      	movs	r3, #48	@ 0x30
 80093ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800959c <_vfiprintf_r+0x21c>
 80093f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80093f4:	f04f 0901 	mov.w	r9, #1
 80093f8:	4623      	mov	r3, r4
 80093fa:	469a      	mov	sl, r3
 80093fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009400:	b10a      	cbz	r2, 8009406 <_vfiprintf_r+0x86>
 8009402:	2a25      	cmp	r2, #37	@ 0x25
 8009404:	d1f9      	bne.n	80093fa <_vfiprintf_r+0x7a>
 8009406:	ebba 0b04 	subs.w	fp, sl, r4
 800940a:	d00b      	beq.n	8009424 <_vfiprintf_r+0xa4>
 800940c:	465b      	mov	r3, fp
 800940e:	4622      	mov	r2, r4
 8009410:	4629      	mov	r1, r5
 8009412:	4630      	mov	r0, r6
 8009414:	f7ff ffa1 	bl	800935a <__sfputs_r>
 8009418:	3001      	adds	r0, #1
 800941a:	f000 80a7 	beq.w	800956c <_vfiprintf_r+0x1ec>
 800941e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009420:	445a      	add	r2, fp
 8009422:	9209      	str	r2, [sp, #36]	@ 0x24
 8009424:	f89a 3000 	ldrb.w	r3, [sl]
 8009428:	2b00      	cmp	r3, #0
 800942a:	f000 809f 	beq.w	800956c <_vfiprintf_r+0x1ec>
 800942e:	2300      	movs	r3, #0
 8009430:	f04f 32ff 	mov.w	r2, #4294967295
 8009434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009438:	f10a 0a01 	add.w	sl, sl, #1
 800943c:	9304      	str	r3, [sp, #16]
 800943e:	9307      	str	r3, [sp, #28]
 8009440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009444:	931a      	str	r3, [sp, #104]	@ 0x68
 8009446:	4654      	mov	r4, sl
 8009448:	2205      	movs	r2, #5
 800944a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800944e:	4853      	ldr	r0, [pc, #332]	@ (800959c <_vfiprintf_r+0x21c>)
 8009450:	f7f6 fec6 	bl	80001e0 <memchr>
 8009454:	9a04      	ldr	r2, [sp, #16]
 8009456:	b9d8      	cbnz	r0, 8009490 <_vfiprintf_r+0x110>
 8009458:	06d1      	lsls	r1, r2, #27
 800945a:	bf44      	itt	mi
 800945c:	2320      	movmi	r3, #32
 800945e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009462:	0713      	lsls	r3, r2, #28
 8009464:	bf44      	itt	mi
 8009466:	232b      	movmi	r3, #43	@ 0x2b
 8009468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800946c:	f89a 3000 	ldrb.w	r3, [sl]
 8009470:	2b2a      	cmp	r3, #42	@ 0x2a
 8009472:	d015      	beq.n	80094a0 <_vfiprintf_r+0x120>
 8009474:	9a07      	ldr	r2, [sp, #28]
 8009476:	4654      	mov	r4, sl
 8009478:	2000      	movs	r0, #0
 800947a:	f04f 0c0a 	mov.w	ip, #10
 800947e:	4621      	mov	r1, r4
 8009480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009484:	3b30      	subs	r3, #48	@ 0x30
 8009486:	2b09      	cmp	r3, #9
 8009488:	d94b      	bls.n	8009522 <_vfiprintf_r+0x1a2>
 800948a:	b1b0      	cbz	r0, 80094ba <_vfiprintf_r+0x13a>
 800948c:	9207      	str	r2, [sp, #28]
 800948e:	e014      	b.n	80094ba <_vfiprintf_r+0x13a>
 8009490:	eba0 0308 	sub.w	r3, r0, r8
 8009494:	fa09 f303 	lsl.w	r3, r9, r3
 8009498:	4313      	orrs	r3, r2
 800949a:	9304      	str	r3, [sp, #16]
 800949c:	46a2      	mov	sl, r4
 800949e:	e7d2      	b.n	8009446 <_vfiprintf_r+0xc6>
 80094a0:	9b03      	ldr	r3, [sp, #12]
 80094a2:	1d19      	adds	r1, r3, #4
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	9103      	str	r1, [sp, #12]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	bfbb      	ittet	lt
 80094ac:	425b      	neglt	r3, r3
 80094ae:	f042 0202 	orrlt.w	r2, r2, #2
 80094b2:	9307      	strge	r3, [sp, #28]
 80094b4:	9307      	strlt	r3, [sp, #28]
 80094b6:	bfb8      	it	lt
 80094b8:	9204      	strlt	r2, [sp, #16]
 80094ba:	7823      	ldrb	r3, [r4, #0]
 80094bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80094be:	d10a      	bne.n	80094d6 <_vfiprintf_r+0x156>
 80094c0:	7863      	ldrb	r3, [r4, #1]
 80094c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80094c4:	d132      	bne.n	800952c <_vfiprintf_r+0x1ac>
 80094c6:	9b03      	ldr	r3, [sp, #12]
 80094c8:	1d1a      	adds	r2, r3, #4
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	9203      	str	r2, [sp, #12]
 80094ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80094d2:	3402      	adds	r4, #2
 80094d4:	9305      	str	r3, [sp, #20]
 80094d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80095ac <_vfiprintf_r+0x22c>
 80094da:	7821      	ldrb	r1, [r4, #0]
 80094dc:	2203      	movs	r2, #3
 80094de:	4650      	mov	r0, sl
 80094e0:	f7f6 fe7e 	bl	80001e0 <memchr>
 80094e4:	b138      	cbz	r0, 80094f6 <_vfiprintf_r+0x176>
 80094e6:	9b04      	ldr	r3, [sp, #16]
 80094e8:	eba0 000a 	sub.w	r0, r0, sl
 80094ec:	2240      	movs	r2, #64	@ 0x40
 80094ee:	4082      	lsls	r2, r0
 80094f0:	4313      	orrs	r3, r2
 80094f2:	3401      	adds	r4, #1
 80094f4:	9304      	str	r3, [sp, #16]
 80094f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094fa:	4829      	ldr	r0, [pc, #164]	@ (80095a0 <_vfiprintf_r+0x220>)
 80094fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009500:	2206      	movs	r2, #6
 8009502:	f7f6 fe6d 	bl	80001e0 <memchr>
 8009506:	2800      	cmp	r0, #0
 8009508:	d03f      	beq.n	800958a <_vfiprintf_r+0x20a>
 800950a:	4b26      	ldr	r3, [pc, #152]	@ (80095a4 <_vfiprintf_r+0x224>)
 800950c:	bb1b      	cbnz	r3, 8009556 <_vfiprintf_r+0x1d6>
 800950e:	9b03      	ldr	r3, [sp, #12]
 8009510:	3307      	adds	r3, #7
 8009512:	f023 0307 	bic.w	r3, r3, #7
 8009516:	3308      	adds	r3, #8
 8009518:	9303      	str	r3, [sp, #12]
 800951a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951c:	443b      	add	r3, r7
 800951e:	9309      	str	r3, [sp, #36]	@ 0x24
 8009520:	e76a      	b.n	80093f8 <_vfiprintf_r+0x78>
 8009522:	fb0c 3202 	mla	r2, ip, r2, r3
 8009526:	460c      	mov	r4, r1
 8009528:	2001      	movs	r0, #1
 800952a:	e7a8      	b.n	800947e <_vfiprintf_r+0xfe>
 800952c:	2300      	movs	r3, #0
 800952e:	3401      	adds	r4, #1
 8009530:	9305      	str	r3, [sp, #20]
 8009532:	4619      	mov	r1, r3
 8009534:	f04f 0c0a 	mov.w	ip, #10
 8009538:	4620      	mov	r0, r4
 800953a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800953e:	3a30      	subs	r2, #48	@ 0x30
 8009540:	2a09      	cmp	r2, #9
 8009542:	d903      	bls.n	800954c <_vfiprintf_r+0x1cc>
 8009544:	2b00      	cmp	r3, #0
 8009546:	d0c6      	beq.n	80094d6 <_vfiprintf_r+0x156>
 8009548:	9105      	str	r1, [sp, #20]
 800954a:	e7c4      	b.n	80094d6 <_vfiprintf_r+0x156>
 800954c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009550:	4604      	mov	r4, r0
 8009552:	2301      	movs	r3, #1
 8009554:	e7f0      	b.n	8009538 <_vfiprintf_r+0x1b8>
 8009556:	ab03      	add	r3, sp, #12
 8009558:	9300      	str	r3, [sp, #0]
 800955a:	462a      	mov	r2, r5
 800955c:	4b12      	ldr	r3, [pc, #72]	@ (80095a8 <_vfiprintf_r+0x228>)
 800955e:	a904      	add	r1, sp, #16
 8009560:	4630      	mov	r0, r6
 8009562:	f7fd fec3 	bl	80072ec <_printf_float>
 8009566:	4607      	mov	r7, r0
 8009568:	1c78      	adds	r0, r7, #1
 800956a:	d1d6      	bne.n	800951a <_vfiprintf_r+0x19a>
 800956c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800956e:	07d9      	lsls	r1, r3, #31
 8009570:	d405      	bmi.n	800957e <_vfiprintf_r+0x1fe>
 8009572:	89ab      	ldrh	r3, [r5, #12]
 8009574:	059a      	lsls	r2, r3, #22
 8009576:	d402      	bmi.n	800957e <_vfiprintf_r+0x1fe>
 8009578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800957a:	f7fe fc03 	bl	8007d84 <__retarget_lock_release_recursive>
 800957e:	89ab      	ldrh	r3, [r5, #12]
 8009580:	065b      	lsls	r3, r3, #25
 8009582:	f53f af1f 	bmi.w	80093c4 <_vfiprintf_r+0x44>
 8009586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009588:	e71e      	b.n	80093c8 <_vfiprintf_r+0x48>
 800958a:	ab03      	add	r3, sp, #12
 800958c:	9300      	str	r3, [sp, #0]
 800958e:	462a      	mov	r2, r5
 8009590:	4b05      	ldr	r3, [pc, #20]	@ (80095a8 <_vfiprintf_r+0x228>)
 8009592:	a904      	add	r1, sp, #16
 8009594:	4630      	mov	r0, r6
 8009596:	f7fe f941 	bl	800781c <_printf_i>
 800959a:	e7e4      	b.n	8009566 <_vfiprintf_r+0x1e6>
 800959c:	08009c76 	.word	0x08009c76
 80095a0:	08009c80 	.word	0x08009c80
 80095a4:	080072ed 	.word	0x080072ed
 80095a8:	0800935b 	.word	0x0800935b
 80095ac:	08009c7c 	.word	0x08009c7c

080095b0 <__sflush_r>:
 80095b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80095b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095b8:	0716      	lsls	r6, r2, #28
 80095ba:	4605      	mov	r5, r0
 80095bc:	460c      	mov	r4, r1
 80095be:	d454      	bmi.n	800966a <__sflush_r+0xba>
 80095c0:	684b      	ldr	r3, [r1, #4]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	dc02      	bgt.n	80095cc <__sflush_r+0x1c>
 80095c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	dd48      	ble.n	800965e <__sflush_r+0xae>
 80095cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095ce:	2e00      	cmp	r6, #0
 80095d0:	d045      	beq.n	800965e <__sflush_r+0xae>
 80095d2:	2300      	movs	r3, #0
 80095d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80095d8:	682f      	ldr	r7, [r5, #0]
 80095da:	6a21      	ldr	r1, [r4, #32]
 80095dc:	602b      	str	r3, [r5, #0]
 80095de:	d030      	beq.n	8009642 <__sflush_r+0x92>
 80095e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80095e2:	89a3      	ldrh	r3, [r4, #12]
 80095e4:	0759      	lsls	r1, r3, #29
 80095e6:	d505      	bpl.n	80095f4 <__sflush_r+0x44>
 80095e8:	6863      	ldr	r3, [r4, #4]
 80095ea:	1ad2      	subs	r2, r2, r3
 80095ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80095ee:	b10b      	cbz	r3, 80095f4 <__sflush_r+0x44>
 80095f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80095f2:	1ad2      	subs	r2, r2, r3
 80095f4:	2300      	movs	r3, #0
 80095f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80095f8:	6a21      	ldr	r1, [r4, #32]
 80095fa:	4628      	mov	r0, r5
 80095fc:	47b0      	blx	r6
 80095fe:	1c43      	adds	r3, r0, #1
 8009600:	89a3      	ldrh	r3, [r4, #12]
 8009602:	d106      	bne.n	8009612 <__sflush_r+0x62>
 8009604:	6829      	ldr	r1, [r5, #0]
 8009606:	291d      	cmp	r1, #29
 8009608:	d82b      	bhi.n	8009662 <__sflush_r+0xb2>
 800960a:	4a2a      	ldr	r2, [pc, #168]	@ (80096b4 <__sflush_r+0x104>)
 800960c:	40ca      	lsrs	r2, r1
 800960e:	07d6      	lsls	r6, r2, #31
 8009610:	d527      	bpl.n	8009662 <__sflush_r+0xb2>
 8009612:	2200      	movs	r2, #0
 8009614:	6062      	str	r2, [r4, #4]
 8009616:	04d9      	lsls	r1, r3, #19
 8009618:	6922      	ldr	r2, [r4, #16]
 800961a:	6022      	str	r2, [r4, #0]
 800961c:	d504      	bpl.n	8009628 <__sflush_r+0x78>
 800961e:	1c42      	adds	r2, r0, #1
 8009620:	d101      	bne.n	8009626 <__sflush_r+0x76>
 8009622:	682b      	ldr	r3, [r5, #0]
 8009624:	b903      	cbnz	r3, 8009628 <__sflush_r+0x78>
 8009626:	6560      	str	r0, [r4, #84]	@ 0x54
 8009628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800962a:	602f      	str	r7, [r5, #0]
 800962c:	b1b9      	cbz	r1, 800965e <__sflush_r+0xae>
 800962e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009632:	4299      	cmp	r1, r3
 8009634:	d002      	beq.n	800963c <__sflush_r+0x8c>
 8009636:	4628      	mov	r0, r5
 8009638:	f7ff f9fe 	bl	8008a38 <_free_r>
 800963c:	2300      	movs	r3, #0
 800963e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009640:	e00d      	b.n	800965e <__sflush_r+0xae>
 8009642:	2301      	movs	r3, #1
 8009644:	4628      	mov	r0, r5
 8009646:	47b0      	blx	r6
 8009648:	4602      	mov	r2, r0
 800964a:	1c50      	adds	r0, r2, #1
 800964c:	d1c9      	bne.n	80095e2 <__sflush_r+0x32>
 800964e:	682b      	ldr	r3, [r5, #0]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0c6      	beq.n	80095e2 <__sflush_r+0x32>
 8009654:	2b1d      	cmp	r3, #29
 8009656:	d001      	beq.n	800965c <__sflush_r+0xac>
 8009658:	2b16      	cmp	r3, #22
 800965a:	d11e      	bne.n	800969a <__sflush_r+0xea>
 800965c:	602f      	str	r7, [r5, #0]
 800965e:	2000      	movs	r0, #0
 8009660:	e022      	b.n	80096a8 <__sflush_r+0xf8>
 8009662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009666:	b21b      	sxth	r3, r3
 8009668:	e01b      	b.n	80096a2 <__sflush_r+0xf2>
 800966a:	690f      	ldr	r7, [r1, #16]
 800966c:	2f00      	cmp	r7, #0
 800966e:	d0f6      	beq.n	800965e <__sflush_r+0xae>
 8009670:	0793      	lsls	r3, r2, #30
 8009672:	680e      	ldr	r6, [r1, #0]
 8009674:	bf08      	it	eq
 8009676:	694b      	ldreq	r3, [r1, #20]
 8009678:	600f      	str	r7, [r1, #0]
 800967a:	bf18      	it	ne
 800967c:	2300      	movne	r3, #0
 800967e:	eba6 0807 	sub.w	r8, r6, r7
 8009682:	608b      	str	r3, [r1, #8]
 8009684:	f1b8 0f00 	cmp.w	r8, #0
 8009688:	dde9      	ble.n	800965e <__sflush_r+0xae>
 800968a:	6a21      	ldr	r1, [r4, #32]
 800968c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800968e:	4643      	mov	r3, r8
 8009690:	463a      	mov	r2, r7
 8009692:	4628      	mov	r0, r5
 8009694:	47b0      	blx	r6
 8009696:	2800      	cmp	r0, #0
 8009698:	dc08      	bgt.n	80096ac <__sflush_r+0xfc>
 800969a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800969e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80096a2:	81a3      	strh	r3, [r4, #12]
 80096a4:	f04f 30ff 	mov.w	r0, #4294967295
 80096a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096ac:	4407      	add	r7, r0
 80096ae:	eba8 0800 	sub.w	r8, r8, r0
 80096b2:	e7e7      	b.n	8009684 <__sflush_r+0xd4>
 80096b4:	20400001 	.word	0x20400001

080096b8 <_fflush_r>:
 80096b8:	b538      	push	{r3, r4, r5, lr}
 80096ba:	690b      	ldr	r3, [r1, #16]
 80096bc:	4605      	mov	r5, r0
 80096be:	460c      	mov	r4, r1
 80096c0:	b913      	cbnz	r3, 80096c8 <_fflush_r+0x10>
 80096c2:	2500      	movs	r5, #0
 80096c4:	4628      	mov	r0, r5
 80096c6:	bd38      	pop	{r3, r4, r5, pc}
 80096c8:	b118      	cbz	r0, 80096d2 <_fflush_r+0x1a>
 80096ca:	6a03      	ldr	r3, [r0, #32]
 80096cc:	b90b      	cbnz	r3, 80096d2 <_fflush_r+0x1a>
 80096ce:	f7fe fa4f 	bl	8007b70 <__sinit>
 80096d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d0f3      	beq.n	80096c2 <_fflush_r+0xa>
 80096da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096dc:	07d0      	lsls	r0, r2, #31
 80096de:	d404      	bmi.n	80096ea <_fflush_r+0x32>
 80096e0:	0599      	lsls	r1, r3, #22
 80096e2:	d402      	bmi.n	80096ea <_fflush_r+0x32>
 80096e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096e6:	f7fe fb4c 	bl	8007d82 <__retarget_lock_acquire_recursive>
 80096ea:	4628      	mov	r0, r5
 80096ec:	4621      	mov	r1, r4
 80096ee:	f7ff ff5f 	bl	80095b0 <__sflush_r>
 80096f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80096f4:	07da      	lsls	r2, r3, #31
 80096f6:	4605      	mov	r5, r0
 80096f8:	d4e4      	bmi.n	80096c4 <_fflush_r+0xc>
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	059b      	lsls	r3, r3, #22
 80096fe:	d4e1      	bmi.n	80096c4 <_fflush_r+0xc>
 8009700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009702:	f7fe fb3f 	bl	8007d84 <__retarget_lock_release_recursive>
 8009706:	e7dd      	b.n	80096c4 <_fflush_r+0xc>

08009708 <__swbuf_r>:
 8009708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800970a:	460e      	mov	r6, r1
 800970c:	4614      	mov	r4, r2
 800970e:	4605      	mov	r5, r0
 8009710:	b118      	cbz	r0, 800971a <__swbuf_r+0x12>
 8009712:	6a03      	ldr	r3, [r0, #32]
 8009714:	b90b      	cbnz	r3, 800971a <__swbuf_r+0x12>
 8009716:	f7fe fa2b 	bl	8007b70 <__sinit>
 800971a:	69a3      	ldr	r3, [r4, #24]
 800971c:	60a3      	str	r3, [r4, #8]
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	071a      	lsls	r2, r3, #28
 8009722:	d501      	bpl.n	8009728 <__swbuf_r+0x20>
 8009724:	6923      	ldr	r3, [r4, #16]
 8009726:	b943      	cbnz	r3, 800973a <__swbuf_r+0x32>
 8009728:	4621      	mov	r1, r4
 800972a:	4628      	mov	r0, r5
 800972c:	f000 f82a 	bl	8009784 <__swsetup_r>
 8009730:	b118      	cbz	r0, 800973a <__swbuf_r+0x32>
 8009732:	f04f 37ff 	mov.w	r7, #4294967295
 8009736:	4638      	mov	r0, r7
 8009738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800973a:	6823      	ldr	r3, [r4, #0]
 800973c:	6922      	ldr	r2, [r4, #16]
 800973e:	1a98      	subs	r0, r3, r2
 8009740:	6963      	ldr	r3, [r4, #20]
 8009742:	b2f6      	uxtb	r6, r6
 8009744:	4283      	cmp	r3, r0
 8009746:	4637      	mov	r7, r6
 8009748:	dc05      	bgt.n	8009756 <__swbuf_r+0x4e>
 800974a:	4621      	mov	r1, r4
 800974c:	4628      	mov	r0, r5
 800974e:	f7ff ffb3 	bl	80096b8 <_fflush_r>
 8009752:	2800      	cmp	r0, #0
 8009754:	d1ed      	bne.n	8009732 <__swbuf_r+0x2a>
 8009756:	68a3      	ldr	r3, [r4, #8]
 8009758:	3b01      	subs	r3, #1
 800975a:	60a3      	str	r3, [r4, #8]
 800975c:	6823      	ldr	r3, [r4, #0]
 800975e:	1c5a      	adds	r2, r3, #1
 8009760:	6022      	str	r2, [r4, #0]
 8009762:	701e      	strb	r6, [r3, #0]
 8009764:	6962      	ldr	r2, [r4, #20]
 8009766:	1c43      	adds	r3, r0, #1
 8009768:	429a      	cmp	r2, r3
 800976a:	d004      	beq.n	8009776 <__swbuf_r+0x6e>
 800976c:	89a3      	ldrh	r3, [r4, #12]
 800976e:	07db      	lsls	r3, r3, #31
 8009770:	d5e1      	bpl.n	8009736 <__swbuf_r+0x2e>
 8009772:	2e0a      	cmp	r6, #10
 8009774:	d1df      	bne.n	8009736 <__swbuf_r+0x2e>
 8009776:	4621      	mov	r1, r4
 8009778:	4628      	mov	r0, r5
 800977a:	f7ff ff9d 	bl	80096b8 <_fflush_r>
 800977e:	2800      	cmp	r0, #0
 8009780:	d0d9      	beq.n	8009736 <__swbuf_r+0x2e>
 8009782:	e7d6      	b.n	8009732 <__swbuf_r+0x2a>

08009784 <__swsetup_r>:
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4b29      	ldr	r3, [pc, #164]	@ (800982c <__swsetup_r+0xa8>)
 8009788:	4605      	mov	r5, r0
 800978a:	6818      	ldr	r0, [r3, #0]
 800978c:	460c      	mov	r4, r1
 800978e:	b118      	cbz	r0, 8009798 <__swsetup_r+0x14>
 8009790:	6a03      	ldr	r3, [r0, #32]
 8009792:	b90b      	cbnz	r3, 8009798 <__swsetup_r+0x14>
 8009794:	f7fe f9ec 	bl	8007b70 <__sinit>
 8009798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979c:	0719      	lsls	r1, r3, #28
 800979e:	d422      	bmi.n	80097e6 <__swsetup_r+0x62>
 80097a0:	06da      	lsls	r2, r3, #27
 80097a2:	d407      	bmi.n	80097b4 <__swsetup_r+0x30>
 80097a4:	2209      	movs	r2, #9
 80097a6:	602a      	str	r2, [r5, #0]
 80097a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ac:	81a3      	strh	r3, [r4, #12]
 80097ae:	f04f 30ff 	mov.w	r0, #4294967295
 80097b2:	e033      	b.n	800981c <__swsetup_r+0x98>
 80097b4:	0758      	lsls	r0, r3, #29
 80097b6:	d512      	bpl.n	80097de <__swsetup_r+0x5a>
 80097b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80097ba:	b141      	cbz	r1, 80097ce <__swsetup_r+0x4a>
 80097bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80097c0:	4299      	cmp	r1, r3
 80097c2:	d002      	beq.n	80097ca <__swsetup_r+0x46>
 80097c4:	4628      	mov	r0, r5
 80097c6:	f7ff f937 	bl	8008a38 <_free_r>
 80097ca:	2300      	movs	r3, #0
 80097cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80097d4:	81a3      	strh	r3, [r4, #12]
 80097d6:	2300      	movs	r3, #0
 80097d8:	6063      	str	r3, [r4, #4]
 80097da:	6923      	ldr	r3, [r4, #16]
 80097dc:	6023      	str	r3, [r4, #0]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f043 0308 	orr.w	r3, r3, #8
 80097e4:	81a3      	strh	r3, [r4, #12]
 80097e6:	6923      	ldr	r3, [r4, #16]
 80097e8:	b94b      	cbnz	r3, 80097fe <__swsetup_r+0x7a>
 80097ea:	89a3      	ldrh	r3, [r4, #12]
 80097ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80097f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097f4:	d003      	beq.n	80097fe <__swsetup_r+0x7a>
 80097f6:	4621      	mov	r1, r4
 80097f8:	4628      	mov	r0, r5
 80097fa:	f000 f8c1 	bl	8009980 <__smakebuf_r>
 80097fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009802:	f013 0201 	ands.w	r2, r3, #1
 8009806:	d00a      	beq.n	800981e <__swsetup_r+0x9a>
 8009808:	2200      	movs	r2, #0
 800980a:	60a2      	str	r2, [r4, #8]
 800980c:	6962      	ldr	r2, [r4, #20]
 800980e:	4252      	negs	r2, r2
 8009810:	61a2      	str	r2, [r4, #24]
 8009812:	6922      	ldr	r2, [r4, #16]
 8009814:	b942      	cbnz	r2, 8009828 <__swsetup_r+0xa4>
 8009816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800981a:	d1c5      	bne.n	80097a8 <__swsetup_r+0x24>
 800981c:	bd38      	pop	{r3, r4, r5, pc}
 800981e:	0799      	lsls	r1, r3, #30
 8009820:	bf58      	it	pl
 8009822:	6962      	ldrpl	r2, [r4, #20]
 8009824:	60a2      	str	r2, [r4, #8]
 8009826:	e7f4      	b.n	8009812 <__swsetup_r+0x8e>
 8009828:	2000      	movs	r0, #0
 800982a:	e7f7      	b.n	800981c <__swsetup_r+0x98>
 800982c:	20000034 	.word	0x20000034

08009830 <_sbrk_r>:
 8009830:	b538      	push	{r3, r4, r5, lr}
 8009832:	4d06      	ldr	r5, [pc, #24]	@ (800984c <_sbrk_r+0x1c>)
 8009834:	2300      	movs	r3, #0
 8009836:	4604      	mov	r4, r0
 8009838:	4608      	mov	r0, r1
 800983a:	602b      	str	r3, [r5, #0]
 800983c:	f7f8 f942 	bl	8001ac4 <_sbrk>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_sbrk_r+0x1a>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_sbrk_r+0x1a>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20000574 	.word	0x20000574

08009850 <memcpy>:
 8009850:	440a      	add	r2, r1
 8009852:	4291      	cmp	r1, r2
 8009854:	f100 33ff 	add.w	r3, r0, #4294967295
 8009858:	d100      	bne.n	800985c <memcpy+0xc>
 800985a:	4770      	bx	lr
 800985c:	b510      	push	{r4, lr}
 800985e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009862:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009866:	4291      	cmp	r1, r2
 8009868:	d1f9      	bne.n	800985e <memcpy+0xe>
 800986a:	bd10      	pop	{r4, pc}

0800986c <__assert_func>:
 800986c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800986e:	4614      	mov	r4, r2
 8009870:	461a      	mov	r2, r3
 8009872:	4b09      	ldr	r3, [pc, #36]	@ (8009898 <__assert_func+0x2c>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4605      	mov	r5, r0
 8009878:	68d8      	ldr	r0, [r3, #12]
 800987a:	b14c      	cbz	r4, 8009890 <__assert_func+0x24>
 800987c:	4b07      	ldr	r3, [pc, #28]	@ (800989c <__assert_func+0x30>)
 800987e:	9100      	str	r1, [sp, #0]
 8009880:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009884:	4906      	ldr	r1, [pc, #24]	@ (80098a0 <__assert_func+0x34>)
 8009886:	462b      	mov	r3, r5
 8009888:	f000 f842 	bl	8009910 <fiprintf>
 800988c:	f000 f8d6 	bl	8009a3c <abort>
 8009890:	4b04      	ldr	r3, [pc, #16]	@ (80098a4 <__assert_func+0x38>)
 8009892:	461c      	mov	r4, r3
 8009894:	e7f3      	b.n	800987e <__assert_func+0x12>
 8009896:	bf00      	nop
 8009898:	20000034 	.word	0x20000034
 800989c:	08009c91 	.word	0x08009c91
 80098a0:	08009c9e 	.word	0x08009c9e
 80098a4:	08009ccc 	.word	0x08009ccc

080098a8 <_calloc_r>:
 80098a8:	b570      	push	{r4, r5, r6, lr}
 80098aa:	fba1 5402 	umull	r5, r4, r1, r2
 80098ae:	b934      	cbnz	r4, 80098be <_calloc_r+0x16>
 80098b0:	4629      	mov	r1, r5
 80098b2:	f7ff f935 	bl	8008b20 <_malloc_r>
 80098b6:	4606      	mov	r6, r0
 80098b8:	b928      	cbnz	r0, 80098c6 <_calloc_r+0x1e>
 80098ba:	4630      	mov	r0, r6
 80098bc:	bd70      	pop	{r4, r5, r6, pc}
 80098be:	220c      	movs	r2, #12
 80098c0:	6002      	str	r2, [r0, #0]
 80098c2:	2600      	movs	r6, #0
 80098c4:	e7f9      	b.n	80098ba <_calloc_r+0x12>
 80098c6:	462a      	mov	r2, r5
 80098c8:	4621      	mov	r1, r4
 80098ca:	f7fe f9dc 	bl	8007c86 <memset>
 80098ce:	e7f4      	b.n	80098ba <_calloc_r+0x12>

080098d0 <__ascii_mbtowc>:
 80098d0:	b082      	sub	sp, #8
 80098d2:	b901      	cbnz	r1, 80098d6 <__ascii_mbtowc+0x6>
 80098d4:	a901      	add	r1, sp, #4
 80098d6:	b142      	cbz	r2, 80098ea <__ascii_mbtowc+0x1a>
 80098d8:	b14b      	cbz	r3, 80098ee <__ascii_mbtowc+0x1e>
 80098da:	7813      	ldrb	r3, [r2, #0]
 80098dc:	600b      	str	r3, [r1, #0]
 80098de:	7812      	ldrb	r2, [r2, #0]
 80098e0:	1e10      	subs	r0, r2, #0
 80098e2:	bf18      	it	ne
 80098e4:	2001      	movne	r0, #1
 80098e6:	b002      	add	sp, #8
 80098e8:	4770      	bx	lr
 80098ea:	4610      	mov	r0, r2
 80098ec:	e7fb      	b.n	80098e6 <__ascii_mbtowc+0x16>
 80098ee:	f06f 0001 	mvn.w	r0, #1
 80098f2:	e7f8      	b.n	80098e6 <__ascii_mbtowc+0x16>

080098f4 <__ascii_wctomb>:
 80098f4:	4603      	mov	r3, r0
 80098f6:	4608      	mov	r0, r1
 80098f8:	b141      	cbz	r1, 800990c <__ascii_wctomb+0x18>
 80098fa:	2aff      	cmp	r2, #255	@ 0xff
 80098fc:	d904      	bls.n	8009908 <__ascii_wctomb+0x14>
 80098fe:	228a      	movs	r2, #138	@ 0x8a
 8009900:	601a      	str	r2, [r3, #0]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	4770      	bx	lr
 8009908:	700a      	strb	r2, [r1, #0]
 800990a:	2001      	movs	r0, #1
 800990c:	4770      	bx	lr
	...

08009910 <fiprintf>:
 8009910:	b40e      	push	{r1, r2, r3}
 8009912:	b503      	push	{r0, r1, lr}
 8009914:	4601      	mov	r1, r0
 8009916:	ab03      	add	r3, sp, #12
 8009918:	4805      	ldr	r0, [pc, #20]	@ (8009930 <fiprintf+0x20>)
 800991a:	f853 2b04 	ldr.w	r2, [r3], #4
 800991e:	6800      	ldr	r0, [r0, #0]
 8009920:	9301      	str	r3, [sp, #4]
 8009922:	f7ff fd2d 	bl	8009380 <_vfiprintf_r>
 8009926:	b002      	add	sp, #8
 8009928:	f85d eb04 	ldr.w	lr, [sp], #4
 800992c:	b003      	add	sp, #12
 800992e:	4770      	bx	lr
 8009930:	20000034 	.word	0x20000034

08009934 <__swhatbuf_r>:
 8009934:	b570      	push	{r4, r5, r6, lr}
 8009936:	460c      	mov	r4, r1
 8009938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800993c:	2900      	cmp	r1, #0
 800993e:	b096      	sub	sp, #88	@ 0x58
 8009940:	4615      	mov	r5, r2
 8009942:	461e      	mov	r6, r3
 8009944:	da0d      	bge.n	8009962 <__swhatbuf_r+0x2e>
 8009946:	89a3      	ldrh	r3, [r4, #12]
 8009948:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800994c:	f04f 0100 	mov.w	r1, #0
 8009950:	bf14      	ite	ne
 8009952:	2340      	movne	r3, #64	@ 0x40
 8009954:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009958:	2000      	movs	r0, #0
 800995a:	6031      	str	r1, [r6, #0]
 800995c:	602b      	str	r3, [r5, #0]
 800995e:	b016      	add	sp, #88	@ 0x58
 8009960:	bd70      	pop	{r4, r5, r6, pc}
 8009962:	466a      	mov	r2, sp
 8009964:	f000 f848 	bl	80099f8 <_fstat_r>
 8009968:	2800      	cmp	r0, #0
 800996a:	dbec      	blt.n	8009946 <__swhatbuf_r+0x12>
 800996c:	9901      	ldr	r1, [sp, #4]
 800996e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009972:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009976:	4259      	negs	r1, r3
 8009978:	4159      	adcs	r1, r3
 800997a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800997e:	e7eb      	b.n	8009958 <__swhatbuf_r+0x24>

08009980 <__smakebuf_r>:
 8009980:	898b      	ldrh	r3, [r1, #12]
 8009982:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009984:	079d      	lsls	r5, r3, #30
 8009986:	4606      	mov	r6, r0
 8009988:	460c      	mov	r4, r1
 800998a:	d507      	bpl.n	800999c <__smakebuf_r+0x1c>
 800998c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009990:	6023      	str	r3, [r4, #0]
 8009992:	6123      	str	r3, [r4, #16]
 8009994:	2301      	movs	r3, #1
 8009996:	6163      	str	r3, [r4, #20]
 8009998:	b003      	add	sp, #12
 800999a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800999c:	ab01      	add	r3, sp, #4
 800999e:	466a      	mov	r2, sp
 80099a0:	f7ff ffc8 	bl	8009934 <__swhatbuf_r>
 80099a4:	9f00      	ldr	r7, [sp, #0]
 80099a6:	4605      	mov	r5, r0
 80099a8:	4639      	mov	r1, r7
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7ff f8b8 	bl	8008b20 <_malloc_r>
 80099b0:	b948      	cbnz	r0, 80099c6 <__smakebuf_r+0x46>
 80099b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b6:	059a      	lsls	r2, r3, #22
 80099b8:	d4ee      	bmi.n	8009998 <__smakebuf_r+0x18>
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	f043 0302 	orr.w	r3, r3, #2
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	e7e2      	b.n	800998c <__smakebuf_r+0xc>
 80099c6:	89a3      	ldrh	r3, [r4, #12]
 80099c8:	6020      	str	r0, [r4, #0]
 80099ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80099ce:	81a3      	strh	r3, [r4, #12]
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80099d6:	b15b      	cbz	r3, 80099f0 <__smakebuf_r+0x70>
 80099d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099dc:	4630      	mov	r0, r6
 80099de:	f000 f81d 	bl	8009a1c <_isatty_r>
 80099e2:	b128      	cbz	r0, 80099f0 <__smakebuf_r+0x70>
 80099e4:	89a3      	ldrh	r3, [r4, #12]
 80099e6:	f023 0303 	bic.w	r3, r3, #3
 80099ea:	f043 0301 	orr.w	r3, r3, #1
 80099ee:	81a3      	strh	r3, [r4, #12]
 80099f0:	89a3      	ldrh	r3, [r4, #12]
 80099f2:	431d      	orrs	r5, r3
 80099f4:	81a5      	strh	r5, [r4, #12]
 80099f6:	e7cf      	b.n	8009998 <__smakebuf_r+0x18>

080099f8 <_fstat_r>:
 80099f8:	b538      	push	{r3, r4, r5, lr}
 80099fa:	4d07      	ldr	r5, [pc, #28]	@ (8009a18 <_fstat_r+0x20>)
 80099fc:	2300      	movs	r3, #0
 80099fe:	4604      	mov	r4, r0
 8009a00:	4608      	mov	r0, r1
 8009a02:	4611      	mov	r1, r2
 8009a04:	602b      	str	r3, [r5, #0]
 8009a06:	f7f8 f835 	bl	8001a74 <_fstat>
 8009a0a:	1c43      	adds	r3, r0, #1
 8009a0c:	d102      	bne.n	8009a14 <_fstat_r+0x1c>
 8009a0e:	682b      	ldr	r3, [r5, #0]
 8009a10:	b103      	cbz	r3, 8009a14 <_fstat_r+0x1c>
 8009a12:	6023      	str	r3, [r4, #0]
 8009a14:	bd38      	pop	{r3, r4, r5, pc}
 8009a16:	bf00      	nop
 8009a18:	20000574 	.word	0x20000574

08009a1c <_isatty_r>:
 8009a1c:	b538      	push	{r3, r4, r5, lr}
 8009a1e:	4d06      	ldr	r5, [pc, #24]	@ (8009a38 <_isatty_r+0x1c>)
 8009a20:	2300      	movs	r3, #0
 8009a22:	4604      	mov	r4, r0
 8009a24:	4608      	mov	r0, r1
 8009a26:	602b      	str	r3, [r5, #0]
 8009a28:	f7f8 f834 	bl	8001a94 <_isatty>
 8009a2c:	1c43      	adds	r3, r0, #1
 8009a2e:	d102      	bne.n	8009a36 <_isatty_r+0x1a>
 8009a30:	682b      	ldr	r3, [r5, #0]
 8009a32:	b103      	cbz	r3, 8009a36 <_isatty_r+0x1a>
 8009a34:	6023      	str	r3, [r4, #0]
 8009a36:	bd38      	pop	{r3, r4, r5, pc}
 8009a38:	20000574 	.word	0x20000574

08009a3c <abort>:
 8009a3c:	b508      	push	{r3, lr}
 8009a3e:	2006      	movs	r0, #6
 8009a40:	f000 f82c 	bl	8009a9c <raise>
 8009a44:	2001      	movs	r0, #1
 8009a46:	f7f7 ffc5 	bl	80019d4 <_exit>

08009a4a <_raise_r>:
 8009a4a:	291f      	cmp	r1, #31
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4605      	mov	r5, r0
 8009a50:	460c      	mov	r4, r1
 8009a52:	d904      	bls.n	8009a5e <_raise_r+0x14>
 8009a54:	2316      	movs	r3, #22
 8009a56:	6003      	str	r3, [r0, #0]
 8009a58:	f04f 30ff 	mov.w	r0, #4294967295
 8009a5c:	bd38      	pop	{r3, r4, r5, pc}
 8009a5e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009a60:	b112      	cbz	r2, 8009a68 <_raise_r+0x1e>
 8009a62:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009a66:	b94b      	cbnz	r3, 8009a7c <_raise_r+0x32>
 8009a68:	4628      	mov	r0, r5
 8009a6a:	f000 f831 	bl	8009ad0 <_getpid_r>
 8009a6e:	4622      	mov	r2, r4
 8009a70:	4601      	mov	r1, r0
 8009a72:	4628      	mov	r0, r5
 8009a74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a78:	f000 b818 	b.w	8009aac <_kill_r>
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d00a      	beq.n	8009a96 <_raise_r+0x4c>
 8009a80:	1c59      	adds	r1, r3, #1
 8009a82:	d103      	bne.n	8009a8c <_raise_r+0x42>
 8009a84:	2316      	movs	r3, #22
 8009a86:	6003      	str	r3, [r0, #0]
 8009a88:	2001      	movs	r0, #1
 8009a8a:	e7e7      	b.n	8009a5c <_raise_r+0x12>
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009a92:	4620      	mov	r0, r4
 8009a94:	4798      	blx	r3
 8009a96:	2000      	movs	r0, #0
 8009a98:	e7e0      	b.n	8009a5c <_raise_r+0x12>
	...

08009a9c <raise>:
 8009a9c:	4b02      	ldr	r3, [pc, #8]	@ (8009aa8 <raise+0xc>)
 8009a9e:	4601      	mov	r1, r0
 8009aa0:	6818      	ldr	r0, [r3, #0]
 8009aa2:	f7ff bfd2 	b.w	8009a4a <_raise_r>
 8009aa6:	bf00      	nop
 8009aa8:	20000034 	.word	0x20000034

08009aac <_kill_r>:
 8009aac:	b538      	push	{r3, r4, r5, lr}
 8009aae:	4d07      	ldr	r5, [pc, #28]	@ (8009acc <_kill_r+0x20>)
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	4604      	mov	r4, r0
 8009ab4:	4608      	mov	r0, r1
 8009ab6:	4611      	mov	r1, r2
 8009ab8:	602b      	str	r3, [r5, #0]
 8009aba:	f7f7 ff7b 	bl	80019b4 <_kill>
 8009abe:	1c43      	adds	r3, r0, #1
 8009ac0:	d102      	bne.n	8009ac8 <_kill_r+0x1c>
 8009ac2:	682b      	ldr	r3, [r5, #0]
 8009ac4:	b103      	cbz	r3, 8009ac8 <_kill_r+0x1c>
 8009ac6:	6023      	str	r3, [r4, #0]
 8009ac8:	bd38      	pop	{r3, r4, r5, pc}
 8009aca:	bf00      	nop
 8009acc:	20000574 	.word	0x20000574

08009ad0 <_getpid_r>:
 8009ad0:	f7f7 bf68 	b.w	80019a4 <_getpid>

08009ad4 <_init>:
 8009ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ad6:	bf00      	nop
 8009ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ada:	bc08      	pop	{r3}
 8009adc:	469e      	mov	lr, r3
 8009ade:	4770      	bx	lr

08009ae0 <_fini>:
 8009ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae2:	bf00      	nop
 8009ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ae6:	bc08      	pop	{r3}
 8009ae8:	469e      	mov	lr, r3
 8009aea:	4770      	bx	lr
