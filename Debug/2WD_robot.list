
2WD_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009f7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f4  0800a120  0800a120  0000b120  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a514  0800a514  0000c1f4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a514  0800a514  0000b514  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a51c  0800a51c  0000c1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a51c  0800a51c  0000b51c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a520  0800a520  0000b520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  0800a524  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1f4  2**0
                  CONTENTS
 10 .bss          000003f4  200001f4  200001f4  0000c1f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200005e8  200005e8  0000c1f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015016  00000000  00000000  0000c224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000291e  00000000  00000000  0002123a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d8  00000000  00000000  00023b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000eda  00000000  00000000  00024e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f91  00000000  00000000  00025d0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018566  00000000  00000000  00048c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d6f13  00000000  00000000  00061201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00138114  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060e8  00000000  00000000  00138158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005a  00000000  00000000  0013e240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f4 	.word	0x200001f4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a104 	.word	0x0800a104

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f8 	.word	0x200001f8
 80001dc:	0800a104 	.word	0x0800a104

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__io_putchar>:


uint16_t Joystick[] = {0, 0};

int __io_putchar(int ch)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if (ch == '\n') {
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0a      	cmp	r3, #10
 8000bc4:	d102      	bne.n	8000bcc <__io_putchar+0x14>
    __io_putchar('\r');
 8000bc6:	200d      	movs	r0, #13
 8000bc8:	f7ff fff6 	bl	8000bb8 <__io_putchar>
  }
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000bcc:	1d39      	adds	r1, r7, #4
 8000bce:	f04f 33ff 	mov.w	r3, #4294967295
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4803      	ldr	r0, [pc, #12]	@ (8000be4 <__io_putchar+0x2c>)
 8000bd6:	f006 f965 	bl	8006ea4 <HAL_UART_Transmit>
  return 1;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	200003dc 	.word	0x200003dc

08000be8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == enkoder_Pin){
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	2b10      	cmp	r3, #16
 8000bf6:	d104      	bne.n	8000c02 <HAL_GPIO_EXTI_Callback+0x1a>
		edgeCountL++;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x38>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	4a08      	ldr	r2, [pc, #32]	@ (8000c20 <HAL_GPIO_EXTI_Callback+0x38>)
 8000c00:	6013      	str	r3, [r2, #0]
	}
	if(GPIO_Pin == encoder1_Pin){
 8000c02:	88fb      	ldrh	r3, [r7, #6]
 8000c04:	2b40      	cmp	r3, #64	@ 0x40
 8000c06:	d104      	bne.n	8000c12 <HAL_GPIO_EXTI_Callback+0x2a>
			edgeCountP++;
 8000c08:	4b06      	ldr	r3, [pc, #24]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	4a05      	ldr	r2, [pc, #20]	@ (8000c24 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000c10:	6013      	str	r3, [r2, #0]
		}

}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2000047c 	.word	0x2000047c
 8000c24:	20000480 	.word	0x20000480

08000c28 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c38:	d12e      	bne.n	8000c98 <HAL_TIM_IC_CaptureCallback+0x70>
    {
        if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7f1b      	ldrb	r3, [r3, #28]
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d107      	bne.n	8000c52 <HAL_TIM_IC_CaptureCallback+0x2a>
        {
        	start = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c42:	2100      	movs	r1, #0
 8000c44:	6878      	ldr	r0, [r7, #4]
 8000c46:	f005 f9b9 	bl	8005fbc <HAL_TIM_ReadCapturedValue>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c4e:	6013      	str	r3, [r2, #0]
                pulse_width = stop - start;
            else
                pulse_width = (0xFFFF - start + stop);
        }
    }
}
 8000c50:	e022      	b.n	8000c98 <HAL_TIM_IC_CaptureCallback+0x70>
        else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7f1b      	ldrb	r3, [r3, #28]
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d11e      	bne.n	8000c98 <HAL_TIM_IC_CaptureCallback+0x70>
        	stop = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000c5a:	2104      	movs	r1, #4
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f005 f9ad 	bl	8005fbc <HAL_TIM_ReadCapturedValue>
 8000c62:	4603      	mov	r3, r0
 8000c64:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000c66:	6013      	str	r3, [r2, #0]
            if (stop >= start)
 8000c68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d307      	bcc.n	8000c84 <HAL_TIM_IC_CaptureCallback+0x5c>
                pulse_width = stop - start;
 8000c74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ca4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	1ad3      	subs	r3, r2, r3
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000c80:	6013      	str	r3, [r2, #0]
}
 8000c82:	e009      	b.n	8000c98 <HAL_TIM_IC_CaptureCallback+0x70>
                pulse_width = (0xFFFF - start + stop);
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <HAL_TIM_IC_CaptureCallback+0x7c>)
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_TIM_IC_CaptureCallback+0x78>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000c92:	33ff      	adds	r3, #255	@ 0xff
 8000c94:	4a04      	ldr	r2, [pc, #16]	@ (8000ca8 <HAL_TIM_IC_CaptureCallback+0x80>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000470 	.word	0x20000470
 8000ca4:	20000474 	.word	0x20000474
 8000ca8:	20000478 	.word	0x20000478

08000cac <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a03      	ldr	r2, [pc, #12]	@ (8000cc8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8000cba:	4293      	cmp	r3, r2
			}
		}
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	40000400 	.word	0x40000400

08000ccc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b090      	sub	sp, #64	@ 0x40
 8000cd0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cd2:	f001 f8ad 	bl	8001e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd6:	f000 f98b 	bl	8000ff0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cda:	f000 fc9f 	bl	800161c <MX_GPIO_Init>
  MX_DMA_Init();
 8000cde:	f000 fc7f 	bl	80015e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ce2:	f000 fc4d 	bl	8001580 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000ce6:	f000 f9eb 	bl	80010c0 <MX_ADC2_Init>
  MX_TIM1_Init();
 8000cea:	f000 fa95 	bl	8001218 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000cee:	f000 fb4d 	bl	800138c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000cf2:	f000 fa51 	bl	8001198 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000cf6:	f000 fbf3 	bl	80014e0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc2, (long unsigned int *)Joystick, 2);
 8000cfa:	2202      	movs	r2, #2
 8000cfc:	49a1      	ldr	r1, [pc, #644]	@ (8000f84 <main+0x2b8>)
 8000cfe:	48a2      	ldr	r0, [pc, #648]	@ (8000f88 <main+0x2bc>)
 8000d00:	f001 fb14 	bl	800232c <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d04:	2100      	movs	r1, #0
 8000d06:	48a1      	ldr	r0, [pc, #644]	@ (8000f8c <main+0x2c0>)
 8000d08:	f004 fb72 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d0c:	2104      	movs	r1, #4
 8000d0e:	489f      	ldr	r0, [pc, #636]	@ (8000f8c <main+0x2c0>)
 8000d10:	f004 fb6e 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000d14:	2108      	movs	r1, #8
 8000d16:	489e      	ldr	r0, [pc, #632]	@ (8000f90 <main+0x2c4>)
 8000d18:	f004 fb6a 	bl	80053f0 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000d1c:	2100      	movs	r1, #0
 8000d1e:	489c      	ldr	r0, [pc, #624]	@ (8000f90 <main+0x2c4>)
 8000d20:	f004 fcd4 	bl	80056cc <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_2);
 8000d24:	2104      	movs	r1, #4
 8000d26:	489a      	ldr	r0, [pc, #616]	@ (8000f90 <main+0x2c4>)
 8000d28:	f004 fcd0 	bl	80056cc <HAL_TIM_IC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d2c:	4899      	ldr	r0, [pc, #612]	@ (8000f94 <main+0x2c8>)
 8000d2e:	f004 fa8d 	bl	800524c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PeriodElapsedCallback(&htim3);
 8000d32:	4898      	ldr	r0, [pc, #608]	@ (8000f94 <main+0x2c8>)
 8000d34:	f7ff ffba 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  temp = (int)roundf(200.0f * (1.0f - ((float)Joystick[0] / 4096.0f))-2);
 8000d38:	4b92      	ldr	r3, [pc, #584]	@ (8000f84 <main+0x2b8>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	ee07 3a90 	vmov	s15, r3
 8000d40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d44:	eddf 6a94 	vldr	s13, [pc, #592]	@ 8000f98 <main+0x2cc>
 8000d48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000d4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d54:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8000f9c <main+0x2d0>
 8000d58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d5c:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8000d60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d64:	eeb0 0a67 	vmov.f32	s0, s15
 8000d68:	f009 f9a8 	bl	800a0bc <roundf>
 8000d6c:	eef0 7a40 	vmov.f32	s15, s0
 8000d70:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d74:	ee17 2a90 	vmov	r2, s15
 8000d78:	4b89      	ldr	r3, [pc, #548]	@ (8000fa0 <main+0x2d4>)
 8000d7a:	601a      	str	r2, [r3, #0]

  currentTC = HAL_GetTick();
 8000d7c:	f001 f8b2 	bl	8001ee4 <HAL_GetTick>
 8000d80:	4603      	mov	r3, r0
 8000d82:	4a88      	ldr	r2, [pc, #544]	@ (8000fa4 <main+0x2d8>)
 8000d84:	6013      	str	r3, [r2, #0]
  if ((currentTC - previousTC) > period){
 8000d86:	4b87      	ldr	r3, [pc, #540]	@ (8000fa4 <main+0x2d8>)
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	4b87      	ldr	r3, [pc, #540]	@ (8000fa8 <main+0x2dc>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	1ad2      	subs	r2, r2, r3
 8000d90:	4b86      	ldr	r3, [pc, #536]	@ (8000fac <main+0x2e0>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d9cf      	bls.n	8000d38 <main+0x6c>

//		obliczanie odlgełości
	  odleglosc_meas = pulse_width / 58.0f;
 8000d98:	4b85      	ldr	r3, [pc, #532]	@ (8000fb0 <main+0x2e4>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	ee07 3a90 	vmov	s15, r3
 8000da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000da4:	eddf 6a83 	vldr	s13, [pc, #524]	@ 8000fb4 <main+0x2e8>
 8000da8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000dac:	4b82      	ldr	r3, [pc, #520]	@ (8000fb8 <main+0x2ec>)
 8000dae:	edc3 7a00 	vstr	s15, [r3]
	  float uchyb_odl = odleglosc_zadana - odleglosc_meas;
 8000db2:	4b82      	ldr	r3, [pc, #520]	@ (8000fbc <main+0x2f0>)
 8000db4:	ed93 7a00 	vldr	s14, [r3]
 8000db8:	4b7f      	ldr	r3, [pc, #508]	@ (8000fb8 <main+0x2ec>)
 8000dba:	edd3 7a00 	vldr	s15, [r3]
 8000dbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dc2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	  float predosc_zadana = Kp_odl * uchyb_odl;
 8000dc6:	4b7e      	ldr	r3, [pc, #504]	@ (8000fc0 <main+0x2f4>)
 8000dc8:	edd3 7a00 	vldr	s15, [r3]
 8000dcc:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8000dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dd4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28


	  /* silnik lewy */
	  uint32_t pulse_count = edgeCountL;
 8000dd8:	4b7a      	ldr	r3, [pc, #488]	@ (8000fc4 <main+0x2f8>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	627b      	str	r3, [r7, #36]	@ 0x24
	  edgeCountL = 0;
 8000dde:	4b79      	ldr	r3, [pc, #484]	@ (8000fc4 <main+0x2f8>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	601a      	str	r2, [r3, #0]

	  float uchyb_pred_L = predosc_zadana - (float)pulse_count;
 8000de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000de6:	ee07 3a90 	vmov	s15, r3
 8000dea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000df2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000df6:	edc7 7a08 	vstr	s15, [r7, #32]
	  float P_pred_L = Kp * uchyb_pred_L;
 8000dfa:	4b73      	ldr	r3, [pc, #460]	@ (8000fc8 <main+0x2fc>)
 8000dfc:	edd3 7a00 	vldr	s15, [r3]
 8000e00:	ed97 7a08 	vldr	s14, [r7, #32]
 8000e04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e08:	edc7 7a07 	vstr	s15, [r7, #28]
	  float I_pred_L = I_pred_L_prev + Ki *(float)uchyb_pred_L * Ts;
 8000e0c:	4b6f      	ldr	r3, [pc, #444]	@ (8000fcc <main+0x300>)
 8000e0e:	ed93 7a00 	vldr	s14, [r3]
 8000e12:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e1a:	4b6d      	ldr	r3, [pc, #436]	@ (8000fd0 <main+0x304>)
 8000e1c:	edd3 7a00 	vldr	s15, [r3]
 8000e20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000e24:	4b6b      	ldr	r3, [pc, #428]	@ (8000fd4 <main+0x308>)
 8000e26:	edd3 7a00 	vldr	s15, [r3]
 8000e2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e2e:	edc7 7a06 	vstr	s15, [r7, #24]
	  float uL = P_pred_L + I_pred_L;
 8000e32:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e36:	edd7 7a06 	vldr	s15, [r7, #24]
 8000e3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e3e:	edc7 7a05 	vstr	s15, [r7, #20]


//	  anti windup
	  uint32_t u_satL = (uint32_t) uL;
 8000e42:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e4a:	ee17 3a90 	vmov	r3, s15
 8000e4e:	637b      	str	r3, [r7, #52]	@ 0x34
	  if (u_satL > 100) u_satL = 100;
 8000e50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e52:	2b64      	cmp	r3, #100	@ 0x64
 8000e54:	d902      	bls.n	8000e5c <main+0x190>
 8000e56:	2364      	movs	r3, #100	@ 0x64
 8000e58:	637b      	str	r3, [r7, #52]	@ 0x34
 8000e5a:	e002      	b.n	8000e62 <main+0x196>
	  else if (u_satL < 0) u_satL = 0;
	  else I_pred_L_prev =I_pred_L;
 8000e5c:	4a5d      	ldr	r2, [pc, #372]	@ (8000fd4 <main+0x308>)
 8000e5e:	69bb      	ldr	r3, [r7, #24]
 8000e60:	6013      	str	r3, [r2, #0]

	  /* silnik prawy */
	  uint32_t pulse_count1 = edgeCountP;
 8000e62:	4b5d      	ldr	r3, [pc, #372]	@ (8000fd8 <main+0x30c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	613b      	str	r3, [r7, #16]
	  edgeCountP = 0;
 8000e68:	4b5b      	ldr	r3, [pc, #364]	@ (8000fd8 <main+0x30c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]

	  float uchyb_pred_P = predosc_zadana - (float)pulse_count1;
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	ee07 3a90 	vmov	s15, r3
 8000e74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e78:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8000e7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e80:	edc7 7a03 	vstr	s15, [r7, #12]
	  float P_pred_P = Kp1 * uchyb_pred_P;
 8000e84:	4b55      	ldr	r3, [pc, #340]	@ (8000fdc <main+0x310>)
 8000e86:	edd3 7a00 	vldr	s15, [r3]
 8000e8a:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e92:	edc7 7a02 	vstr	s15, [r7, #8]
	  float I_pred_P = I_pred_P_prev + Ki1 *(float)uchyb_pred_P * Ts;
 8000e96:	4b52      	ldr	r3, [pc, #328]	@ (8000fe0 <main+0x314>)
 8000e98:	ed93 7a00 	vldr	s14, [r3]
 8000e9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ea0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ea4:	4b4a      	ldr	r3, [pc, #296]	@ (8000fd0 <main+0x304>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000eae:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe4 <main+0x318>)
 8000eb0:	edd3 7a00 	vldr	s15, [r3]
 8000eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000eb8:	edc7 7a01 	vstr	s15, [r7, #4]
	  float uP = P_pred_P + I_pred_P;
 8000ebc:	ed97 7a02 	vldr	s14, [r7, #8]
 8000ec0:	edd7 7a01 	vldr	s15, [r7, #4]
 8000ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ec8:	edc7 7a00 	vstr	s15, [r7]


//	  anti windup
	  uint32_t u_satP = (uint32_t) uP;
 8000ecc:	edd7 7a00 	vldr	s15, [r7]
 8000ed0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ed4:	ee17 3a90 	vmov	r3, s15
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
	  if (u_satP > 100) u_satP = 100;
 8000eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000edc:	2b64      	cmp	r3, #100	@ 0x64
 8000ede:	d902      	bls.n	8000ee6 <main+0x21a>
 8000ee0:	2364      	movs	r3, #100	@ 0x64
 8000ee2:	633b      	str	r3, [r7, #48]	@ 0x30
 8000ee4:	e002      	b.n	8000eec <main+0x220>
	  else if (u_satP < 0) u_satP = 0;
	  else I_pred_P_prev =I_pred_P;
 8000ee6:	4a3f      	ldr	r2, [pc, #252]	@ (8000fe4 <main+0x318>)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6013      	str	r3, [r2, #0]

	  printf("Silnik 1 - Duty: %ld, speed: %ld \tSilnik 2 -  Duty: %ld, speed: %ld \n", u_satL, pulse_count, u_satP, pulse_count1);
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ef4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ef6:	483c      	ldr	r0, [pc, #240]	@ (8000fe8 <main+0x31c>)
 8000ef8:	f007 f964 	bl	80081c4 <iprintf>


//	  uchyb mniejszy od 0 to pojazd jest za daleko
	  if(uchyb_odl < 0){
 8000efc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8000f00:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f08:	d517      	bpl.n	8000f3a <main+0x26e>
	    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	4837      	ldr	r0, [pc, #220]	@ (8000fec <main+0x320>)
 8000f10:	f002 fb90 	bl	8003634 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f1a:	4834      	ldr	r0, [pc, #208]	@ (8000fec <main+0x320>)
 8000f1c:	f002 fb8a 	bl	8003634 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_SET);
 8000f20:	2201      	movs	r2, #1
 8000f22:	2108      	movs	r1, #8
 8000f24:	4831      	ldr	r0, [pc, #196]	@ (8000fec <main+0x320>)
 8000f26:	f002 fb85 	bl	8003634 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f34:	f002 fb7e 	bl	8003634 <HAL_GPIO_WritePin>
 8000f38:	e016      	b.n	8000f68 <main+0x29c>
	  }
//	  uchyb wiekszy od 0 to pojazd jest za blisko
	  else
	  {
	    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	482b      	ldr	r0, [pc, #172]	@ (8000fec <main+0x320>)
 8000f40:	f002 fb78 	bl	8003634 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f4a:	4828      	ldr	r0, [pc, #160]	@ (8000fec <main+0x320>)
 8000f4c:	f002 fb72 	bl	8003634 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2108      	movs	r1, #8
 8000f54:	4825      	ldr	r0, [pc, #148]	@ (8000fec <main+0x320>)
 8000f56:	f002 fb6d 	bl	8003634 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f64:	f002 fb66 	bl	8003634 <HAL_GPIO_WritePin>
	  }

	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, u_satL);
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <main+0x2c0>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f6e:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, u_satP);
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <main+0x2c0>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000f76:	639a      	str	r2, [r3, #56]	@ 0x38

    previousTC = currentTC;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa4 <main+0x2d8>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a0a      	ldr	r2, [pc, #40]	@ (8000fa8 <main+0x2dc>)
 8000f7e:	6013      	str	r3, [r2, #0]
	  temp = (int)roundf(200.0f * (1.0f - ((float)Joystick[0] / 4096.0f))-2);
 8000f80:	e6da      	b.n	8000d38 <main+0x6c>
 8000f82:	bf00      	nop
 8000f84:	20000490 	.word	0x20000490
 8000f88:	20000210 	.word	0x20000210
 8000f8c:	200002f8 	.word	0x200002f8
 8000f90:	20000344 	.word	0x20000344
 8000f94:	20000390 	.word	0x20000390
 8000f98:	45800000 	.word	0x45800000
 8000f9c:	43480000 	.word	0x43480000
 8000fa0:	20000484 	.word	0x20000484
 8000fa4:	20000464 	.word	0x20000464
 8000fa8:	20000468 	.word	0x20000468
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000478 	.word	0x20000478
 8000fb4:	42680000 	.word	0x42680000
 8000fb8:	2000046c 	.word	0x2000046c
 8000fbc:	20000004 	.word	0x20000004
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	2000047c 	.word	0x2000047c
 8000fc8:	2000000c 	.word	0x2000000c
 8000fcc:	20000010 	.word	0x20000010
 8000fd0:	2000001c 	.word	0x2000001c
 8000fd4:	20000488 	.word	0x20000488
 8000fd8:	20000480 	.word	0x20000480
 8000fdc:	20000014 	.word	0x20000014
 8000fe0:	20000018 	.word	0x20000018
 8000fe4:	2000048c 	.word	0x2000048c
 8000fe8:	0800a120 	.word	0x0800a120
 8000fec:	48000400 	.word	0x48000400

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b0a6      	sub	sp, #152	@ 0x98
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000ffa:	2228      	movs	r2, #40	@ 0x28
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f007 f935 	bl	800826e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]
 8001012:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	2258      	movs	r2, #88	@ 0x58
 8001018:	2100      	movs	r1, #0
 800101a:	4618      	mov	r0, r3
 800101c:	f007 f927 	bl	800826e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001020:	2302      	movs	r3, #2
 8001022:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001024:	2301      	movs	r3, #1
 8001026:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001028:	2310      	movs	r3, #16
 800102a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001034:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001038:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800103c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001040:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800104e:	4618      	mov	r0, r3
 8001050:	f002 fc52 	bl	80038f8 <HAL_RCC_OscConfig>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800105a:	f000 fb7d 	bl	8001758 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105e:	230f      	movs	r3, #15
 8001060:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001062:	2302      	movs	r3, #2
 8001064:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001066:	2300      	movs	r3, #0
 8001068:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800106e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001070:	2300      	movs	r3, #0
 8001072:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001074:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001078:	2102      	movs	r1, #2
 800107a:	4618      	mov	r0, r3
 800107c:	f003 fc60 	bl	8004940 <HAL_RCC_ClockConfig>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001086:	f000 fb67 	bl	8001758 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 800108a:	4b0c      	ldr	r3, [pc, #48]	@ (80010bc <SystemClock_Config+0xcc>)
 800108c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM1|RCC_PERIPHCLK_TIM2
                              |RCC_PERIPHCLK_TIM34;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001096:	2300      	movs	r3, #0
 8001098:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 800109a:	2300      	movs	r3, #0
 800109c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInit.Tim34ClockSelection = RCC_TIM34CLK_HCLK;
 800109e:	2300      	movs	r3, #0
 80010a0:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	4618      	mov	r0, r3
 80010a6:	f003 fe5d 	bl	8004d64 <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80010b0:	f000 fb52 	bl	8001758 <Error_Handler>
  }
}
 80010b4:	bf00      	nop
 80010b6:	3798      	adds	r7, #152	@ 0x98
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	00301022 	.word	0x00301022

080010c0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010c6:	463b      	mov	r3, r7
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001190 <MX_ADC2_Init+0xd0>)
 80010d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001194 <MX_ADC2_Init+0xd4>)
 80010da:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001190 <MX_ADC2_Init+0xd0>)
 80010de:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010e2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001190 <MX_ADC2_Init+0xd0>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010ea:	4b29      	ldr	r3, [pc, #164]	@ (8001190 <MX_ADC2_Init+0xd0>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80010f0:	4b27      	ldr	r3, [pc, #156]	@ (8001190 <MX_ADC2_Init+0xd0>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f6:	4b26      	ldr	r3, [pc, #152]	@ (8001190 <MX_ADC2_Init+0xd0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010fe:	4b24      	ldr	r3, [pc, #144]	@ (8001190 <MX_ADC2_Init+0xd0>)
 8001100:	2200      	movs	r2, #0
 8001102:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001104:	4b22      	ldr	r3, [pc, #136]	@ (8001190 <MX_ADC2_Init+0xd0>)
 8001106:	2201      	movs	r2, #1
 8001108:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110a:	4b21      	ldr	r3, [pc, #132]	@ (8001190 <MX_ADC2_Init+0xd0>)
 800110c:	2200      	movs	r2, #0
 800110e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 2;
 8001110:	4b1f      	ldr	r3, [pc, #124]	@ (8001190 <MX_ADC2_Init+0xd0>)
 8001112:	2202      	movs	r2, #2
 8001114:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_ADC2_Init+0xd0>)
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800111e:	4b1c      	ldr	r3, [pc, #112]	@ (8001190 <MX_ADC2_Init+0xd0>)
 8001120:	2204      	movs	r2, #4
 8001122:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001124:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_ADC2_Init+0xd0>)
 8001126:	2200      	movs	r2, #0
 8001128:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800112a:	4b19      	ldr	r3, [pc, #100]	@ (8001190 <MX_ADC2_Init+0xd0>)
 800112c:	2200      	movs	r2, #0
 800112e:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001130:	4817      	ldr	r0, [pc, #92]	@ (8001190 <MX_ADC2_Init+0xd0>)
 8001132:	f000 ff01 	bl	8001f38 <HAL_ADC_Init>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 800113c:	f000 fb0c 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001140:	2306      	movs	r3, #6
 8001142:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001144:	2301      	movs	r3, #1
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001148:	2300      	movs	r3, #0
 800114a:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 800114c:	2307      	movs	r3, #7
 800114e:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001150:	2300      	movs	r3, #0
 8001152:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001158:	463b      	mov	r3, r7
 800115a:	4619      	mov	r1, r3
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <MX_ADC2_Init+0xd0>)
 800115e:	f001 fa01 	bl	8002564 <HAL_ADC_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8001168:	f000 faf6 	bl	8001758 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 800116c:	2307      	movs	r3, #7
 800116e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001170:	2302      	movs	r3, #2
 8001172:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001174:	463b      	mov	r3, r7
 8001176:	4619      	mov	r1, r3
 8001178:	4805      	ldr	r0, [pc, #20]	@ (8001190 <MX_ADC2_Init+0xd0>)
 800117a:	f001 f9f3 	bl	8002564 <HAL_ADC_ConfigChannel>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8001184:	f000 fae8 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20000210 	.word	0x20000210
 8001194:	50000100 	.word	0x50000100

08001198 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800119c:	4b1b      	ldr	r3, [pc, #108]	@ (800120c <MX_I2C1_Init+0x74>)
 800119e:	4a1c      	ldr	r2, [pc, #112]	@ (8001210 <MX_I2C1_Init+0x78>)
 80011a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00201D2B;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_I2C1_Init+0x74>)
 80011a4:	4a1b      	ldr	r2, [pc, #108]	@ (8001214 <MX_I2C1_Init+0x7c>)
 80011a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011a8:	4b18      	ldr	r3, [pc, #96]	@ (800120c <MX_I2C1_Init+0x74>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011ae:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_I2C1_Init+0x74>)
 80011b0:	2201      	movs	r2, #1
 80011b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011b4:	4b15      	ldr	r3, [pc, #84]	@ (800120c <MX_I2C1_Init+0x74>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011ba:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_I2C1_Init+0x74>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_I2C1_Init+0x74>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_I2C1_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_I2C1_Init+0x74>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011d2:	480e      	ldr	r0, [pc, #56]	@ (800120c <MX_I2C1_Init+0x74>)
 80011d4:	f002 fa5e 	bl	8003694 <HAL_I2C_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80011de:	f000 fabb 	bl	8001758 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4809      	ldr	r0, [pc, #36]	@ (800120c <MX_I2C1_Init+0x74>)
 80011e6:	f002 faf0 	bl	80037ca <HAL_I2CEx_ConfigAnalogFilter>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80011f0:	f000 fab2 	bl	8001758 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011f4:	2100      	movs	r1, #0
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_I2C1_Init+0x74>)
 80011f8:	f002 fb32 	bl	8003860 <HAL_I2CEx_ConfigDigitalFilter>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001202:	f000 faa9 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200002a4 	.word	0x200002a4
 8001210:	40005400 	.word	0x40005400
 8001214:	00201d2b 	.word	0x00201d2b

08001218 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09a      	sub	sp, #104	@ 0x68
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800121e:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001238:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
 8001248:	615a      	str	r2, [r3, #20]
 800124a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	222c      	movs	r2, #44	@ 0x2c
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 f80b 	bl	800826e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001258:	4b4a      	ldr	r3, [pc, #296]	@ (8001384 <MX_TIM1_Init+0x16c>)
 800125a:	4a4b      	ldr	r2, [pc, #300]	@ (8001388 <MX_TIM1_Init+0x170>)
 800125c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 27;
 800125e:	4b49      	ldr	r3, [pc, #292]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001260:	221b      	movs	r2, #27
 8001262:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b47      	ldr	r3, [pc, #284]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 800126a:	4b46      	ldr	r3, [pc, #280]	@ (8001384 <MX_TIM1_Init+0x16c>)
 800126c:	2264      	movs	r2, #100	@ 0x64
 800126e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001270:	4b44      	ldr	r3, [pc, #272]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001272:	2200      	movs	r2, #0
 8001274:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001276:	4b43      	ldr	r3, [pc, #268]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b41      	ldr	r3, [pc, #260]	@ (8001384 <MX_TIM1_Init+0x16c>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001282:	4840      	ldr	r0, [pc, #256]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001284:	f003 ff8a 	bl	800519c <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800128e:	f000 fa63 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001292:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001296:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001298:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800129c:	4619      	mov	r1, r3
 800129e:	4839      	ldr	r0, [pc, #228]	@ (8001384 <MX_TIM1_Init+0x16c>)
 80012a0:	f004 fdc2 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012aa:	f000 fa55 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012ae:	4835      	ldr	r0, [pc, #212]	@ (8001384 <MX_TIM1_Init+0x16c>)
 80012b0:	f004 f83c 	bl	800532c <HAL_TIM_PWM_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012ba:	f000 fa4d 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012be:	2300      	movs	r3, #0
 80012c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ca:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80012ce:	4619      	mov	r1, r3
 80012d0:	482c      	ldr	r0, [pc, #176]	@ (8001384 <MX_TIM1_Init+0x16c>)
 80012d2:	f005 fc69 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 80012dc:	f000 fa3c 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	@ 0x60
 80012e2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 50;
 80012e4:	2332      	movs	r3, #50	@ 0x32
 80012e6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	481f      	ldr	r0, [pc, #124]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001306:	f004 fc7b 	bl	8005c00 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001310:	f000 fa22 	bl	8001758 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001314:	2300      	movs	r3, #0
 8001316:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001318:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800131c:	2204      	movs	r2, #4
 800131e:	4619      	mov	r1, r3
 8001320:	4818      	ldr	r0, [pc, #96]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001322:	f004 fc6d 	bl	8005c00 <HAL_TIM_PWM_ConfigChannel>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800132c:	f000 fa14 	bl	8001758 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001340:	2300      	movs	r3, #0
 8001342:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001344:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001348:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001352:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001356:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001360:	1d3b      	adds	r3, r7, #4
 8001362:	4619      	mov	r1, r3
 8001364:	4807      	ldr	r0, [pc, #28]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001366:	f005 fcab 	bl	8006cc0 <HAL_TIMEx_ConfigBreakDeadTime>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001370:	f000 f9f2 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001374:	4803      	ldr	r0, [pc, #12]	@ (8001384 <MX_TIM1_Init+0x16c>)
 8001376:	f000 fb5f 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 800137a:	bf00      	nop
 800137c:	3768      	adds	r7, #104	@ 0x68
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	200002f8 	.word	0x200002f8
 8001388:	40012c00 	.word	0x40012c00

0800138c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b092      	sub	sp, #72	@ 0x48
 8001390:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001392:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013ac:	f107 031c 	add.w	r3, r7, #28
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013cc:	4b42      	ldr	r3, [pc, #264]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80013ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80013d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 80013d4:	4b40      	ldr	r3, [pc, #256]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80013d6:	2247      	movs	r2, #71	@ 0x47
 80013d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013da:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 80013e0:	4b3d      	ldr	r3, [pc, #244]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80013e2:	4a3e      	ldr	r2, [pc, #248]	@ (80014dc <MX_TIM2_Init+0x150>)
 80013e4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e6:	4b3c      	ldr	r3, [pc, #240]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ec:	4b3a      	ldr	r3, [pc, #232]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f2:	4839      	ldr	r0, [pc, #228]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80013f4:	f003 fed2 	bl	800519c <HAL_TIM_Base_Init>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 80013fe:	f000 f9ab 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001402:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001406:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001408:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800140c:	4619      	mov	r1, r3
 800140e:	4832      	ldr	r0, [pc, #200]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 8001410:	f004 fd0a 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800141a:	f000 f99d 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800141e:	482e      	ldr	r0, [pc, #184]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 8001420:	f004 f8f2 	bl	8005608 <HAL_TIM_IC_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 800142a:	f000 f995 	bl	8001758 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800142e:	482a      	ldr	r0, [pc, #168]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 8001430:	f003 ff7c 	bl	800532c <HAL_TIM_PWM_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800143a:	f000 f98d 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001446:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800144a:	4619      	mov	r1, r3
 800144c:	4822      	ldr	r0, [pc, #136]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 800144e:	f005 fbab 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001458:	f000 f97e 	bl	8001758 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800145c:	2300      	movs	r3, #0
 800145e:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001460:	2301      	movs	r3, #1
 8001462:	623b      	str	r3, [r7, #32]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigIC.ICFilter = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	2200      	movs	r2, #0
 8001472:	4619      	mov	r1, r3
 8001474:	4818      	ldr	r0, [pc, #96]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 8001476:	f004 fb27 	bl	8005ac8 <HAL_TIM_IC_ConfigChannel>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0xf8>
  {
    Error_Handler();
 8001480:	f000 f96a 	bl	8001758 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8001488:	2302      	movs	r3, #2
 800148a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 800148c:	f107 031c 	add.w	r3, r7, #28
 8001490:	2204      	movs	r2, #4
 8001492:	4619      	mov	r1, r3
 8001494:	4810      	ldr	r0, [pc, #64]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 8001496:	f004 fb17 	bl	8005ac8 <HAL_TIM_IC_ConfigChannel>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 80014a0:	f000 f95a 	bl	8001758 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014a4:	2360      	movs	r3, #96	@ 0x60
 80014a6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 80014a8:	230a      	movs	r3, #10
 80014aa:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ac:	2300      	movs	r3, #0
 80014ae:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b0:	2300      	movs	r3, #0
 80014b2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014b4:	463b      	mov	r3, r7
 80014b6:	2208      	movs	r2, #8
 80014b8:	4619      	mov	r1, r3
 80014ba:	4807      	ldr	r0, [pc, #28]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80014bc:	f004 fba0 	bl	8005c00 <HAL_TIM_PWM_ConfigChannel>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <MX_TIM2_Init+0x13e>
  {
    Error_Handler();
 80014c6:	f000 f947 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014ca:	4803      	ldr	r0, [pc, #12]	@ (80014d8 <MX_TIM2_Init+0x14c>)
 80014cc:	f000 fab4 	bl	8001a38 <HAL_TIM_MspPostInit>

}
 80014d0:	bf00      	nop
 80014d2:	3748      	adds	r7, #72	@ 0x48
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	20000344 	.word	0x20000344
 80014dc:	0001869f 	.word	0x0001869f

080014e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b088      	sub	sp, #32
 80014e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e6:	f107 0310 	add.w	r3, r7, #16
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f4:	1d3b      	adds	r3, r7, #4
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001500:	4a1e      	ldr	r2, [pc, #120]	@ (800157c <MX_TIM3_Init+0x9c>)
 8001502:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7199;
 8001504:	4b1c      	ldr	r3, [pc, #112]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001506:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 800150a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b1a      	ldr	r3, [pc, #104]	@ (8001578 <MX_TIM3_Init+0x98>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001512:	4b19      	ldr	r3, [pc, #100]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001514:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001518:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151a:	4b17      	ldr	r3, [pc, #92]	@ (8001578 <MX_TIM3_Init+0x98>)
 800151c:	2200      	movs	r2, #0
 800151e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001520:	4b15      	ldr	r3, [pc, #84]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001522:	2200      	movs	r2, #0
 8001524:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001526:	4814      	ldr	r0, [pc, #80]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001528:	f003 fe38 	bl	800519c <HAL_TIM_Base_Init>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001532:	f000 f911 	bl	8001758 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001536:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	4619      	mov	r1, r3
 8001542:	480d      	ldr	r0, [pc, #52]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001544:	f004 fc70 	bl	8005e28 <HAL_TIM_ConfigClockSource>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 800154e:	f000 f903 	bl	8001758 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	4619      	mov	r1, r3
 800155e:	4806      	ldr	r0, [pc, #24]	@ (8001578 <MX_TIM3_Init+0x98>)
 8001560:	f005 fb22 	bl	8006ba8 <HAL_TIMEx_MasterConfigSynchronization>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800156a:	f000 f8f5 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	20000390 	.word	0x20000390
 800157c:	40000400 	.word	0x40000400

08001580 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001584:	4b14      	ldr	r3, [pc, #80]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 8001586:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <MX_USART2_UART_Init+0x5c>)
 8001588:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158a:	4b13      	ldr	r3, [pc, #76]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 800158c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001590:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001592:	4b11      	ldr	r3, [pc, #68]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 8001594:	2200      	movs	r2, #0
 8001596:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001598:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 800159a:	2200      	movs	r2, #0
 800159c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800159e:	4b0e      	ldr	r3, [pc, #56]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a4:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015a6:	220c      	movs	r2, #12
 80015a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015aa:	4b0b      	ldr	r3, [pc, #44]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b0:	4b09      	ldr	r3, [pc, #36]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b6:	4b08      	ldr	r3, [pc, #32]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015bc:	4b06      	ldr	r3, [pc, #24]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4805      	ldr	r0, [pc, #20]	@ (80015d8 <MX_USART2_UART_Init+0x58>)
 80015c4:	f005 fc20 	bl	8006e08 <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d001      	beq.n	80015d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015ce:	f000 f8c3 	bl	8001758 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003dc 	.word	0x200003dc
 80015dc:	40004400 	.word	0x40004400

080015e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80015e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_DMA_Init+0x38>)
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001618 <MX_DMA_Init+0x38>)
 80015ec:	f043 0302 	orr.w	r3, r3, #2
 80015f0:	6153      	str	r3, [r2, #20]
 80015f2:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_DMA_Init+0x38>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	f003 0302 	and.w	r3, r3, #2
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2100      	movs	r1, #0
 8001602:	2038      	movs	r0, #56	@ 0x38
 8001604:	f001 fca3 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8001608:	2038      	movs	r0, #56	@ 0x38
 800160a:	f001 fcbc 	bl	8002f86 <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40021000 	.word	0x40021000

0800161c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b08a      	sub	sp, #40	@ 0x28
 8001620:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001622:	f107 0314 	add.w	r3, r7, #20
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001632:	4b46      	ldr	r3, [pc, #280]	@ (800174c <MX_GPIO_Init+0x130>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a45      	ldr	r2, [pc, #276]	@ (800174c <MX_GPIO_Init+0x130>)
 8001638:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800163c:	6153      	str	r3, [r2, #20]
 800163e:	4b43      	ldr	r3, [pc, #268]	@ (800174c <MX_GPIO_Init+0x130>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001646:	613b      	str	r3, [r7, #16]
 8001648:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800164a:	4b40      	ldr	r3, [pc, #256]	@ (800174c <MX_GPIO_Init+0x130>)
 800164c:	695b      	ldr	r3, [r3, #20]
 800164e:	4a3f      	ldr	r2, [pc, #252]	@ (800174c <MX_GPIO_Init+0x130>)
 8001650:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001654:	6153      	str	r3, [r2, #20]
 8001656:	4b3d      	ldr	r3, [pc, #244]	@ (800174c <MX_GPIO_Init+0x130>)
 8001658:	695b      	ldr	r3, [r3, #20]
 800165a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800165e:	60fb      	str	r3, [r7, #12]
 8001660:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	4b3a      	ldr	r3, [pc, #232]	@ (800174c <MX_GPIO_Init+0x130>)
 8001664:	695b      	ldr	r3, [r3, #20]
 8001666:	4a39      	ldr	r2, [pc, #228]	@ (800174c <MX_GPIO_Init+0x130>)
 8001668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800166c:	6153      	str	r3, [r2, #20]
 800166e:	4b37      	ldr	r3, [pc, #220]	@ (800174c <MX_GPIO_Init+0x130>)
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001676:	60bb      	str	r3, [r7, #8]
 8001678:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800167a:	4b34      	ldr	r3, [pc, #208]	@ (800174c <MX_GPIO_Init+0x130>)
 800167c:	695b      	ldr	r3, [r3, #20]
 800167e:	4a33      	ldr	r2, [pc, #204]	@ (800174c <MX_GPIO_Init+0x130>)
 8001680:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001684:	6153      	str	r3, [r2, #20]
 8001686:	4b31      	ldr	r3, [pc, #196]	@ (800174c <MX_GPIO_Init+0x130>)
 8001688:	695b      	ldr	r3, [r3, #20]
 800168a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, IN2_Pin|IN3_Pin|IN1_Pin, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f242 0118 	movw	r1, #8216	@ 0x2018
 8001698:	482d      	ldr	r0, [pc, #180]	@ (8001750 <MX_GPIO_Init+0x134>)
 800169a:	f001 ffcb 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, GPIO_PIN_RESET);
 800169e:	2200      	movs	r2, #0
 80016a0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016a4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016a8:	f001 ffc4 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80016b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80016bc:	f107 0314 	add.w	r3, r7, #20
 80016c0:	4619      	mov	r1, r3
 80016c2:	4824      	ldr	r0, [pc, #144]	@ (8001754 <MX_GPIO_Init+0x138>)
 80016c4:	f001 fe2c 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : enkoder_Pin encoder1_Pin */
  GPIO_InitStruct.Pin = enkoder_Pin|encoder1_Pin;
 80016c8:	2350      	movs	r3, #80	@ 0x50
 80016ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80016cc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80016d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80016d2:	2302      	movs	r3, #2
 80016d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 0314 	add.w	r3, r7, #20
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016e0:	f001 fe1e 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2_Pin IN3_Pin IN1_Pin */
  GPIO_InitStruct.Pin = IN2_Pin|IN3_Pin|IN1_Pin;
 80016e4:	f242 0318 	movw	r3, #8216	@ 0x2018
 80016e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ea:	2301      	movs	r3, #1
 80016ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f2:	2300      	movs	r3, #0
 80016f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	4814      	ldr	r0, [pc, #80]	@ (8001750 <MX_GPIO_Init+0x134>)
 80016fe:	f001 fe0f 	bl	8003320 <HAL_GPIO_Init>

  /*Configure GPIO pin : IN4_Pin */
  GPIO_InitStruct.Pin = IN4_Pin;
 8001702:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001706:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001708:	2301      	movs	r3, #1
 800170a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(IN4_GPIO_Port, &GPIO_InitStruct);
 8001714:	f107 0314 	add.w	r3, r7, #20
 8001718:	4619      	mov	r1, r3
 800171a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800171e:	f001 fdff 	bl	8003320 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2100      	movs	r1, #0
 8001726:	200a      	movs	r0, #10
 8001728:	f001 fc11 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800172c:	200a      	movs	r0, #10
 800172e:	f001 fc2a 	bl	8002f86 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2017      	movs	r0, #23
 8001738:	f001 fc09 	bl	8002f4e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800173c:	2017      	movs	r0, #23
 800173e:	f001 fc22 	bl	8002f86 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001742:	bf00      	nop
 8001744:	3728      	adds	r7, #40	@ 0x28
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40021000 	.word	0x40021000
 8001750:	48000400 	.word	0x48000400
 8001754:	48000800 	.word	0x48000800

08001758 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800175c:	b672      	cpsid	i
}
 800175e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <Error_Handler+0x8>

08001764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <HAL_MspInit+0x44>)
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	4a0e      	ldr	r2, [pc, #56]	@ (80017a8 <HAL_MspInit+0x44>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	6193      	str	r3, [r2, #24]
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <HAL_MspInit+0x44>)
 8001778:	699b      	ldr	r3, [r3, #24]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <HAL_MspInit+0x44>)
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	4a08      	ldr	r2, [pc, #32]	@ (80017a8 <HAL_MspInit+0x44>)
 8001788:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800178c:	61d3      	str	r3, [r2, #28]
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <HAL_MspInit+0x44>)
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001796:	603b      	str	r3, [r7, #0]
 8001798:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800179a:	2007      	movs	r0, #7
 800179c:	f001 fbcc 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a0:	bf00      	nop
 80017a2:	3708      	adds	r7, #8
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08a      	sub	sp, #40	@ 0x28
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b4:	f107 0314 	add.w	r3, r7, #20
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
 80017c0:	60da      	str	r2, [r3, #12]
 80017c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC2)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a29      	ldr	r2, [pc, #164]	@ (8001870 <HAL_ADC_MspInit+0xc4>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d14b      	bne.n	8001866 <HAL_ADC_MspInit+0xba>
  {
    /* USER CODE BEGIN ADC2_MspInit 0 */

    /* USER CODE END ADC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80017ce:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <HAL_ADC_MspInit+0xc8>)
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	4a28      	ldr	r2, [pc, #160]	@ (8001874 <HAL_ADC_MspInit+0xc8>)
 80017d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017d8:	6153      	str	r3, [r2, #20]
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_ADC_MspInit+0xc8>)
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017e6:	4b23      	ldr	r3, [pc, #140]	@ (8001874 <HAL_ADC_MspInit+0xc8>)
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_ADC_MspInit+0xc8>)
 80017ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80017f0:	6153      	str	r3, [r2, #20]
 80017f2:	4b20      	ldr	r3, [pc, #128]	@ (8001874 <HAL_ADC_MspInit+0xc8>)
 80017f4:	695b      	ldr	r3, [r3, #20]
 80017f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC0     ------> ADC2_IN6
    PC1     ------> ADC2_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017fe:	2303      	movs	r3, #3
 8001800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001802:	2303      	movs	r3, #3
 8001804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001806:	2300      	movs	r3, #0
 8001808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180a:	f107 0314 	add.w	r3, r7, #20
 800180e:	4619      	mov	r1, r3
 8001810:	4819      	ldr	r0, [pc, #100]	@ (8001878 <HAL_ADC_MspInit+0xcc>)
 8001812:	f001 fd85 	bl	8003320 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA2_Channel1;
 8001816:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 8001818:	4a19      	ldr	r2, [pc, #100]	@ (8001880 <HAL_ADC_MspInit+0xd4>)
 800181a:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181c:	4b17      	ldr	r3, [pc, #92]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 800181e:	2200      	movs	r2, #0
 8001820:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b16      	ldr	r3, [pc, #88]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 800182a:	2280      	movs	r2, #128	@ 0x80
 800182c:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800182e:	4b13      	ldr	r3, [pc, #76]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 8001830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001834:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001836:	4b11      	ldr	r3, [pc, #68]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 8001838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800183c:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 8001840:	2220      	movs	r2, #32
 8001842:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001844:	4b0d      	ldr	r3, [pc, #52]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 8001846:	2200      	movs	r2, #0
 8001848:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800184a:	480c      	ldr	r0, [pc, #48]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 800184c:	f001 fbb5 	bl	8002fba <HAL_DMA_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_ADC_MspInit+0xae>
    {
      Error_Handler();
 8001856:	f7ff ff7f 	bl	8001758 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a07      	ldr	r2, [pc, #28]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 800185e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001860:	4a06      	ldr	r2, [pc, #24]	@ (800187c <HAL_ADC_MspInit+0xd0>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC2_MspInit 1 */

  }

}
 8001866:	bf00      	nop
 8001868:	3728      	adds	r7, #40	@ 0x28
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	50000100 	.word	0x50000100
 8001874:	40021000 	.word	0x40021000
 8001878:	48000800 	.word	0x48000800
 800187c:	20000260 	.word	0x20000260
 8001880:	40020408 	.word	0x40020408

08001884 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	@ 0x28
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	f107 0314 	add.w	r3, r7, #20
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a26      	ldr	r2, [pc, #152]	@ (800193c <HAL_I2C_MspInit+0xb8>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d145      	bne.n	8001932 <HAL_I2C_MspInit+0xae>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018a6:	4b26      	ldr	r3, [pc, #152]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	4a25      	ldr	r2, [pc, #148]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018b0:	6153      	str	r3, [r2, #20]
 80018b2:	4b23      	ldr	r3, [pc, #140]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ba:	613b      	str	r3, [r7, #16]
 80018bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018be:	4b20      	ldr	r3, [pc, #128]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018c8:	6153      	str	r3, [r2, #20]
 80018ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 80018cc:	695b      	ldr	r3, [r3, #20]
 80018ce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80018d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018dc:	2312      	movs	r3, #18
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018e4:	2303      	movs	r3, #3
 80018e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018e8:	2304      	movs	r3, #4
 80018ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ec:	f107 0314 	add.w	r3, r7, #20
 80018f0:	4619      	mov	r1, r3
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f001 fd13 	bl	8003320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018fe:	2312      	movs	r3, #18
 8001900:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001906:	2303      	movs	r3, #3
 8001908:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800190a:	2304      	movs	r3, #4
 800190c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800190e:	f107 0314 	add.w	r3, r7, #20
 8001912:	4619      	mov	r1, r3
 8001914:	480b      	ldr	r0, [pc, #44]	@ (8001944 <HAL_I2C_MspInit+0xc0>)
 8001916:	f001 fd03 	bl	8003320 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800191a:	4b09      	ldr	r3, [pc, #36]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 800191c:	69db      	ldr	r3, [r3, #28]
 800191e:	4a08      	ldr	r2, [pc, #32]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 8001920:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001924:	61d3      	str	r3, [r2, #28]
 8001926:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <HAL_I2C_MspInit+0xbc>)
 8001928:	69db      	ldr	r3, [r3, #28]
 800192a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800192e:	60bb      	str	r3, [r7, #8]
 8001930:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001932:	bf00      	nop
 8001934:	3728      	adds	r7, #40	@ 0x28
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40005400 	.word	0x40005400
 8001940:	40021000 	.word	0x40021000
 8001944:	48000400 	.word	0x48000400

08001948 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08c      	sub	sp, #48	@ 0x30
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	2200      	movs	r2, #0
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	605a      	str	r2, [r3, #4]
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	60da      	str	r2, [r3, #12]
 800195e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a31      	ldr	r2, [pc, #196]	@ (8001a2c <HAL_TIM_Base_MspInit+0xe4>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d10c      	bne.n	8001984 <HAL_TIM_Base_MspInit+0x3c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800196a:	4b31      	ldr	r3, [pc, #196]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 800196c:	699b      	ldr	r3, [r3, #24]
 800196e:	4a30      	ldr	r2, [pc, #192]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 8001970:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001974:	6193      	str	r3, [r2, #24]
 8001976:	4b2e      	ldr	r3, [pc, #184]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800197e:	61bb      	str	r3, [r7, #24]
 8001980:	69bb      	ldr	r3, [r7, #24]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001982:	e04f      	b.n	8001a24 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM2)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800198c:	d131      	bne.n	80019f2 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800198e:	4b28      	ldr	r3, [pc, #160]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 8001990:	69db      	ldr	r3, [r3, #28]
 8001992:	4a27      	ldr	r2, [pc, #156]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	61d3      	str	r3, [r2, #28]
 800199a:	4b25      	ldr	r3, [pc, #148]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 800199c:	69db      	ldr	r3, [r3, #28]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	617b      	str	r3, [r7, #20]
 80019a4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019a6:	4b22      	ldr	r3, [pc, #136]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	4a21      	ldr	r2, [pc, #132]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 80019ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b0:	6153      	str	r3, [r2, #20]
 80019b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 80019b4:	695b      	ldr	r3, [r3, #20]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	613b      	str	r3, [r7, #16]
 80019bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019be:	2301      	movs	r3, #1
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c2:	2302      	movs	r3, #2
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80019ce:	2301      	movs	r3, #1
 80019d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80019dc:	f001 fca0 	bl	8003320 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019e0:	2200      	movs	r2, #0
 80019e2:	2100      	movs	r1, #0
 80019e4:	201c      	movs	r0, #28
 80019e6:	f001 fab2 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019ea:	201c      	movs	r0, #28
 80019ec:	f001 facb 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 80019f0:	e018      	b.n	8001a24 <HAL_TIM_Base_MspInit+0xdc>
  else if(htim_base->Instance==TIM3)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001a34 <HAL_TIM_Base_MspInit+0xec>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d113      	bne.n	8001a24 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	4a0b      	ldr	r2, [pc, #44]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	61d3      	str	r3, [r2, #28]
 8001a08:	4b09      	ldr	r3, [pc, #36]	@ (8001a30 <HAL_TIM_Base_MspInit+0xe8>)
 8001a0a:	69db      	ldr	r3, [r3, #28]
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a14:	2200      	movs	r2, #0
 8001a16:	2100      	movs	r1, #0
 8001a18:	201d      	movs	r0, #29
 8001a1a:	f001 fa98 	bl	8002f4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a1e:	201d      	movs	r0, #29
 8001a20:	f001 fab1 	bl	8002f86 <HAL_NVIC_EnableIRQ>
}
 8001a24:	bf00      	nop
 8001a26:	3730      	adds	r7, #48	@ 0x30
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	40012c00 	.word	0x40012c00
 8001a30:	40021000 	.word	0x40021000
 8001a34:	40000400 	.word	0x40000400

08001a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a23      	ldr	r2, [pc, #140]	@ (8001ae4 <HAL_TIM_MspPostInit+0xac>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d11e      	bne.n	8001a98 <HAL_TIM_MspPostInit+0x60>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001a60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a64:	6153      	str	r3, [r2, #20]
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001a68:	695b      	ldr	r3, [r3, #20]
 8001a6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6e:	613b      	str	r3, [r7, #16]
 8001a70:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a72:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001a76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2300      	movs	r3, #0
 8001a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a84:	2306      	movs	r3, #6
 8001a86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a88:	f107 0314 	add.w	r3, r7, #20
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a92:	f001 fc45 	bl	8003320 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001a96:	e021      	b.n	8001adc <HAL_TIM_MspPostInit+0xa4>
  else if(htim->Instance==TIM2)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa0:	d11c      	bne.n	8001adc <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa2:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001aa4:	695b      	ldr	r3, [r3, #20]
 8001aa6:	4a10      	ldr	r2, [pc, #64]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aac:	6153      	str	r3, [r2, #20]
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_TIM_MspPostInit+0xb0>)
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001acc:	2301      	movs	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ad0:	f107 0314 	add.w	r3, r7, #20
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4805      	ldr	r0, [pc, #20]	@ (8001aec <HAL_TIM_MspPostInit+0xb4>)
 8001ad8:	f001 fc22 	bl	8003320 <HAL_GPIO_Init>
}
 8001adc:	bf00      	nop
 8001ade:	3728      	adds	r7, #40	@ 0x28
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40012c00 	.word	0x40012c00
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	48000400 	.word	0x48000400

08001af0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b08a      	sub	sp, #40	@ 0x28
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001af8:	f107 0314 	add.w	r3, r7, #20
 8001afc:	2200      	movs	r2, #0
 8001afe:	601a      	str	r2, [r3, #0]
 8001b00:	605a      	str	r2, [r3, #4]
 8001b02:	609a      	str	r2, [r3, #8]
 8001b04:	60da      	str	r2, [r3, #12]
 8001b06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a17      	ldr	r2, [pc, #92]	@ (8001b6c <HAL_UART_MspInit+0x7c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d128      	bne.n	8001b64 <HAL_UART_MspInit+0x74>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b12:	4b17      	ldr	r3, [pc, #92]	@ (8001b70 <HAL_UART_MspInit+0x80>)
 8001b14:	69db      	ldr	r3, [r3, #28]
 8001b16:	4a16      	ldr	r2, [pc, #88]	@ (8001b70 <HAL_UART_MspInit+0x80>)
 8001b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b1c:	61d3      	str	r3, [r2, #28]
 8001b1e:	4b14      	ldr	r3, [pc, #80]	@ (8001b70 <HAL_UART_MspInit+0x80>)
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b26:	613b      	str	r3, [r7, #16]
 8001b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	4b11      	ldr	r3, [pc, #68]	@ (8001b70 <HAL_UART_MspInit+0x80>)
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	4a10      	ldr	r2, [pc, #64]	@ (8001b70 <HAL_UART_MspInit+0x80>)
 8001b30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b34:	6153      	str	r3, [r2, #20]
 8001b36:	4b0e      	ldr	r3, [pc, #56]	@ (8001b70 <HAL_UART_MspInit+0x80>)
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b3e:	60fb      	str	r3, [r7, #12]
 8001b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b42:	230c      	movs	r3, #12
 8001b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b46:	2302      	movs	r3, #2
 8001b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b52:	2307      	movs	r3, #7
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b56:	f107 0314 	add.w	r3, r7, #20
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b60:	f001 fbde 	bl	8003320 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	@ 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40004400 	.word	0x40004400
 8001b70:	40021000 	.word	0x40021000

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <NMI_Handler+0x4>

08001b7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b80:	bf00      	nop
 8001b82:	e7fd      	b.n	8001b80 <HardFault_Handler+0x4>

08001b84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b88:	bf00      	nop
 8001b8a:	e7fd      	b.n	8001b88 <MemManage_Handler+0x4>

08001b8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b90:	bf00      	nop
 8001b92:	e7fd      	b.n	8001b90 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	bf00      	nop
 8001b9a:	e7fd      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ba0:	bf00      	nop
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bca:	f000 f977 	bl	8001ebc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(enkoder_Pin);
 8001bd6:	2010      	movs	r0, #16
 8001bd8:	f001 fd44 	bl	8003664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(encoder1_Pin);
 8001be4:	2040      	movs	r0, #64	@ 0x40
 8001be6:	f001 fd3d 	bl	8003664 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
	...

08001bf0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001bf4:	4802      	ldr	r0, [pc, #8]	@ (8001c00 <TIM2_IRQHandler+0x10>)
 8001bf6:	f003 fe65 	bl	80058c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001bfa:	bf00      	nop
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	20000344 	.word	0x20000344

08001c04 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001c08:	4802      	ldr	r0, [pc, #8]	@ (8001c14 <TIM3_IRQHandler+0x10>)
 8001c0a:	f003 fe5b 	bl	80058c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	20000390 	.word	0x20000390

08001c18 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001c1c:	4802      	ldr	r0, [pc, #8]	@ (8001c28 <DMA2_Channel1_IRQHandler+0x10>)
 8001c1e:	f001 fa72 	bl	8003106 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001c22:	bf00      	nop
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000260 	.word	0x20000260

08001c2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return 1;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <_kill>:

int _kill(int pid, int sig)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c46:	f006 fb65 	bl	8008314 <__errno>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2216      	movs	r2, #22
 8001c4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <_exit>:

void _exit (int status)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c64:	f04f 31ff 	mov.w	r1, #4294967295
 8001c68:	6878      	ldr	r0, [r7, #4]
 8001c6a:	f7ff ffe7 	bl	8001c3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c6e:	bf00      	nop
 8001c70:	e7fd      	b.n	8001c6e <_exit+0x12>

08001c72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c72:	b580      	push	{r7, lr}
 8001c74:	b086      	sub	sp, #24
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	60f8      	str	r0, [r7, #12]
 8001c7a:	60b9      	str	r1, [r7, #8]
 8001c7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7e:	2300      	movs	r3, #0
 8001c80:	617b      	str	r3, [r7, #20]
 8001c82:	e00a      	b.n	8001c9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c84:	f3af 8000 	nop.w
 8001c88:	4601      	mov	r1, r0
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60ba      	str	r2, [r7, #8]
 8001c90:	b2ca      	uxtb	r2, r1
 8001c92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	3301      	adds	r3, #1
 8001c98:	617b      	str	r3, [r7, #20]
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	dbf0      	blt.n	8001c84 <_read+0x12>
  }

  return len;
 8001ca2:	687b      	ldr	r3, [r7, #4]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	e009      	b.n	8001cd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	60ba      	str	r2, [r7, #8]
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7fe ff76 	bl	8000bb8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf1      	blt.n	8001cbe <_write+0x12>
  }
  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_close>:

int _close(int file)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d0c:	605a      	str	r2, [r3, #4]
  return 0;
 8001d0e:	2300      	movs	r3, #0
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	370c      	adds	r7, #12
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <_isatty>:

int _isatty(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d24:	2301      	movs	r3, #1
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d32:	b480      	push	{r7}
 8001d34:	b085      	sub	sp, #20
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d54:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <_sbrk+0x5c>)
 8001d56:	4b15      	ldr	r3, [pc, #84]	@ (8001dac <_sbrk+0x60>)
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d60:	4b13      	ldr	r3, [pc, #76]	@ (8001db0 <_sbrk+0x64>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d102      	bne.n	8001d6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d68:	4b11      	ldr	r3, [pc, #68]	@ (8001db0 <_sbrk+0x64>)
 8001d6a:	4a12      	ldr	r2, [pc, #72]	@ (8001db4 <_sbrk+0x68>)
 8001d6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d6e:	4b10      	ldr	r3, [pc, #64]	@ (8001db0 <_sbrk+0x64>)
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d207      	bcs.n	8001d8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d7c:	f006 faca 	bl	8008314 <__errno>
 8001d80:	4603      	mov	r3, r0
 8001d82:	220c      	movs	r2, #12
 8001d84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
 8001d8a:	e009      	b.n	8001da0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d8c:	4b08      	ldr	r3, [pc, #32]	@ (8001db0 <_sbrk+0x64>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d92:	4b07      	ldr	r3, [pc, #28]	@ (8001db0 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	4a05      	ldr	r2, [pc, #20]	@ (8001db0 <_sbrk+0x64>)
 8001d9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3718      	adds	r7, #24
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20010000 	.word	0x20010000
 8001dac:	00000400 	.word	0x00000400
 8001db0:	20000494 	.word	0x20000494
 8001db4:	200005e8 	.word	0x200005e8

08001db8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dbc:	4b06      	ldr	r3, [pc, #24]	@ (8001dd8 <SystemInit+0x20>)
 8001dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dc2:	4a05      	ldr	r2, [pc, #20]	@ (8001dd8 <SystemInit+0x20>)
 8001dc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001dc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dcc:	bf00      	nop
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ddc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e14 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001de0:	f7ff ffea 	bl	8001db8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001de6:	490d      	ldr	r1, [pc, #52]	@ (8001e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001de8:	4a0d      	ldr	r2, [pc, #52]	@ (8001e20 <LoopForever+0xe>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dec:	e002      	b.n	8001df4 <LoopCopyDataInit>

08001dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001df2:	3304      	adds	r3, #4

08001df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001df8:	d3f9      	bcc.n	8001dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001e28 <LoopForever+0x16>)
  movs r3, #0
 8001dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e00:	e001      	b.n	8001e06 <LoopFillZerobss>

08001e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e04:	3204      	adds	r2, #4

08001e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e08:	d3fb      	bcc.n	8001e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e0a:	f006 fa89 	bl	8008320 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e0e:	f7fe ff5d 	bl	8000ccc <main>

08001e12 <LoopForever>:

LoopForever:
    b LoopForever
 8001e12:	e7fe      	b.n	8001e12 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e1c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8001e20:	0800a524 	.word	0x0800a524
  ldr r2, =_sbss
 8001e24:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8001e28:	200005e8 	.word	0x200005e8

08001e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e2c:	e7fe      	b.n	8001e2c <ADC1_2_IRQHandler>
	...

08001e30 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e34:	4b08      	ldr	r3, [pc, #32]	@ (8001e58 <HAL_Init+0x28>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a07      	ldr	r2, [pc, #28]	@ (8001e58 <HAL_Init+0x28>)
 8001e3a:	f043 0310 	orr.w	r3, r3, #16
 8001e3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e40:	2003      	movs	r0, #3
 8001e42:	f001 f879 	bl	8002f38 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e46:	2000      	movs	r0, #0
 8001e48:	f000 f808 	bl	8001e5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e4c:	f7ff fc8a 	bl	8001764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	40022000 	.word	0x40022000

08001e5c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <HAL_InitTick+0x54>)
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	4b12      	ldr	r3, [pc, #72]	@ (8001eb4 <HAL_InitTick+0x58>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f001 f891 	bl	8002fa2 <HAL_SYSTICK_Config>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e00e      	b.n	8001ea8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b0f      	cmp	r3, #15
 8001e8e:	d80a      	bhi.n	8001ea6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e90:	2200      	movs	r2, #0
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	f04f 30ff 	mov.w	r0, #4294967295
 8001e98:	f001 f859 	bl	8002f4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e9c:	4a06      	ldr	r2, [pc, #24]	@ (8001eb8 <HAL_InitTick+0x5c>)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	e000      	b.n	8001ea8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	20000020 	.word	0x20000020
 8001eb4:	20000028 	.word	0x20000028
 8001eb8:	20000024 	.word	0x20000024

08001ebc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec0:	4b06      	ldr	r3, [pc, #24]	@ (8001edc <HAL_IncTick+0x20>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b06      	ldr	r3, [pc, #24]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4413      	add	r3, r2
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_IncTick+0x24>)
 8001ece:	6013      	str	r3, [r2, #0]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	20000028 	.word	0x20000028
 8001ee0:	20000498 	.word	0x20000498

08001ee4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  return uwTick;  
 8001ee8:	4b03      	ldr	r3, [pc, #12]	@ (8001ef8 <HAL_GetTick+0x14>)
 8001eea:	681b      	ldr	r3, [r3, #0]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	20000498 	.word	0x20000498

08001efc <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f04:	bf00      	nop
 8001f06:	370c      	adds	r7, #12
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0e:	4770      	bx	lr

08001f10 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr

08001f38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b09a      	sub	sp, #104	@ 0x68
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e1e3      	b.n	8002320 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d176      	bne.n	8002058 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d152      	bne.n	8002018 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2200      	movs	r2, #0
 8001f76:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f7ff fc0d 	bl	80017ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d13b      	bne.n	8002018 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 fe93 	bl	8002ccc <ADC_Disable>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fb0:	f003 0310 	and.w	r3, r3, #16
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d12f      	bne.n	8002018 <HAL_ADC_Init+0xe0>
 8001fb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d12b      	bne.n	8002018 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001fc8:	f023 0302 	bic.w	r3, r3, #2
 8001fcc:	f043 0202 	orr.w	r2, r3, #2
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689a      	ldr	r2, [r3, #8]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fe2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	689a      	ldr	r2, [r3, #8]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8001ff2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001ff4:	4b92      	ldr	r3, [pc, #584]	@ (8002240 <HAL_ADC_Init+0x308>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a92      	ldr	r2, [pc, #584]	@ (8002244 <HAL_ADC_Init+0x30c>)
 8001ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8001ffe:	0c9a      	lsrs	r2, r3, #18
 8002000:	4613      	mov	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800200a:	e002      	b.n	8002012 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	3b01      	subs	r3, #1
 8002010:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d1f9      	bne.n	800200c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002030:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002034:	d110      	bne.n	8002058 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203a:	f023 0312 	bic.w	r3, r3, #18
 800203e:	f043 0210 	orr.w	r2, r3, #16
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	f040 8150 	bne.w	8002306 <HAL_ADC_Init+0x3ce>
 8002066:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 814b 	bne.w	8002306 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800207a:	2b00      	cmp	r3, #0
 800207c:	f040 8143 	bne.w	8002306 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002084:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002088:	f043 0202 	orr.w	r2, r3, #2
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002098:	d004      	beq.n	80020a4 <HAL_ADC_Init+0x16c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a6a      	ldr	r2, [pc, #424]	@ (8002248 <HAL_ADC_Init+0x310>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d101      	bne.n	80020a8 <HAL_ADC_Init+0x170>
 80020a4:	4b69      	ldr	r3, [pc, #420]	@ (800224c <HAL_ADC_Init+0x314>)
 80020a6:	e000      	b.n	80020aa <HAL_ADC_Init+0x172>
 80020a8:	4b69      	ldr	r3, [pc, #420]	@ (8002250 <HAL_ADC_Init+0x318>)
 80020aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80020b4:	d102      	bne.n	80020bc <HAL_ADC_Init+0x184>
 80020b6:	4b64      	ldr	r3, [pc, #400]	@ (8002248 <HAL_ADC_Init+0x310>)
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	e01a      	b.n	80020f2 <HAL_ADC_Init+0x1ba>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a61      	ldr	r2, [pc, #388]	@ (8002248 <HAL_ADC_Init+0x310>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d103      	bne.n	80020ce <HAL_ADC_Init+0x196>
 80020c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80020ca:	60fb      	str	r3, [r7, #12]
 80020cc:	e011      	b.n	80020f2 <HAL_ADC_Init+0x1ba>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a60      	ldr	r2, [pc, #384]	@ (8002254 <HAL_ADC_Init+0x31c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d102      	bne.n	80020de <HAL_ADC_Init+0x1a6>
 80020d8:	4b5f      	ldr	r3, [pc, #380]	@ (8002258 <HAL_ADC_Init+0x320>)
 80020da:	60fb      	str	r3, [r7, #12]
 80020dc:	e009      	b.n	80020f2 <HAL_ADC_Init+0x1ba>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a5d      	ldr	r2, [pc, #372]	@ (8002258 <HAL_ADC_Init+0x320>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d102      	bne.n	80020ee <HAL_ADC_Init+0x1b6>
 80020e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002254 <HAL_ADC_Init+0x31c>)
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e001      	b.n	80020f2 <HAL_ADC_Init+0x1ba>
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d108      	bne.n	8002112 <HAL_ADC_Init+0x1da>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	2b01      	cmp	r3, #1
 800210c:	d101      	bne.n	8002112 <HAL_ADC_Init+0x1da>
 800210e:	2301      	movs	r3, #1
 8002110:	e000      	b.n	8002114 <HAL_ADC_Init+0x1dc>
 8002112:	2300      	movs	r3, #0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d11c      	bne.n	8002152 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002118:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800211a:	2b00      	cmp	r3, #0
 800211c:	d010      	beq.n	8002140 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d107      	bne.n	800213a <HAL_ADC_Init+0x202>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b01      	cmp	r3, #1
 8002134:	d101      	bne.n	800213a <HAL_ADC_Init+0x202>
 8002136:	2301      	movs	r3, #1
 8002138:	e000      	b.n	800213c <HAL_ADC_Init+0x204>
 800213a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800213c:	2b00      	cmp	r3, #0
 800213e:	d108      	bne.n	8002152 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	431a      	orrs	r2, r3
 800214e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002150:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	7e5b      	ldrb	r3, [r3, #25]
 8002156:	035b      	lsls	r3, r3, #13
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800215c:	2a01      	cmp	r2, #1
 800215e:	d002      	beq.n	8002166 <HAL_ADC_Init+0x22e>
 8002160:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002164:	e000      	b.n	8002168 <HAL_ADC_Init+0x230>
 8002166:	2200      	movs	r2, #0
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68db      	ldr	r3, [r3, #12]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	4313      	orrs	r3, r2
 8002176:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002178:	4313      	orrs	r3, r2
 800217a:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d11b      	bne.n	80021be <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	7e5b      	ldrb	r3, [r3, #25]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002192:	3b01      	subs	r3, #1
 8002194:	045a      	lsls	r2, r3, #17
 8002196:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002198:	4313      	orrs	r3, r2
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	663b      	str	r3, [r7, #96]	@ 0x60
 80021a0:	e00d      	b.n	80021be <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80021aa:	f043 0220 	orr.w	r2, r3, #32
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b6:	f043 0201 	orr.w	r2, r3, #1
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d054      	beq.n	8002270 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a22      	ldr	r2, [pc, #136]	@ (8002254 <HAL_ADC_Init+0x31c>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d004      	beq.n	80021da <HAL_ADC_Init+0x2a2>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a20      	ldr	r2, [pc, #128]	@ (8002258 <HAL_ADC_Init+0x320>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d140      	bne.n	800225c <HAL_ADC_Init+0x324>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021de:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80021e2:	d02a      	beq.n	800223a <HAL_ADC_Init+0x302>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80021ec:	d022      	beq.n	8002234 <HAL_ADC_Init+0x2fc>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80021f6:	d01a      	beq.n	800222e <HAL_ADC_Init+0x2f6>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021fc:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8002200:	d012      	beq.n	8002228 <HAL_ADC_Init+0x2f0>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002206:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800220a:	d00a      	beq.n	8002222 <HAL_ADC_Init+0x2ea>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8002214:	d002      	beq.n	800221c <HAL_ADC_Init+0x2e4>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800221a:	e023      	b.n	8002264 <HAL_ADC_Init+0x32c>
 800221c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002220:	e020      	b.n	8002264 <HAL_ADC_Init+0x32c>
 8002222:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8002226:	e01d      	b.n	8002264 <HAL_ADC_Init+0x32c>
 8002228:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800222c:	e01a      	b.n	8002264 <HAL_ADC_Init+0x32c>
 800222e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002232:	e017      	b.n	8002264 <HAL_ADC_Init+0x32c>
 8002234:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8002238:	e014      	b.n	8002264 <HAL_ADC_Init+0x32c>
 800223a:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 800223e:	e011      	b.n	8002264 <HAL_ADC_Init+0x32c>
 8002240:	20000020 	.word	0x20000020
 8002244:	431bde83 	.word	0x431bde83
 8002248:	50000100 	.word	0x50000100
 800224c:	50000300 	.word	0x50000300
 8002250:	50000700 	.word	0x50000700
 8002254:	50000400 	.word	0x50000400
 8002258:	50000500 	.word	0x50000500
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002260:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002268:	4313      	orrs	r3, r2
 800226a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800226c:	4313      	orrs	r3, r2
 800226e:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b00      	cmp	r3, #0
 800227c:	d114      	bne.n	80022a8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6812      	ldr	r2, [r2, #0]
 8002288:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800228c:	f023 0302 	bic.w	r3, r3, #2
 8002290:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	7e1b      	ldrb	r3, [r3, #24]
 8002296:	039a      	lsls	r2, r3, #14
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	4313      	orrs	r3, r2
 80022a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80022a4:	4313      	orrs	r3, r2
 80022a6:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	68da      	ldr	r2, [r3, #12]
 80022ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002328 <HAL_ADC_Init+0x3f0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6812      	ldr	r2, [r2, #0]
 80022b6:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80022b8:	430b      	orrs	r3, r1
 80022ba:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691b      	ldr	r3, [r3, #16]
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d10c      	bne.n	80022de <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	f023 010f 	bic.w	r1, r3, #15
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	1e5a      	subs	r2, r3, #1
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	631a      	str	r2, [r3, #48]	@ 0x30
 80022dc:	e007      	b.n	80022ee <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f022 020f 	bic.w	r2, r2, #15
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2200      	movs	r2, #0
 80022f2:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f8:	f023 0303 	bic.w	r3, r3, #3
 80022fc:	f043 0201 	orr.w	r2, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	@ 0x40
 8002304:	e00a      	b.n	800231c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f023 0312 	bic.w	r3, r3, #18
 800230e:	f043 0210 	orr.w	r2, r3, #16
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8002316:	2301      	movs	r3, #1
 8002318:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 800231c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002320:	4618      	mov	r0, r3
 8002322:	3768      	adds	r7, #104	@ 0x68
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	fff0c007 	.word	0xfff0c007

0800232c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b086      	sub	sp, #24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f003 0304 	and.w	r3, r3, #4
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 80f7 	bne.w	800253a <HAL_ADC_Start_DMA+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_ADC_Start_DMA+0x2e>
 8002356:	2302      	movs	r3, #2
 8002358:	e0f2      	b.n	8002540 <HAL_ADC_Start_DMA+0x214>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2201      	movs	r2, #1
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Verification if multimode is disabled (for devices with several ADC)   */
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800236a:	d004      	beq.n	8002376 <HAL_ADC_Start_DMA+0x4a>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a75      	ldr	r2, [pc, #468]	@ (8002548 <HAL_ADC_Start_DMA+0x21c>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d109      	bne.n	800238a <HAL_ADC_Start_DMA+0x5e>
 8002376:	4b75      	ldr	r3, [pc, #468]	@ (800254c <HAL_ADC_Start_DMA+0x220>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 031f 	and.w	r3, r3, #31
 800237e:	2b00      	cmp	r3, #0
 8002380:	bf0c      	ite	eq
 8002382:	2301      	moveq	r3, #1
 8002384:	2300      	movne	r3, #0
 8002386:	b2db      	uxtb	r3, r3
 8002388:	e008      	b.n	800239c <HAL_ADC_Start_DMA+0x70>
 800238a:	4b71      	ldr	r3, [pc, #452]	@ (8002550 <HAL_ADC_Start_DMA+0x224>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2b00      	cmp	r3, #0
 8002394:	bf0c      	ite	eq
 8002396:	2301      	moveq	r3, #1
 8002398:	2300      	movne	r3, #0
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80c5 	beq.w	800252c <HAL_ADC_Start_DMA+0x200>
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80023a2:	68f8      	ldr	r0, [r7, #12]
 80023a4:	f000 fc2e 	bl	8002c04 <ADC_Enable>
 80023a8:	4603      	mov	r3, r0
 80023aa:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80023ac:	7dfb      	ldrb	r3, [r7, #23]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f040 80b7 	bne.w	8002522 <HAL_ADC_Start_DMA+0x1f6>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_REG_BUSY);
        
        /* Set group injected state (from auto-injection) and multimode state */
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023d0:	d004      	beq.n	80023dc <HAL_ADC_Start_DMA+0xb0>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002548 <HAL_ADC_Start_DMA+0x21c>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d106      	bne.n	80023ea <HAL_ADC_Start_DMA+0xbe>
 80023dc:	4b5b      	ldr	r3, [pc, #364]	@ (800254c <HAL_ADC_Start_DMA+0x220>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 031f 	and.w	r3, r3, #31
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d010      	beq.n	800240a <HAL_ADC_Start_DMA+0xde>
 80023e8:	e005      	b.n	80023f6 <HAL_ADC_Start_DMA+0xca>
 80023ea:	4b59      	ldr	r3, [pc, #356]	@ (8002550 <HAL_ADC_Start_DMA+0x224>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 031f 	and.w	r3, r3, #31
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d009      	beq.n	800240a <HAL_ADC_Start_DMA+0xde>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023fe:	d004      	beq.n	800240a <HAL_ADC_Start_DMA+0xde>
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a53      	ldr	r2, [pc, #332]	@ (8002554 <HAL_ADC_Start_DMA+0x228>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d115      	bne.n	8002436 <HAL_ADC_Start_DMA+0x10a>
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d036      	beq.n	8002492 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002428:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800242c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	641a      	str	r2, [r3, #64]	@ 0x40
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002434:	e02d      	b.n	8002492 <HAL_ADC_Start_DMA+0x166>
          }
        }
        else
        {
          /* Set ADC state (ADC slave) */
          SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800244a:	d004      	beq.n	8002456 <HAL_ADC_Start_DMA+0x12a>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a3d      	ldr	r2, [pc, #244]	@ (8002548 <HAL_ADC_Start_DMA+0x21c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d10a      	bne.n	800246c <HAL_ADC_Start_DMA+0x140>
 8002456:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	e008      	b.n	800247e <HAL_ADC_Start_DMA+0x152>
 800246c:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <HAL_ADC_Start_DMA+0x228>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002474:	2b00      	cmp	r3, #0
 8002476:	bf14      	ite	ne
 8002478:	2301      	movne	r3, #1
 800247a:	2300      	moveq	r3, #0
 800247c:	b2db      	uxtb	r3, r3
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_ADC_Start_DMA+0x166>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002486:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800248a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	641a      	str	r2, [r3, #64]	@ 0x40
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800249a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800249e:	d106      	bne.n	80024ae <HAL_ADC_Start_DMA+0x182>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024a4:	f023 0206 	bic.w	r2, r3, #6
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_Start_DMA+0x188>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	645a      	str	r2, [r3, #68]	@ 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2200      	movs	r2, #0
 80024b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c0:	4a25      	ldr	r2, [pc, #148]	@ (8002558 <HAL_ADC_Start_DMA+0x22c>)
 80024c2:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c8:	4a24      	ldr	r2, [pc, #144]	@ (800255c <HAL_ADC_Start_DMA+0x230>)
 80024ca:	62da      	str	r2, [r3, #44]	@ 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d0:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <HAL_ADC_Start_DMA+0x234>)
 80024d2:	631a      	str	r2, [r3, #48]	@ 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	221c      	movs	r2, #28
 80024da:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685a      	ldr	r2, [r3, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0210 	orr.w	r2, r2, #16
 80024ea:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f042 0201 	orr.w	r2, r2, #1
 80024fa:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	3340      	adds	r3, #64	@ 0x40
 8002506:	4619      	mov	r1, r3
 8002508:	68ba      	ldr	r2, [r7, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f000 fd9c 	bl	8003048 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f042 0204 	orr.w	r2, r2, #4
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	e00d      	b.n	800253e <HAL_ADC_Start_DMA+0x212>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800252a:	e008      	b.n	800253e <HAL_ADC_Start_DMA+0x212>
      }
    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	75fb      	strb	r3, [r7, #23]
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8002538:	e001      	b.n	800253e <HAL_ADC_Start_DMA+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800253a:	2302      	movs	r3, #2
 800253c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800253e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	50000100 	.word	0x50000100
 800254c:	50000300 	.word	0x50000300
 8002550:	50000700 	.word	0x50000700
 8002554:	50000400 	.word	0x50000400
 8002558:	08002b39 	.word	0x08002b39
 800255c:	08002bb3 	.word	0x08002bb3
 8002560:	08002bcf 	.word	0x08002bcf

08002564 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002564:	b480      	push	{r7}
 8002566:	b09b      	sub	sp, #108	@ 0x6c
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002574:	2300      	movs	r3, #0
 8002576:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x22>
 8002582:	2302      	movs	r3, #2
 8002584:	e2c8      	b.n	8002b18 <HAL_ADC_ConfigChannel+0x5b4>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	f040 82ac 	bne.w	8002af6 <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d81c      	bhi.n	80025e0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	005b      	lsls	r3, r3, #1
 80025b4:	4413      	add	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	461a      	mov	r2, r3
 80025ba:	231f      	movs	r3, #31
 80025bc:	4093      	lsls	r3, r2
 80025be:	43db      	mvns	r3, r3
 80025c0:	4019      	ands	r1, r3
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	6818      	ldr	r0, [r3, #0]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	631a      	str	r2, [r3, #48]	@ 0x30
 80025de:	e063      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	2b09      	cmp	r3, #9
 80025e6:	d81e      	bhi.n	8002626 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	4613      	mov	r3, r2
 80025f4:	005b      	lsls	r3, r3, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	3b1e      	subs	r3, #30
 80025fc:	221f      	movs	r2, #31
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	43db      	mvns	r3, r3
 8002604:	4019      	ands	r1, r3
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	6818      	ldr	r0, [r3, #0]
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685a      	ldr	r2, [r3, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	4413      	add	r3, r2
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	3b1e      	subs	r3, #30
 8002618:	fa00 f203 	lsl.w	r2, r0, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	430a      	orrs	r2, r1
 8002622:	635a      	str	r2, [r3, #52]	@ 0x34
 8002624:	e040      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b0e      	cmp	r3, #14
 800262c:	d81e      	bhi.n	800266c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685a      	ldr	r2, [r3, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4413      	add	r3, r2
 800263e:	005b      	lsls	r3, r3, #1
 8002640:	3b3c      	subs	r3, #60	@ 0x3c
 8002642:	221f      	movs	r2, #31
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	4019      	ands	r1, r3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	005b      	lsls	r3, r3, #1
 8002658:	4413      	add	r3, r2
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	3b3c      	subs	r3, #60	@ 0x3c
 800265e:	fa00 f203 	lsl.w	r2, r0, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	430a      	orrs	r2, r1
 8002668:	639a      	str	r2, [r3, #56]	@ 0x38
 800266a:	e01d      	b.n	80026a8 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	3b5a      	subs	r3, #90	@ 0x5a
 8002680:	221f      	movs	r2, #31
 8002682:	fa02 f303 	lsl.w	r3, r2, r3
 8002686:	43db      	mvns	r3, r3
 8002688:	4019      	ands	r1, r3
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	005b      	lsls	r3, r3, #1
 800269a:	3b5a      	subs	r3, #90	@ 0x5a
 800269c:	fa00 f203 	lsl.w	r2, r0, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 80e5 	bne.w	8002882 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b09      	cmp	r3, #9
 80026be:	d91c      	bls.n	80026fa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6999      	ldr	r1, [r3, #24]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4613      	mov	r3, r2
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	4413      	add	r3, r2
 80026d0:	3b1e      	subs	r3, #30
 80026d2:	2207      	movs	r2, #7
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	4019      	ands	r1, r3
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6898      	ldr	r0, [r3, #8]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4613      	mov	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	4413      	add	r3, r2
 80026ea:	3b1e      	subs	r3, #30
 80026ec:	fa00 f203 	lsl.w	r2, r0, r3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	430a      	orrs	r2, r1
 80026f6:	619a      	str	r2, [r3, #24]
 80026f8:	e019      	b.n	800272e <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	6959      	ldr	r1, [r3, #20]
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	4613      	mov	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	4413      	add	r3, r2
 800270a:	2207      	movs	r2, #7
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	4019      	ands	r1, r3
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6898      	ldr	r0, [r3, #8]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	4613      	mov	r3, r2
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	4413      	add	r3, r2
 8002722:	fa00 f203 	lsl.w	r2, r0, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	08db      	lsrs	r3, r3, #3
 800273a:	f003 0303 	and.w	r3, r3, #3
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	691b      	ldr	r3, [r3, #16]
 800274a:	3b01      	subs	r3, #1
 800274c:	2b03      	cmp	r3, #3
 800274e:	d84f      	bhi.n	80027f0 <HAL_ADC_ConfigChannel+0x28c>
 8002750:	a201      	add	r2, pc, #4	@ (adr r2, 8002758 <HAL_ADC_ConfigChannel+0x1f4>)
 8002752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002756:	bf00      	nop
 8002758:	08002769 	.word	0x08002769
 800275c:	0800278b 	.word	0x0800278b
 8002760:	080027ad 	.word	0x080027ad
 8002764:	080027cf 	.word	0x080027cf
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800276e:	4b99      	ldr	r3, [pc, #612]	@ (80029d4 <HAL_ADC_ConfigChannel+0x470>)
 8002770:	4013      	ands	r3, r2
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	6812      	ldr	r2, [r2, #0]
 8002776:	0691      	lsls	r1, r2, #26
 8002778:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800277a:	430a      	orrs	r2, r1
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002786:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002788:	e07b      	b.n	8002882 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002790:	4b90      	ldr	r3, [pc, #576]	@ (80029d4 <HAL_ADC_ConfigChannel+0x470>)
 8002792:	4013      	ands	r3, r2
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	0691      	lsls	r1, r2, #26
 800279a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800279c:	430a      	orrs	r2, r1
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027a8:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027aa:	e06a      	b.n	8002882 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80027b2:	4b88      	ldr	r3, [pc, #544]	@ (80029d4 <HAL_ADC_ConfigChannel+0x470>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	683a      	ldr	r2, [r7, #0]
 80027b8:	6812      	ldr	r2, [r2, #0]
 80027ba:	0691      	lsls	r1, r2, #26
 80027bc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027be:	430a      	orrs	r2, r1
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027ca:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027cc:	e059      	b.n	8002882 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80027d4:	4b7f      	ldr	r3, [pc, #508]	@ (80029d4 <HAL_ADC_ConfigChannel+0x470>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	683a      	ldr	r2, [r7, #0]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	0691      	lsls	r1, r2, #26
 80027de:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80027e0:	430a      	orrs	r2, r1
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80027ec:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80027ee:	e048      	b.n	8002882 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027f6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	069b      	lsls	r3, r3, #26
 8002800:	429a      	cmp	r2, r3
 8002802:	d107      	bne.n	8002814 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002812:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800281a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	069b      	lsls	r3, r3, #26
 8002824:	429a      	cmp	r2, r3
 8002826:	d107      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002836:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800283e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	069b      	lsls	r3, r3, #26
 8002848:	429a      	cmp	r2, r3
 800284a:	d107      	bne.n	800285c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800285a:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002862:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	069b      	lsls	r3, r3, #26
 800286c:	429a      	cmp	r2, r3
 800286e:	d107      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800287e:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002880:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x33e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x33e>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x340>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f040 8131 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d00f      	beq.n	80028d2 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	2201      	movs	r2, #1
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	43da      	mvns	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	400a      	ands	r2, r1
 80028cc:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 80028d0:	e049      	b.n	8002966 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	409a      	lsls	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	430a      	orrs	r2, r1
 80028e8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2b09      	cmp	r3, #9
 80028f2:	d91c      	bls.n	800292e <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	6999      	ldr	r1, [r3, #24]
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	3b1b      	subs	r3, #27
 8002906:	2207      	movs	r2, #7
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	4019      	ands	r1, r3
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	6898      	ldr	r0, [r3, #8]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	4413      	add	r3, r2
 800291e:	3b1b      	subs	r3, #27
 8002920:	fa00 f203 	lsl.w	r2, r0, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	430a      	orrs	r2, r1
 800292a:	619a      	str	r2, [r3, #24]
 800292c:	e01b      	b.n	8002966 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6959      	ldr	r1, [r3, #20]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	4613      	mov	r3, r2
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	4413      	add	r3, r2
 8002940:	2207      	movs	r2, #7
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	43db      	mvns	r3, r3
 8002948:	4019      	ands	r1, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	6898      	ldr	r0, [r3, #8]
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	4613      	mov	r3, r2
 8002956:	005b      	lsls	r3, r3, #1
 8002958:	4413      	add	r3, r2
 800295a:	fa00 f203 	lsl.w	r2, r0, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	430a      	orrs	r2, r1
 8002964:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800296e:	d004      	beq.n	800297a <HAL_ADC_ConfigChannel+0x416>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a18      	ldr	r2, [pc, #96]	@ (80029d8 <HAL_ADC_ConfigChannel+0x474>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d101      	bne.n	800297e <HAL_ADC_ConfigChannel+0x41a>
 800297a:	4b18      	ldr	r3, [pc, #96]	@ (80029dc <HAL_ADC_ConfigChannel+0x478>)
 800297c:	e000      	b.n	8002980 <HAL_ADC_ConfigChannel+0x41c>
 800297e:	4b18      	ldr	r3, [pc, #96]	@ (80029e0 <HAL_ADC_ConfigChannel+0x47c>)
 8002980:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b10      	cmp	r3, #16
 8002988:	d105      	bne.n	8002996 <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800298a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002992:	2b00      	cmp	r3, #0
 8002994:	d015      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800299a:	2b11      	cmp	r3, #17
 800299c:	d105      	bne.n	80029aa <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800299e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00b      	beq.n	80029c2 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80029ae:	2b12      	cmp	r3, #18
 80029b0:	f040 80ac 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80029b4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f040 80a5 	bne.w	8002b0c <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80029ca:	d10b      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x480>
 80029cc:	4b02      	ldr	r3, [pc, #8]	@ (80029d8 <HAL_ADC_ConfigChannel+0x474>)
 80029ce:	60fb      	str	r3, [r7, #12]
 80029d0:	e023      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x4b6>
 80029d2:	bf00      	nop
 80029d4:	83fff000 	.word	0x83fff000
 80029d8:	50000100 	.word	0x50000100
 80029dc:	50000300 	.word	0x50000300
 80029e0:	50000700 	.word	0x50000700
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a4e      	ldr	r2, [pc, #312]	@ (8002b24 <HAL_ADC_ConfigChannel+0x5c0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d103      	bne.n	80029f6 <HAL_ADC_ConfigChannel+0x492>
 80029ee:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e011      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x4b6>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a4b      	ldr	r2, [pc, #300]	@ (8002b28 <HAL_ADC_ConfigChannel+0x5c4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d102      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x4a2>
 8002a00:	4b4a      	ldr	r3, [pc, #296]	@ (8002b2c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	e009      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x4b6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a48      	ldr	r2, [pc, #288]	@ (8002b2c <HAL_ADC_ConfigChannel+0x5c8>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d102      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x4b2>
 8002a10:	4b45      	ldr	r3, [pc, #276]	@ (8002b28 <HAL_ADC_ConfigChannel+0x5c4>)
 8002a12:	60fb      	str	r3, [r7, #12]
 8002a14:	e001      	b.n	8002a1a <HAL_ADC_ConfigChannel+0x4b6>
 8002a16:	2300      	movs	r3, #0
 8002a18:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 0303 	and.w	r3, r3, #3
 8002a24:	2b01      	cmp	r3, #1
 8002a26:	d108      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x4d6>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d101      	bne.n	8002a3a <HAL_ADC_ConfigChannel+0x4d6>
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x4d8>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d150      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d010      	beq.n	8002a68 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x4fe>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_ADC_ConfigChannel+0x4fe>
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e000      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x500>
 8002a62:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d13c      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	2b10      	cmp	r3, #16
 8002a6e:	d11d      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x548>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002a78:	d118      	bne.n	8002aac <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002a7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002a82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a84:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a86:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_ADC_ConfigChannel+0x5cc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a2a      	ldr	r2, [pc, #168]	@ (8002b34 <HAL_ADC_ConfigChannel+0x5d0>)
 8002a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a90:	0c9a      	lsrs	r2, r3, #18
 8002a92:	4613      	mov	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4413      	add	r3, r2
 8002a98:	005b      	lsls	r3, r3, #1
 8002a9a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a9c:	e002      	b.n	8002aa4 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d1f9      	bne.n	8002a9e <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002aaa:	e02e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b11      	cmp	r3, #17
 8002ab2:	d10b      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x568>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002abc:	d106      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002abe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8002ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ac8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002aca:	e01e      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	2b12      	cmp	r3, #18
 8002ad2:	d11a      	bne.n	8002b0a <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002ad4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002adc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002ade:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002ae0:	e013      	b.n	8002b0a <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002af4:	e00a      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002b08:	e000      	b.n	8002b0c <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002b0a:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b14:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	376c      	adds	r7, #108	@ 0x6c
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	50000100 	.word	0x50000100
 8002b28:	50000400 	.word	0x50000400
 8002b2c:	50000500 	.word	0x50000500
 8002b30:	20000020 	.word	0x20000020
 8002b34:	431bde83 	.word	0x431bde83

08002b38 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b44:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d126      	bne.n	8002ba0 <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d115      	bne.n	8002b98 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d111      	bne.n	8002b98 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b78:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d105      	bne.n	8002b98 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f7ff f9af 	bl	8001efc <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8002b9e:	e004      	b.n	8002baa <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	4798      	blx	r3
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7ff f9a5 	bl	8001f10 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bda:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bec:	f043 0204 	orr.w	r2, r3, #4
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f7ff f995 	bl	8001f24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 0303 	and.w	r3, r3, #3
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d108      	bne.n	8002c30 <ADC_Enable+0x2c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d101      	bne.n	8002c30 <ADC_Enable+0x2c>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <ADC_Enable+0x2e>
 8002c30:	2300      	movs	r3, #0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d143      	bne.n	8002cbe <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	4b22      	ldr	r3, [pc, #136]	@ (8002cc8 <ADC_Enable+0xc4>)
 8002c3e:	4013      	ands	r3, r2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00d      	beq.n	8002c60 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c48:	f043 0210 	orr.w	r2, r3, #16
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	f043 0201 	orr.w	r2, r3, #1
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e02f      	b.n	8002cc0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002c70:	f7ff f938 	bl	8001ee4 <HAL_GetTick>
 8002c74:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c76:	e01b      	b.n	8002cb0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c78:	f7ff f934 	bl	8001ee4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d914      	bls.n	8002cb0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d00d      	beq.n	8002cb0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c98:	f043 0210 	orr.w	r2, r3, #16
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca4:	f043 0201 	orr.w	r2, r3, #1
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e007      	b.n	8002cc0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d1dc      	bne.n	8002c78 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002cbe:	2300      	movs	r3, #0
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3710      	adds	r7, #16
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	8000003f 	.word	0x8000003f

08002ccc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d108      	bne.n	8002cf8 <ADC_Disable+0x2c>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d101      	bne.n	8002cf8 <ADC_Disable+0x2c>
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e000      	b.n	8002cfa <ADC_Disable+0x2e>
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d047      	beq.n	8002d8e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030d 	and.w	r3, r3, #13
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d10f      	bne.n	8002d2c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	689a      	ldr	r2, [r3, #8]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f042 0202 	orr.w	r2, r2, #2
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	2203      	movs	r2, #3
 8002d22:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d24:	f7ff f8de 	bl	8001ee4 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d2a:	e029      	b.n	8002d80 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d30:	f043 0210 	orr.w	r2, r3, #16
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e023      	b.n	8002d90 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d48:	f7ff f8cc 	bl	8001ee4 <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d914      	bls.n	8002d80 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d10d      	bne.n	8002d80 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	f043 0210 	orr.w	r2, r3, #16
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e007      	b.n	8002d90 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	f003 0301 	and.w	r3, r3, #1
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d0dc      	beq.n	8002d48 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b085      	sub	sp, #20
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f003 0307 	and.w	r3, r3, #7
 8002da6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da8:	4b0c      	ldr	r3, [pc, #48]	@ (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dae:	68ba      	ldr	r2, [r7, #8]
 8002db0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dca:	4a04      	ldr	r2, [pc, #16]	@ (8002ddc <__NVIC_SetPriorityGrouping+0x44>)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	60d3      	str	r3, [r2, #12]
}
 8002dd0:	bf00      	nop
 8002dd2:	3714      	adds	r7, #20
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr
 8002ddc:	e000ed00 	.word	0xe000ed00

08002de0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de4:	4b04      	ldr	r3, [pc, #16]	@ (8002df8 <__NVIC_GetPriorityGrouping+0x18>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	0a1b      	lsrs	r3, r3, #8
 8002dea:	f003 0307 	and.w	r3, r3, #7
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr
 8002df8:	e000ed00 	.word	0xe000ed00

08002dfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dfc:	b480      	push	{r7}
 8002dfe:	b083      	sub	sp, #12
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	4603      	mov	r3, r0
 8002e04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	db0b      	blt.n	8002e26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0e:	79fb      	ldrb	r3, [r7, #7]
 8002e10:	f003 021f 	and.w	r2, r3, #31
 8002e14:	4907      	ldr	r1, [pc, #28]	@ (8002e34 <__NVIC_EnableIRQ+0x38>)
 8002e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1a:	095b      	lsrs	r3, r3, #5
 8002e1c:	2001      	movs	r0, #1
 8002e1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e100 	.word	0xe000e100

08002e38 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	6039      	str	r1, [r7, #0]
 8002e42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	db0a      	blt.n	8002e62 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	490c      	ldr	r1, [pc, #48]	@ (8002e84 <__NVIC_SetPriority+0x4c>)
 8002e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e56:	0112      	lsls	r2, r2, #4
 8002e58:	b2d2      	uxtb	r2, r2
 8002e5a:	440b      	add	r3, r1
 8002e5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e60:	e00a      	b.n	8002e78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	4908      	ldr	r1, [pc, #32]	@ (8002e88 <__NVIC_SetPriority+0x50>)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	f003 030f 	and.w	r3, r3, #15
 8002e6e:	3b04      	subs	r3, #4
 8002e70:	0112      	lsls	r2, r2, #4
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	440b      	add	r3, r1
 8002e76:	761a      	strb	r2, [r3, #24]
}
 8002e78:	bf00      	nop
 8002e7a:	370c      	adds	r7, #12
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	e000e100 	.word	0xe000e100
 8002e88:	e000ed00 	.word	0xe000ed00

08002e8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b089      	sub	sp, #36	@ 0x24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f003 0307 	and.w	r3, r3, #7
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	f1c3 0307 	rsb	r3, r3, #7
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	bf28      	it	cs
 8002eaa:	2304      	movcs	r3, #4
 8002eac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3304      	adds	r3, #4
 8002eb2:	2b06      	cmp	r3, #6
 8002eb4:	d902      	bls.n	8002ebc <NVIC_EncodePriority+0x30>
 8002eb6:	69fb      	ldr	r3, [r7, #28]
 8002eb8:	3b03      	subs	r3, #3
 8002eba:	e000      	b.n	8002ebe <NVIC_EncodePriority+0x32>
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	401a      	ands	r2, r3
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ed4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	fa01 f303 	lsl.w	r3, r1, r3
 8002ede:	43d9      	mvns	r1, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ee4:	4313      	orrs	r3, r2
         );
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3724      	adds	r7, #36	@ 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
	...

08002ef4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f04:	d301      	bcc.n	8002f0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f06:	2301      	movs	r3, #1
 8002f08:	e00f      	b.n	8002f2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8002f34 <SysTick_Config+0x40>)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f12:	210f      	movs	r1, #15
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	f7ff ff8e 	bl	8002e38 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f1c:	4b05      	ldr	r3, [pc, #20]	@ (8002f34 <SysTick_Config+0x40>)
 8002f1e:	2200      	movs	r2, #0
 8002f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f22:	4b04      	ldr	r3, [pc, #16]	@ (8002f34 <SysTick_Config+0x40>)
 8002f24:	2207      	movs	r2, #7
 8002f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	e000e010 	.word	0xe000e010

08002f38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff ff29 	bl	8002d98 <__NVIC_SetPriorityGrouping>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b086      	sub	sp, #24
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	4603      	mov	r3, r0
 8002f56:	60b9      	str	r1, [r7, #8]
 8002f58:	607a      	str	r2, [r7, #4]
 8002f5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f60:	f7ff ff3e 	bl	8002de0 <__NVIC_GetPriorityGrouping>
 8002f64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	6978      	ldr	r0, [r7, #20]
 8002f6c:	f7ff ff8e 	bl	8002e8c <NVIC_EncodePriority>
 8002f70:	4602      	mov	r2, r0
 8002f72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f76:	4611      	mov	r1, r2
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f7ff ff5d 	bl	8002e38 <__NVIC_SetPriority>
}
 8002f7e:	bf00      	nop
 8002f80:	3718      	adds	r7, #24
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}

08002f86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f86:	b580      	push	{r7, lr}
 8002f88:	b082      	sub	sp, #8
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f94:	4618      	mov	r0, r3
 8002f96:	f7ff ff31 	bl	8002dfc <__NVIC_EnableIRQ>
}
 8002f9a:	bf00      	nop
 8002f9c:	3708      	adds	r7, #8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b082      	sub	sp, #8
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7ff ffa2 	bl	8002ef4 <SysTick_Config>
 8002fb0:	4603      	mov	r3, r0
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002fba:	b580      	push	{r7, lr}
 8002fbc:	b084      	sub	sp, #16
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d101      	bne.n	8002fd0 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e037      	b.n	8003040 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002fe6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8002fea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002ff4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003000:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	695b      	ldr	r3, [r3, #20]
 8003006:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800300c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	4313      	orrs	r3, r2
 8003018:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 f940 	bl	80032a8 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800303e:	2300      	movs	r3, #0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af00      	add	r7, sp, #0
 800304e:	60f8      	str	r0, [r7, #12]
 8003050:	60b9      	str	r1, [r7, #8]
 8003052:	607a      	str	r2, [r7, #4]
 8003054:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003056:	2300      	movs	r3, #0
 8003058:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003060:	2b01      	cmp	r3, #1
 8003062:	d101      	bne.n	8003068 <HAL_DMA_Start_IT+0x20>
 8003064:	2302      	movs	r3, #2
 8003066:	e04a      	b.n	80030fe <HAL_DMA_Start_IT+0xb6>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2201      	movs	r2, #1
 800306c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003076:	2b01      	cmp	r3, #1
 8003078:	d13a      	bne.n	80030f0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2200      	movs	r2, #0
 8003086:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f022 0201 	bic.w	r2, r2, #1
 8003096:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 f8d4 	bl	800324c <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d008      	beq.n	80030be <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 020e 	orr.w	r2, r2, #14
 80030ba:	601a      	str	r2, [r3, #0]
 80030bc:	e00f      	b.n	80030de <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f042 020a 	orr.w	r2, r2, #10
 80030cc:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0204 	bic.w	r2, r2, #4
 80030dc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	e005      	b.n	80030fc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003122:	2204      	movs	r2, #4
 8003124:	409a      	lsls	r2, r3
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4013      	ands	r3, r2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d024      	beq.n	8003178 <HAL_DMA_IRQHandler+0x72>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f003 0304 	and.w	r3, r3, #4
 8003134:	2b00      	cmp	r3, #0
 8003136:	d01f      	beq.n	8003178 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0320 	and.w	r3, r3, #32
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 0204 	bic.w	r2, r2, #4
 8003154:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800315e:	2104      	movs	r1, #4
 8003160:	fa01 f202 	lsl.w	r2, r1, r2
 8003164:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d06a      	beq.n	8003244 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003176:	e065      	b.n	8003244 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317c:	2202      	movs	r2, #2
 800317e:	409a      	lsls	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4013      	ands	r3, r2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02c      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdc>
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d027      	beq.n	80031e2 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0320 	and.w	r3, r3, #32
 800319c:	2b00      	cmp	r3, #0
 800319e:	d10b      	bne.n	80031b8 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 020a 	bic.w	r2, r2, #10
 80031ae:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031c0:	2102      	movs	r1, #2
 80031c2:	fa01 f202 	lsl.w	r2, r1, r2
 80031c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d035      	beq.n	8003244 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80031e0:	e030      	b.n	8003244 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e6:	2208      	movs	r2, #8
 80031e8:	409a      	lsls	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	4013      	ands	r3, r2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d028      	beq.n	8003244 <HAL_DMA_IRQHandler+0x13e>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d023      	beq.n	8003244 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f022 020e 	bic.w	r2, r2, #14
 800320a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003214:	2101      	movs	r1, #1
 8003216:	fa01 f202 	lsl.w	r2, r1, r2
 800321a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	2b00      	cmp	r3, #0
 8003238:	d004      	beq.n	8003244 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	4798      	blx	r3
    }
  }
}
 8003242:	e7ff      	b.n	8003244 <HAL_DMA_IRQHandler+0x13e>
 8003244:	bf00      	nop
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800324c:	b480      	push	{r7}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
 8003258:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003262:	2101      	movs	r1, #1
 8003264:	fa01 f202 	lsl.w	r2, r1, r2
 8003268:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	683a      	ldr	r2, [r7, #0]
 8003270:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	2b10      	cmp	r3, #16
 8003278:	d108      	bne.n	800328c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800328a:	e007      	b.n	800329c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68ba      	ldr	r2, [r7, #8]
 8003292:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	60da      	str	r2, [r3, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr

080032a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	461a      	mov	r2, r3
 80032b6:	4b14      	ldr	r3, [pc, #80]	@ (8003308 <DMA_CalcBaseAndBitshift+0x60>)
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d80f      	bhi.n	80032dc <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b12      	ldr	r3, [pc, #72]	@ (800330c <DMA_CalcBaseAndBitshift+0x64>)
 80032c4:	4413      	add	r3, r2
 80032c6:	4a12      	ldr	r2, [pc, #72]	@ (8003310 <DMA_CalcBaseAndBitshift+0x68>)
 80032c8:	fba2 2303 	umull	r2, r3, r2, r3
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	009a      	lsls	r2, r3, #2
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	4a0f      	ldr	r2, [pc, #60]	@ (8003314 <DMA_CalcBaseAndBitshift+0x6c>)
 80032d8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80032da:	e00e      	b.n	80032fa <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	461a      	mov	r2, r3
 80032e2:	4b0d      	ldr	r3, [pc, #52]	@ (8003318 <DMA_CalcBaseAndBitshift+0x70>)
 80032e4:	4413      	add	r3, r2
 80032e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003310 <DMA_CalcBaseAndBitshift+0x68>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	091b      	lsrs	r3, r3, #4
 80032ee:	009a      	lsls	r2, r3, #2
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	4a09      	ldr	r2, [pc, #36]	@ (800331c <DMA_CalcBaseAndBitshift+0x74>)
 80032f8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40020407 	.word	0x40020407
 800330c:	bffdfff8 	.word	0xbffdfff8
 8003310:	cccccccd 	.word	0xcccccccd
 8003314:	40020000 	.word	0x40020000
 8003318:	bffdfbf8 	.word	0xbffdfbf8
 800331c:	40020400 	.word	0x40020400

08003320 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003320:	b480      	push	{r7}
 8003322:	b087      	sub	sp, #28
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800332a:	2300      	movs	r3, #0
 800332c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800332e:	e160      	b.n	80035f2 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	fa01 f303 	lsl.w	r3, r1, r3
 800333c:	4013      	ands	r3, r2
 800333e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 8152 	beq.w	80035ec <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0303 	and.w	r3, r3, #3
 8003350:	2b01      	cmp	r3, #1
 8003352:	d005      	beq.n	8003360 <HAL_GPIO_Init+0x40>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d130      	bne.n	80033c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	2203      	movs	r2, #3
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	43db      	mvns	r3, r3
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	4013      	ands	r3, r2
 8003376:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	68da      	ldr	r2, [r3, #12]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	693a      	ldr	r2, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	693a      	ldr	r2, [r7, #16]
 800338e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003396:	2201      	movs	r2, #1
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	693a      	ldr	r2, [r7, #16]
 80033a2:	4013      	ands	r3, r2
 80033a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	091b      	lsrs	r3, r3, #4
 80033ac:	f003 0201 	and.w	r2, r3, #1
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	fa02 f303 	lsl.w	r3, r2, r3
 80033b6:	693a      	ldr	r2, [r7, #16]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d017      	beq.n	80033fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	693a      	ldr	r2, [r7, #16]
 80033fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	f003 0303 	and.w	r3, r3, #3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d123      	bne.n	8003452 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	08da      	lsrs	r2, r3, #3
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	3208      	adds	r2, #8
 8003412:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003416:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	220f      	movs	r2, #15
 8003422:	fa02 f303 	lsl.w	r3, r2, r3
 8003426:	43db      	mvns	r3, r3
 8003428:	693a      	ldr	r2, [r7, #16]
 800342a:	4013      	ands	r3, r2
 800342c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	691a      	ldr	r2, [r3, #16]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	fa02 f303 	lsl.w	r3, r2, r3
 800343e:	693a      	ldr	r2, [r7, #16]
 8003440:	4313      	orrs	r3, r2
 8003442:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	08da      	lsrs	r2, r3, #3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	3208      	adds	r2, #8
 800344c:	6939      	ldr	r1, [r7, #16]
 800344e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	693a      	ldr	r2, [r7, #16]
 8003466:	4013      	ands	r3, r2
 8003468:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 0203 	and.w	r2, r3, #3
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	fa02 f303 	lsl.w	r3, r2, r3
 800347a:	693a      	ldr	r2, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800348e:	2b00      	cmp	r3, #0
 8003490:	f000 80ac 	beq.w	80035ec <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003494:	4b5e      	ldr	r3, [pc, #376]	@ (8003610 <HAL_GPIO_Init+0x2f0>)
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	4a5d      	ldr	r2, [pc, #372]	@ (8003610 <HAL_GPIO_Init+0x2f0>)
 800349a:	f043 0301 	orr.w	r3, r3, #1
 800349e:	6193      	str	r3, [r2, #24]
 80034a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003610 <HAL_GPIO_Init+0x2f0>)
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	60bb      	str	r3, [r7, #8]
 80034aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034ac:	4a59      	ldr	r2, [pc, #356]	@ (8003614 <HAL_GPIO_Init+0x2f4>)
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	089b      	lsrs	r3, r3, #2
 80034b2:	3302      	adds	r3, #2
 80034b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	f003 0303 	and.w	r3, r3, #3
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	220f      	movs	r2, #15
 80034c4:	fa02 f303 	lsl.w	r3, r2, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4013      	ands	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80034d6:	d025      	beq.n	8003524 <HAL_GPIO_Init+0x204>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	4a4f      	ldr	r2, [pc, #316]	@ (8003618 <HAL_GPIO_Init+0x2f8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d01f      	beq.n	8003520 <HAL_GPIO_Init+0x200>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a4e      	ldr	r2, [pc, #312]	@ (800361c <HAL_GPIO_Init+0x2fc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d019      	beq.n	800351c <HAL_GPIO_Init+0x1fc>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003620 <HAL_GPIO_Init+0x300>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <HAL_GPIO_Init+0x1f8>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003624 <HAL_GPIO_Init+0x304>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d00d      	beq.n	8003514 <HAL_GPIO_Init+0x1f4>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003628 <HAL_GPIO_Init+0x308>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d007      	beq.n	8003510 <HAL_GPIO_Init+0x1f0>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a4a      	ldr	r2, [pc, #296]	@ (800362c <HAL_GPIO_Init+0x30c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d101      	bne.n	800350c <HAL_GPIO_Init+0x1ec>
 8003508:	2306      	movs	r3, #6
 800350a:	e00c      	b.n	8003526 <HAL_GPIO_Init+0x206>
 800350c:	2307      	movs	r3, #7
 800350e:	e00a      	b.n	8003526 <HAL_GPIO_Init+0x206>
 8003510:	2305      	movs	r3, #5
 8003512:	e008      	b.n	8003526 <HAL_GPIO_Init+0x206>
 8003514:	2304      	movs	r3, #4
 8003516:	e006      	b.n	8003526 <HAL_GPIO_Init+0x206>
 8003518:	2303      	movs	r3, #3
 800351a:	e004      	b.n	8003526 <HAL_GPIO_Init+0x206>
 800351c:	2302      	movs	r3, #2
 800351e:	e002      	b.n	8003526 <HAL_GPIO_Init+0x206>
 8003520:	2301      	movs	r3, #1
 8003522:	e000      	b.n	8003526 <HAL_GPIO_Init+0x206>
 8003524:	2300      	movs	r3, #0
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	f002 0203 	and.w	r2, r2, #3
 800352c:	0092      	lsls	r2, r2, #2
 800352e:	4093      	lsls	r3, r2
 8003530:	693a      	ldr	r2, [r7, #16]
 8003532:	4313      	orrs	r3, r2
 8003534:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003536:	4937      	ldr	r1, [pc, #220]	@ (8003614 <HAL_GPIO_Init+0x2f4>)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	3302      	adds	r3, #2
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003544:	4b3a      	ldr	r3, [pc, #232]	@ (8003630 <HAL_GPIO_Init+0x310>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	43db      	mvns	r3, r3
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	4013      	ands	r3, r2
 8003552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003568:	4a31      	ldr	r2, [pc, #196]	@ (8003630 <HAL_GPIO_Init+0x310>)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800356e:	4b30      	ldr	r3, [pc, #192]	@ (8003630 <HAL_GPIO_Init+0x310>)
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	43db      	mvns	r3, r3
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	4013      	ands	r3, r2
 800357c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003592:	4a27      	ldr	r2, [pc, #156]	@ (8003630 <HAL_GPIO_Init+0x310>)
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003598:	4b25      	ldr	r3, [pc, #148]	@ (8003630 <HAL_GPIO_Init+0x310>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	43db      	mvns	r3, r3
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4013      	ands	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80035bc:	4a1c      	ldr	r2, [pc, #112]	@ (8003630 <HAL_GPIO_Init+0x310>)
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003630 <HAL_GPIO_Init+0x310>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	43db      	mvns	r3, r3
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d003      	beq.n	80035e6 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80035e6:	4a12      	ldr	r2, [pc, #72]	@ (8003630 <HAL_GPIO_Init+0x310>)
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	3301      	adds	r3, #1
 80035f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	681a      	ldr	r2, [r3, #0]
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	fa22 f303 	lsr.w	r3, r2, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f47f ae97 	bne.w	8003330 <HAL_GPIO_Init+0x10>
  }
}
 8003602:	bf00      	nop
 8003604:	bf00      	nop
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr
 8003610:	40021000 	.word	0x40021000
 8003614:	40010000 	.word	0x40010000
 8003618:	48000400 	.word	0x48000400
 800361c:	48000800 	.word	0x48000800
 8003620:	48000c00 	.word	0x48000c00
 8003624:	48001000 	.word	0x48001000
 8003628:	48001400 	.word	0x48001400
 800362c:	48001800 	.word	0x48001800
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003650:	e002      	b.n	8003658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	4603      	mov	r3, r0
 800366c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800366e:	4b08      	ldr	r3, [pc, #32]	@ (8003690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003670:	695a      	ldr	r2, [r3, #20]
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	4013      	ands	r3, r2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d006      	beq.n	8003688 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800367a:	4a05      	ldr	r2, [pc, #20]	@ (8003690 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003680:	88fb      	ldrh	r3, [r7, #6]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fd fab0 	bl	8000be8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003688:	bf00      	nop
 800368a:	3708      	adds	r7, #8
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40010400 	.word	0x40010400

08003694 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d101      	bne.n	80036a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e08d      	b.n	80037c2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fe f8e2 	bl	8001884 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	@ 0x24
 80036c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0201 	bic.w	r2, r2, #1
 80036d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	685a      	ldr	r2, [r3, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80036e4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689a      	ldr	r2, [r3, #8]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036f4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d107      	bne.n	800370e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	e006      	b.n	800371c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800371a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	2b02      	cmp	r3, #2
 8003722:	d108      	bne.n	8003736 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	e007      	b.n	8003746 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003744:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	6812      	ldr	r2, [r2, #0]
 8003750:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003754:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003758:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68da      	ldr	r2, [r3, #12]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003768:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691a      	ldr	r2, [r3, #16]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	695b      	ldr	r3, [r3, #20]
 8003772:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69d9      	ldr	r1, [r3, #28]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a1a      	ldr	r2, [r3, #32]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2220      	movs	r2, #32
 80037ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}

080037ca <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037ca:	b480      	push	{r7}
 80037cc:	b083      	sub	sp, #12
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d138      	bne.n	8003852 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e032      	b.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2224      	movs	r2, #36	@ 0x24
 80037fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 0201 	bic.w	r2, r2, #1
 800380c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800381c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6819      	ldr	r1, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2220      	movs	r2, #32
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b20      	cmp	r3, #32
 8003874:	d139      	bne.n	80038ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800387c:	2b01      	cmp	r3, #1
 800387e:	d101      	bne.n	8003884 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003880:	2302      	movs	r3, #2
 8003882:	e033      	b.n	80038ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2201      	movs	r2, #1
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2224      	movs	r2, #36	@ 0x24
 8003890:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0201 	bic.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f042 0201 	orr.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2220      	movs	r2, #32
 80038da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	e000      	b.n	80038ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80038ea:	2302      	movs	r3, #2
  }
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80038fe:	af00      	add	r7, sp, #0
 8003900:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003904:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003908:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800390a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800390e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d102      	bne.n	800391e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003918:	2301      	movs	r3, #1
 800391a:	f001 b80a 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003922:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	2b00      	cmp	r3, #0
 8003930:	f000 8161 	beq.w	8003bf6 <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003934:	4bae      	ldr	r3, [pc, #696]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f003 030c 	and.w	r3, r3, #12
 800393c:	2b04      	cmp	r3, #4
 800393e:	d00c      	beq.n	800395a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003940:	4bab      	ldr	r3, [pc, #684]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 030c 	and.w	r3, r3, #12
 8003948:	2b08      	cmp	r3, #8
 800394a:	d157      	bne.n	80039fc <HAL_RCC_OscConfig+0x104>
 800394c:	4ba8      	ldr	r3, [pc, #672]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003954:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003958:	d150      	bne.n	80039fc <HAL_RCC_OscConfig+0x104>
 800395a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800395e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003962:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003966:	fa93 f3a3 	rbit	r3, r3
 800396a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800396e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003972:	fab3 f383 	clz	r3, r3
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b3f      	cmp	r3, #63	@ 0x3f
 800397a:	d802      	bhi.n	8003982 <HAL_RCC_OscConfig+0x8a>
 800397c:	4b9c      	ldr	r3, [pc, #624]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	e015      	b.n	80039ae <HAL_RCC_OscConfig+0xb6>
 8003982:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003986:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003996:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800399a:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800399e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80039aa:	4b91      	ldr	r3, [pc, #580]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 80039ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ae:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80039b2:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 80039b6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 80039ba:	fa92 f2a2 	rbit	r2, r2
 80039be:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 80039c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80039c6:	fab2 f282 	clz	r2, r2
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f042 0220 	orr.w	r2, r2, #32
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	f002 021f 	and.w	r2, r2, #31
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8108 	beq.w	8003bf4 <HAL_RCC_OscConfig+0x2fc>
 80039e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f040 80ff 	bne.w	8003bf4 <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f000 bf9b 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a0c:	d106      	bne.n	8003a1c <HAL_RCC_OscConfig+0x124>
 8003a0e:	4b78      	ldr	r3, [pc, #480]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a77      	ldr	r2, [pc, #476]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	e036      	b.n	8003a8a <HAL_RCC_OscConfig+0x192>
 8003a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d10c      	bne.n	8003a46 <HAL_RCC_OscConfig+0x14e>
 8003a2c:	4b70      	ldr	r3, [pc, #448]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a6f      	ldr	r2, [pc, #444]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a6c      	ldr	r2, [pc, #432]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e021      	b.n	8003a8a <HAL_RCC_OscConfig+0x192>
 8003a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a4a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a56:	d10c      	bne.n	8003a72 <HAL_RCC_OscConfig+0x17a>
 8003a58:	4b65      	ldr	r3, [pc, #404]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a64      	ldr	r2, [pc, #400]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a62:	6013      	str	r3, [r2, #0]
 8003a64:	4b62      	ldr	r3, [pc, #392]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a61      	ldr	r2, [pc, #388]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a6e:	6013      	str	r3, [r2, #0]
 8003a70:	e00b      	b.n	8003a8a <HAL_RCC_OscConfig+0x192>
 8003a72:	4b5f      	ldr	r3, [pc, #380]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a5e      	ldr	r2, [pc, #376]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 8003a7e:	4b5c      	ldr	r3, [pc, #368]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a5b      	ldr	r2, [pc, #364]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003a84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a88:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a8a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a8e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d054      	beq.n	8003b44 <HAL_RCC_OscConfig+0x24c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9a:	f7fe fa23 	bl	8001ee4 <HAL_GetTick>
 8003a9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa2:	e00a      	b.n	8003aba <HAL_RCC_OscConfig+0x1c2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa4:	f7fe fa1e 	bl	8001ee4 <HAL_GetTick>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b64      	cmp	r3, #100	@ 0x64
 8003ab2:	d902      	bls.n	8003aba <HAL_RCC_OscConfig+0x1c2>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	f000 bf3c 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
 8003aba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003abe:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003ac6:	fa93 f3a3 	rbit	r3, r3
 8003aca:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003ace:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b3f      	cmp	r3, #63	@ 0x3f
 8003ada:	d802      	bhi.n	8003ae2 <HAL_RCC_OscConfig+0x1ea>
 8003adc:	4b44      	ldr	r3, [pc, #272]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	e015      	b.n	8003b0e <HAL_RCC_OscConfig+0x216>
 8003ae2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ae6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8003af6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003afa:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003afe:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8003b02:	fa93 f3a3 	rbit	r3, r3
 8003b06:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003b0a:	4b39      	ldr	r3, [pc, #228]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b0e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003b12:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8003b16:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8003b1a:	fa92 f2a2 	rbit	r2, r2
 8003b1e:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8003b22:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8003b26:	fab2 f282 	clz	r2, r2
 8003b2a:	b2d2      	uxtb	r2, r2
 8003b2c:	f042 0220 	orr.w	r2, r2, #32
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	f002 021f 	and.w	r2, r2, #31
 8003b36:	2101      	movs	r1, #1
 8003b38:	fa01 f202 	lsl.w	r2, r1, r2
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d0b0      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x1ac>
 8003b42:	e058      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b44:	f7fe f9ce 	bl	8001ee4 <HAL_GetTick>
 8003b48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b4c:	e00a      	b.n	8003b64 <HAL_RCC_OscConfig+0x26c>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b4e:	f7fe f9c9 	bl	8001ee4 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b64      	cmp	r3, #100	@ 0x64
 8003b5c:	d902      	bls.n	8003b64 <HAL_RCC_OscConfig+0x26c>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	f000 bee7 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
 8003b64:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b68:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b6c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8003b70:	fa93 f3a3 	rbit	r3, r3
 8003b74:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003b78:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7c:	fab3 f383 	clz	r3, r3
 8003b80:	b2db      	uxtb	r3, r3
 8003b82:	2b3f      	cmp	r3, #63	@ 0x3f
 8003b84:	d802      	bhi.n	8003b8c <HAL_RCC_OscConfig+0x294>
 8003b86:	4b1a      	ldr	r3, [pc, #104]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	e015      	b.n	8003bb8 <HAL_RCC_OscConfig+0x2c0>
 8003b8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003b90:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8003b98:	fa93 f3a3 	rbit	r3, r3
 8003b9c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003ba0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003ba4:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8003ba8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003bac:	fa93 f3a3 	rbit	r3, r3
 8003bb0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003bb4:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <HAL_RCC_OscConfig+0x2f8>)
 8003bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003bbc:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003bc0:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003bc4:	fa92 f2a2 	rbit	r2, r2
 8003bc8:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 8003bcc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003bd0:	fab2 f282 	clz	r2, r2
 8003bd4:	b2d2      	uxtb	r2, r2
 8003bd6:	f042 0220 	orr.w	r2, r2, #32
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	f002 021f 	and.w	r2, r2, #31
 8003be0:	2101      	movs	r1, #1
 8003be2:	fa01 f202 	lsl.w	r2, r1, r2
 8003be6:	4013      	ands	r3, r2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d1b0      	bne.n	8003b4e <HAL_RCC_OscConfig+0x256>
 8003bec:	e003      	b.n	8003bf6 <HAL_RCC_OscConfig+0x2fe>
 8003bee:	bf00      	nop
 8003bf0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bfa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 0302 	and.w	r3, r3, #2
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	f000 816d 	beq.w	8003ee6 <HAL_RCC_OscConfig+0x5ee>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003c0c:	4bcd      	ldr	r3, [pc, #820]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f003 030c 	and.w	r3, r3, #12
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00c      	beq.n	8003c32 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c18:	4bca      	ldr	r3, [pc, #808]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 030c 	and.w	r3, r3, #12
 8003c20:	2b08      	cmp	r3, #8
 8003c22:	d16e      	bne.n	8003d02 <HAL_RCC_OscConfig+0x40a>
 8003c24:	4bc7      	ldr	r3, [pc, #796]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003c2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c30:	d167      	bne.n	8003d02 <HAL_RCC_OscConfig+0x40a>
 8003c32:	2302      	movs	r3, #2
 8003c34:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c38:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003c3c:	fa93 f3a3 	rbit	r3, r3
 8003c40:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003c44:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c48:	fab3 f383 	clz	r3, r3
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b3f      	cmp	r3, #63	@ 0x3f
 8003c50:	d802      	bhi.n	8003c58 <HAL_RCC_OscConfig+0x360>
 8003c52:	4bbc      	ldr	r3, [pc, #752]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	e013      	b.n	8003c80 <HAL_RCC_OscConfig+0x388>
 8003c58:	2302      	movs	r3, #2
 8003c5a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c5e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003c62:	fa93 f3a3 	rbit	r3, r3
 8003c66:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8003c70:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003c74:	fa93 f3a3 	rbit	r3, r3
 8003c78:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003c7c:	4bb1      	ldr	r3, [pc, #708]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003c7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c80:	2202      	movs	r2, #2
 8003c82:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003c86:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003c8a:	fa92 f2a2 	rbit	r2, r2
 8003c8e:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003c92:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003c96:	fab2 f282 	clz	r2, r2
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	f042 0220 	orr.w	r2, r2, #32
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	f002 021f 	and.w	r2, r2, #31
 8003ca6:	2101      	movs	r1, #1
 8003ca8:	fa01 f202 	lsl.w	r2, r1, r2
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00a      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x3d0>
 8003cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d002      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x3d0>
      {
        return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	f000 be35 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cc8:	4b9e      	ldr	r3, [pc, #632]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003cd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	21f8      	movs	r1, #248	@ 0xf8
 8003cde:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce2:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003ce6:	fa91 f1a1 	rbit	r1, r1
 8003cea:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003cee:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8003cf2:	fab1 f181 	clz	r1, r1
 8003cf6:	b2c9      	uxtb	r1, r1
 8003cf8:	408b      	lsls	r3, r1
 8003cfa:	4992      	ldr	r1, [pc, #584]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d00:	e0f1      	b.n	8003ee6 <HAL_RCC_OscConfig+0x5ee>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d06:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8083 	beq.w	8003e1a <HAL_RCC_OscConfig+0x522>
 8003d14:	2301      	movs	r3, #1
 8003d16:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1a:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8003d1e:	fa93 f3a3 	rbit	r3, r3
 8003d22:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003d26:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2a:	fab3 f383 	clz	r3, r3
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d34:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d40:	f7fe f8d0 	bl	8001ee4 <HAL_GetTick>
 8003d44:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d48:	e00a      	b.n	8003d60 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4a:	f7fe f8cb 	bl	8001ee4 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d902      	bls.n	8003d60 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	f000 bde9 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
 8003d60:	2302      	movs	r3, #2
 8003d62:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d66:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003d72:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d7e:	d802      	bhi.n	8003d86 <HAL_RCC_OscConfig+0x48e>
 8003d80:	4b70      	ldr	r3, [pc, #448]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	e013      	b.n	8003dae <HAL_RCC_OscConfig+0x4b6>
 8003d86:	2302      	movs	r3, #2
 8003d88:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003d90:	fa93 f3a3 	rbit	r3, r3
 8003d94:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003d9e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003daa:	4b66      	ldr	r3, [pc, #408]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dae:	2202      	movs	r2, #2
 8003db0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003db4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8003db8:	fa92 f2a2 	rbit	r2, r2
 8003dbc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003dc0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003dc4:	fab2 f282 	clz	r2, r2
 8003dc8:	b2d2      	uxtb	r2, r2
 8003dca:	f042 0220 	orr.w	r2, r2, #32
 8003dce:	b2d2      	uxtb	r2, r2
 8003dd0:	f002 021f 	and.w	r2, r2, #31
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dda:	4013      	ands	r3, r2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0b4      	beq.n	8003d4a <HAL_RCC_OscConfig+0x452>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003de0:	4b58      	ldr	r3, [pc, #352]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	21f8      	movs	r1, #248	@ 0xf8
 8003df6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 8003dfe:	fa91 f1a1 	rbit	r1, r1
 8003e02:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8003e06:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8003e0a:	fab1 f181 	clz	r1, r1
 8003e0e:	b2c9      	uxtb	r1, r1
 8003e10:	408b      	lsls	r3, r1
 8003e12:	494c      	ldr	r1, [pc, #304]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003e14:	4313      	orrs	r3, r2
 8003e16:	600b      	str	r3, [r1, #0]
 8003e18:	e065      	b.n	8003ee6 <HAL_RCC_OscConfig+0x5ee>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e20:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003e24:	fa93 f3a3 	rbit	r3, r3
 8003e28:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003e2c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e30:	fab3 f383 	clz	r3, r3
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003e3a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	461a      	mov	r2, r3
 8003e42:	2300      	movs	r3, #0
 8003e44:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e46:	f7fe f84d 	bl	8001ee4 <HAL_GetTick>
 8003e4a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e4e:	e00a      	b.n	8003e66 <HAL_RCC_OscConfig+0x56e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e50:	f7fe f848 	bl	8001ee4 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d902      	bls.n	8003e66 <HAL_RCC_OscConfig+0x56e>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	f000 bd66 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
 8003e66:	2302      	movs	r3, #2
 8003e68:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003e78:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e7c:	fab3 f383 	clz	r3, r3
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b3f      	cmp	r3, #63	@ 0x3f
 8003e84:	d802      	bhi.n	8003e8c <HAL_RCC_OscConfig+0x594>
 8003e86:	4b2f      	ldr	r3, [pc, #188]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	e013      	b.n	8003eb4 <HAL_RCC_OscConfig+0x5bc>
 8003e8c:	2302      	movs	r3, #2
 8003e8e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003e96:	fa93 f3a3 	rbit	r3, r3
 8003e9a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003ea4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8003ea8:	fa93 f3a3 	rbit	r3, r3
 8003eac:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003eb0:	4b24      	ldr	r3, [pc, #144]	@ (8003f44 <HAL_RCC_OscConfig+0x64c>)
 8003eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb4:	2202      	movs	r2, #2
 8003eb6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 8003eba:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003ebe:	fa92 f2a2 	rbit	r2, r2
 8003ec2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8003ec6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8003eca:	fab2 f282 	clz	r2, r2
 8003ece:	b2d2      	uxtb	r2, r2
 8003ed0:	f042 0220 	orr.w	r2, r2, #32
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	f002 021f 	and.w	r2, r2, #31
 8003eda:	2101      	movs	r1, #1
 8003edc:	fa01 f202 	lsl.w	r2, r1, r2
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d1b4      	bne.n	8003e50 <HAL_RCC_OscConfig+0x558>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ee6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eea:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0308 	and.w	r3, r3, #8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 8119 	beq.w	800412e <HAL_RCC_OscConfig+0x836>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003efc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f00:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 8082 	beq.w	8004012 <HAL_RCC_OscConfig+0x71a>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f18:	fa93 f3a3 	rbit	r3, r3
 8003f1c:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003f20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f24:	fab3 f383 	clz	r3, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	4b06      	ldr	r3, [pc, #24]	@ (8003f48 <HAL_RCC_OscConfig+0x650>)
 8003f2e:	4413      	add	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	461a      	mov	r2, r3
 8003f34:	2301      	movs	r3, #1
 8003f36:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7fd ffd4 	bl	8001ee4 <HAL_GetTick>
 8003f3c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f40:	e00f      	b.n	8003f62 <HAL_RCC_OscConfig+0x66a>
 8003f42:	bf00      	nop
 8003f44:	40021000 	.word	0x40021000
 8003f48:	10908120 	.word	0x10908120
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4c:	f7fd ffca 	bl	8001ee4 <HAL_GetTick>
 8003f50:	4602      	mov	r2, r0
 8003f52:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d902      	bls.n	8003f62 <HAL_RCC_OscConfig+0x66a>
        {
          return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	f000 bce8 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
 8003f62:	2302      	movs	r3, #2
 8003f64:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003f6c:	fa93 f2a3 	rbit	r2, r3
 8003f70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f74:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f7e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f82:	2202      	movs	r2, #2
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f8a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	fa93 f2a3 	rbit	r2, r3
 8003f94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f98:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fa2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	601a      	str	r2, [r3, #0]
 8003faa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fae:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	fa93 f2a3 	rbit	r2, r3
 8003fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fbc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003fc0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc2:	4bb0      	ldr	r3, [pc, #704]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8003fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003fc6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fca:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fce:	2102      	movs	r1, #2
 8003fd0:	6019      	str	r1, [r3, #0]
 8003fd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fd6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	fa93 f1a3 	rbit	r1, r3
 8003fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fe4:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003fe8:	6019      	str	r1, [r3, #0]
  return result;
 8003fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fee:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	f003 031f 	and.w	r3, r3, #31
 8004004:	2101      	movs	r1, #1
 8004006:	fa01 f303 	lsl.w	r3, r1, r3
 800400a:	4013      	ands	r3, r2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d09d      	beq.n	8003f4c <HAL_RCC_OscConfig+0x654>
 8004010:	e08d      	b.n	800412e <HAL_RCC_OscConfig+0x836>
 8004012:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004016:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800401a:	2201      	movs	r2, #1
 800401c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800401e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004022:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	fa93 f2a3 	rbit	r2, r3
 800402c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004030:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8004034:	601a      	str	r2, [r3, #0]
  return result;
 8004036:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800403a:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800403e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004040:	fab3 f383 	clz	r3, r3
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	4b8f      	ldr	r3, [pc, #572]	@ (8004288 <HAL_RCC_OscConfig+0x990>)
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	461a      	mov	r2, r3
 8004050:	2300      	movs	r3, #0
 8004052:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004054:	f7fd ff46 	bl	8001ee4 <HAL_GetTick>
 8004058:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405c:	e00a      	b.n	8004074 <HAL_RCC_OscConfig+0x77c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800405e:	f7fd ff41 	bl	8001ee4 <HAL_GetTick>
 8004062:	4602      	mov	r2, r0
 8004064:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d902      	bls.n	8004074 <HAL_RCC_OscConfig+0x77c>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	f000 bc5f 	b.w	8004932 <HAL_RCC_OscConfig+0x103a>
 8004074:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004078:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800407c:	2202      	movs	r2, #2
 800407e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004080:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004084:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	fa93 f2a3 	rbit	r2, r3
 800408e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004092:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8004096:	601a      	str	r2, [r3, #0]
 8004098:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800409c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040a0:	2202      	movs	r2, #2
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040a8:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	fa93 f2a3 	rbit	r2, r3
 80040b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040b6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80040ba:	601a      	str	r2, [r3, #0]
 80040bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040c0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80040c4:	2202      	movs	r2, #2
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040cc:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	fa93 f2a3 	rbit	r2, r3
 80040d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80040de:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e0:	4b68      	ldr	r3, [pc, #416]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 80040e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040e8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80040ec:	2102      	movs	r1, #2
 80040ee:	6019      	str	r1, [r3, #0]
 80040f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	fa93 f1a3 	rbit	r1, r3
 80040fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004102:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004106:	6019      	str	r1, [r3, #0]
  return result;
 8004108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800410c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	fab3 f383 	clz	r3, r3
 8004116:	b2db      	uxtb	r3, r3
 8004118:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 031f 	and.w	r3, r3, #31
 8004122:	2101      	movs	r1, #1
 8004124:	fa01 f303 	lsl.w	r3, r1, r3
 8004128:	4013      	ands	r3, r2
 800412a:	2b00      	cmp	r3, #0
 800412c:	d197      	bne.n	800405e <HAL_RCC_OscConfig+0x766>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800412e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004132:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 819c 	beq.w	800447c <HAL_RCC_OscConfig+0xb84>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004144:	2300      	movs	r3, #0
 8004146:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800414a:	4b4e      	ldr	r3, [pc, #312]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d116      	bne.n	8004184 <HAL_RCC_OscConfig+0x88c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004156:	4b4b      	ldr	r3, [pc, #300]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	4a4a      	ldr	r2, [pc, #296]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 800415c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004160:	61d3      	str	r3, [r2, #28]
 8004162:	4b48      	ldr	r3, [pc, #288]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800416a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800416e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004178:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800417c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800417e:	2301      	movs	r3, #1
 8004180:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004184:	4b41      	ldr	r3, [pc, #260]	@ (800428c <HAL_RCC_OscConfig+0x994>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800418c:	2b00      	cmp	r3, #0
 800418e:	d11a      	bne.n	80041c6 <HAL_RCC_OscConfig+0x8ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004190:	4b3e      	ldr	r3, [pc, #248]	@ (800428c <HAL_RCC_OscConfig+0x994>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3d      	ldr	r2, [pc, #244]	@ (800428c <HAL_RCC_OscConfig+0x994>)
 8004196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800419a:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419c:	f7fd fea2 	bl	8001ee4 <HAL_GetTick>
 80041a0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a4:	e009      	b.n	80041ba <HAL_RCC_OscConfig+0x8c2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fd fe9d 	bl	8001ee4 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b64      	cmp	r3, #100	@ 0x64
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x8c2>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e3bb      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ba:	4b34      	ldr	r3, [pc, #208]	@ (800428c <HAL_RCC_OscConfig+0x994>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0ef      	beq.n	80041a6 <HAL_RCC_OscConfig+0x8ae>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d106      	bne.n	80041e4 <HAL_RCC_OscConfig+0x8ec>
 80041d6:	4b2b      	ldr	r3, [pc, #172]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	4a2a      	ldr	r2, [pc, #168]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6213      	str	r3, [r2, #32]
 80041e2:	e035      	b.n	8004250 <HAL_RCC_OscConfig+0x958>
 80041e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041e8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10c      	bne.n	800420e <HAL_RCC_OscConfig+0x916>
 80041f4:	4b23      	ldr	r3, [pc, #140]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	4a22      	ldr	r2, [pc, #136]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	6213      	str	r3, [r2, #32]
 8004200:	4b20      	ldr	r3, [pc, #128]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004202:	6a1b      	ldr	r3, [r3, #32]
 8004204:	4a1f      	ldr	r2, [pc, #124]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004206:	f023 0304 	bic.w	r3, r3, #4
 800420a:	6213      	str	r3, [r2, #32]
 800420c:	e020      	b.n	8004250 <HAL_RCC_OscConfig+0x958>
 800420e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004212:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	2b05      	cmp	r3, #5
 800421c:	d10c      	bne.n	8004238 <HAL_RCC_OscConfig+0x940>
 800421e:	4b19      	ldr	r3, [pc, #100]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004220:	6a1b      	ldr	r3, [r3, #32]
 8004222:	4a18      	ldr	r2, [pc, #96]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004224:	f043 0304 	orr.w	r3, r3, #4
 8004228:	6213      	str	r3, [r2, #32]
 800422a:	4b16      	ldr	r3, [pc, #88]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	4a15      	ldr	r2, [pc, #84]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004230:	f043 0301 	orr.w	r3, r3, #1
 8004234:	6213      	str	r3, [r2, #32]
 8004236:	e00b      	b.n	8004250 <HAL_RCC_OscConfig+0x958>
 8004238:	4b12      	ldr	r3, [pc, #72]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 800423a:	6a1b      	ldr	r3, [r3, #32]
 800423c:	4a11      	ldr	r2, [pc, #68]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	6213      	str	r3, [r2, #32]
 8004244:	4b0f      	ldr	r3, [pc, #60]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	4a0e      	ldr	r2, [pc, #56]	@ (8004284 <HAL_RCC_OscConfig+0x98c>)
 800424a:	f023 0304 	bic.w	r3, r3, #4
 800424e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004250:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004254:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	f000 8085 	beq.w	800436c <HAL_RCC_OscConfig+0xa74>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004262:	f7fd fe3f 	bl	8001ee4 <HAL_GetTick>
 8004266:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800426a:	e011      	b.n	8004290 <HAL_RCC_OscConfig+0x998>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800426c:	f7fd fe3a 	bl	8001ee4 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800427c:	4293      	cmp	r3, r2
 800427e:	d907      	bls.n	8004290 <HAL_RCC_OscConfig+0x998>
        {
          return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e356      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
 8004284:	40021000 	.word	0x40021000
 8004288:	10908120 	.word	0x10908120
 800428c:	40007000 	.word	0x40007000
 8004290:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004294:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8004298:	2202      	movs	r2, #2
 800429a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800429c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042a0:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	fa93 f2a3 	rbit	r2, r3
 80042aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80042b2:	601a      	str	r2, [r3, #0]
 80042b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042bc:	2202      	movs	r2, #2
 80042be:	601a      	str	r2, [r3, #0]
 80042c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042c4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	fa93 f2a3 	rbit	r2, r3
 80042ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042d2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042d6:	601a      	str	r2, [r3, #0]
  return result;
 80042d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80042e0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e2:	fab3 f383 	clz	r3, r3
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <HAL_RCC_OscConfig+0xa00>
 80042f2:	4b98      	ldr	r3, [pc, #608]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	e013      	b.n	8004320 <HAL_RCC_OscConfig+0xa28>
 80042f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80042fc:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8004300:	2202      	movs	r2, #2
 8004302:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004304:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004308:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	fa93 f2a3 	rbit	r2, r3
 8004312:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004316:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 800431a:	601a      	str	r2, [r3, #0]
 800431c:	4b8d      	ldr	r3, [pc, #564]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004324:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004328:	2102      	movs	r1, #2
 800432a:	6011      	str	r1, [r2, #0]
 800432c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004330:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8004334:	6812      	ldr	r2, [r2, #0]
 8004336:	fa92 f1a2 	rbit	r1, r2
 800433a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800433e:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8004342:	6011      	str	r1, [r2, #0]
  return result;
 8004344:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004348:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800434c:	6812      	ldr	r2, [r2, #0]
 800434e:	fab2 f282 	clz	r2, r2
 8004352:	b2d2      	uxtb	r2, r2
 8004354:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	f002 021f 	and.w	r2, r2, #31
 800435e:	2101      	movs	r1, #1
 8004360:	fa01 f202 	lsl.w	r2, r1, r2
 8004364:	4013      	ands	r3, r2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d080      	beq.n	800426c <HAL_RCC_OscConfig+0x974>
 800436a:	e07d      	b.n	8004468 <HAL_RCC_OscConfig+0xb70>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7fd fdba 	bl	8001ee4 <HAL_GetTick>
 8004370:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004374:	e00b      	b.n	800438e <HAL_RCC_OscConfig+0xa96>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004376:	f7fd fdb5 	bl	8001ee4 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004386:	4293      	cmp	r3, r2
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0xa96>
        {
          return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e2d1      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
 800438e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004392:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8004396:	2202      	movs	r2, #2
 8004398:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800439e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	fa93 f2a3 	rbit	r2, r3
 80043a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043ac:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043b6:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043ba:	2202      	movs	r2, #2
 80043bc:	601a      	str	r2, [r3, #0]
 80043be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043c2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	fa93 f2a3 	rbit	r2, r3
 80043cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043d0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043d4:	601a      	str	r2, [r3, #0]
  return result;
 80043d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80043de:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e0:	fab3 f383 	clz	r3, r3
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <HAL_RCC_OscConfig+0xafe>
 80043f0:	4b58      	ldr	r3, [pc, #352]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 80043f2:	6a1b      	ldr	r3, [r3, #32]
 80043f4:	e013      	b.n	800441e <HAL_RCC_OscConfig+0xb26>
 80043f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80043fa:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80043fe:	2202      	movs	r2, #2
 8004400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004402:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004406:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	fa93 f2a3 	rbit	r2, r3
 8004410:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004414:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	4b4e      	ldr	r3, [pc, #312]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 800441c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004422:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004426:	2102      	movs	r1, #2
 8004428:	6011      	str	r1, [r2, #0]
 800442a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800442e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8004432:	6812      	ldr	r2, [r2, #0]
 8004434:	fa92 f1a2 	rbit	r1, r2
 8004438:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800443c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8004440:	6011      	str	r1, [r2, #0]
  return result;
 8004442:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004446:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 800444a:	6812      	ldr	r2, [r2, #0]
 800444c:	fab2 f282 	clz	r2, r2
 8004450:	b2d2      	uxtb	r2, r2
 8004452:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004456:	b2d2      	uxtb	r2, r2
 8004458:	f002 021f 	and.w	r2, r2, #31
 800445c:	2101      	movs	r1, #1
 800445e:	fa01 f202 	lsl.w	r2, r1, r2
 8004462:	4013      	ands	r3, r2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d186      	bne.n	8004376 <HAL_RCC_OscConfig+0xa7e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004468:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 800446c:	2b01      	cmp	r3, #1
 800446e:	d105      	bne.n	800447c <HAL_RCC_OscConfig+0xb84>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004470:	4b38      	ldr	r3, [pc, #224]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 8004472:	69db      	ldr	r3, [r3, #28]
 8004474:	4a37      	ldr	r2, [pc, #220]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 8004476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800447a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800447c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004480:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8251 	beq.w	8004930 <HAL_RCC_OscConfig+0x1038>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800448e:	4b31      	ldr	r3, [pc, #196]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 030c 	and.w	r3, r3, #12
 8004496:	2b08      	cmp	r3, #8
 8004498:	f000 820f 	beq.w	80048ba <HAL_RCC_OscConfig+0xfc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800449c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	f040 8165 	bne.w	8004778 <HAL_RCC_OscConfig+0xe80>
 80044ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044b6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80044ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044c0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	fa93 f2a3 	rbit	r2, r3
 80044ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044ce:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80044d2:	601a      	str	r2, [r3, #0]
  return result;
 80044d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80044d8:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80044dc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044de:	fab3 f383 	clz	r3, r3
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80044e8:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	461a      	mov	r2, r3
 80044f0:	2300      	movs	r3, #0
 80044f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd fcf6 	bl	8001ee4 <HAL_GetTick>
 80044f8:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80044fc:	e009      	b.n	8004512 <HAL_RCC_OscConfig+0xc1a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fe:	f7fd fcf1 	bl	8001ee4 <HAL_GetTick>
 8004502:	4602      	mov	r2, r0
 8004504:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	2b02      	cmp	r3, #2
 800450c:	d901      	bls.n	8004512 <HAL_RCC_OscConfig+0xc1a>
          {
            return HAL_TIMEOUT;
 800450e:	2303      	movs	r3, #3
 8004510:	e20f      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
 8004512:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004516:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800451a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800451e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004520:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004524:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	fa93 f2a3 	rbit	r2, r3
 800452e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004532:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004536:	601a      	str	r2, [r3, #0]
  return result;
 8004538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800453c:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8004540:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004542:	fab3 f383 	clz	r3, r3
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b3f      	cmp	r3, #63	@ 0x3f
 800454a:	d805      	bhi.n	8004558 <HAL_RCC_OscConfig+0xc60>
 800454c:	4b01      	ldr	r3, [pc, #4]	@ (8004554 <HAL_RCC_OscConfig+0xc5c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	e02a      	b.n	80045a8 <HAL_RCC_OscConfig+0xcb0>
 8004552:	bf00      	nop
 8004554:	40021000 	.word	0x40021000
 8004558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800455c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8004560:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004564:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004566:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800456a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	fa93 f2a3 	rbit	r2, r3
 8004574:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004578:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800457c:	601a      	str	r2, [r3, #0]
 800457e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004582:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004586:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004590:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	fa93 f2a3 	rbit	r2, r3
 800459a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800459e:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80045a2:	601a      	str	r2, [r3, #0]
 80045a4:	4bca      	ldr	r3, [pc, #808]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 80045a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045a8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045ac:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80045b0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80045b4:	6011      	str	r1, [r2, #0]
 80045b6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045ba:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	fa92 f1a2 	rbit	r1, r2
 80045c4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045c8:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80045cc:	6011      	str	r1, [r2, #0]
  return result;
 80045ce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80045d2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 80045d6:	6812      	ldr	r2, [r2, #0]
 80045d8:	fab2 f282 	clz	r2, r2
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	f042 0220 	orr.w	r2, r2, #32
 80045e2:	b2d2      	uxtb	r2, r2
 80045e4:	f002 021f 	and.w	r2, r2, #31
 80045e8:	2101      	movs	r1, #1
 80045ea:	fa01 f202 	lsl.w	r2, r1, r2
 80045ee:	4013      	ands	r3, r2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d184      	bne.n	80044fe <HAL_RCC_OscConfig+0xc06>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f4:	4bb6      	ldr	r3, [pc, #728]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	f023 020f 	bic.w	r2, r3, #15
 80045fc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004600:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004608:	49b1      	ldr	r1, [pc, #708]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 800460a:	4313      	orrs	r3, r2
 800460c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800460e:	4bb0      	ldr	r3, [pc, #704]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8004616:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800461a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	6a19      	ldr	r1, [r3, #32]
 8004622:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004626:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	430b      	orrs	r3, r1
 8004630:	49a7      	ldr	r1, [pc, #668]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 8004632:	4313      	orrs	r3, r2
 8004634:	604b      	str	r3, [r1, #4]
 8004636:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800463a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800463e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004642:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004644:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004648:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	fa93 f2a3 	rbit	r2, r3
 8004652:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004656:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800465a:	601a      	str	r2, [r3, #0]
  return result;
 800465c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004660:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8004664:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004670:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	461a      	mov	r2, r3
 8004678:	2301      	movs	r3, #1
 800467a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800467c:	f7fd fc32 	bl	8001ee4 <HAL_GetTick>
 8004680:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004684:	e009      	b.n	800469a <HAL_RCC_OscConfig+0xda2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004686:	f7fd fc2d 	bl	8001ee4 <HAL_GetTick>
 800468a:	4602      	mov	r2, r0
 800468c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0xda2>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e14b      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
 800469a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800469e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046ac:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	fa93 f2a3 	rbit	r2, r3
 80046b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046ba:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046be:	601a      	str	r2, [r3, #0]
  return result;
 80046c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046c4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 80046c8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046ca:	fab3 f383 	clz	r3, r3
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	2b3f      	cmp	r3, #63	@ 0x3f
 80046d2:	d802      	bhi.n	80046da <HAL_RCC_OscConfig+0xde2>
 80046d4:	4b7e      	ldr	r3, [pc, #504]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	e027      	b.n	800472a <HAL_RCC_OscConfig+0xe32>
 80046da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046de:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80046e2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80046e6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046ec:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	fa93 f2a3 	rbit	r2, r3
 80046f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80046fa:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004704:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004708:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800470c:	601a      	str	r2, [r3, #0]
 800470e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004712:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	fa93 f2a3 	rbit	r2, r3
 800471c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004720:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	4b6a      	ldr	r3, [pc, #424]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 8004728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800472e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004732:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004736:	6011      	str	r1, [r2, #0]
 8004738:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800473c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004740:	6812      	ldr	r2, [r2, #0]
 8004742:	fa92 f1a2 	rbit	r1, r2
 8004746:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800474a:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800474e:	6011      	str	r1, [r2, #0]
  return result;
 8004750:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004754:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004758:	6812      	ldr	r2, [r2, #0]
 800475a:	fab2 f282 	clz	r2, r2
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	f042 0220 	orr.w	r2, r2, #32
 8004764:	b2d2      	uxtb	r2, r2
 8004766:	f002 021f 	and.w	r2, r2, #31
 800476a:	2101      	movs	r1, #1
 800476c:	fa01 f202 	lsl.w	r2, r1, r2
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d087      	beq.n	8004686 <HAL_RCC_OscConfig+0xd8e>
 8004776:	e0db      	b.n	8004930 <HAL_RCC_OscConfig+0x1038>
 8004778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800477c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004780:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004784:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004786:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800478a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	fa93 f2a3 	rbit	r2, r3
 8004794:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004798:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800479c:	601a      	str	r2, [r3, #0]
  return result;
 800479e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047a2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80047a6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047a8:	fab3 f383 	clz	r3, r3
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80047b2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	461a      	mov	r2, r3
 80047ba:	2300      	movs	r3, #0
 80047bc:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047be:	f7fd fb91 	bl	8001ee4 <HAL_GetTick>
 80047c2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047c6:	e009      	b.n	80047dc <HAL_RCC_OscConfig+0xee4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd fb8c 	bl	8001ee4 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80047d2:	1ad3      	subs	r3, r2, r3
 80047d4:	2b02      	cmp	r3, #2
 80047d6:	d901      	bls.n	80047dc <HAL_RCC_OscConfig+0xee4>
          {
            return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e0aa      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
 80047dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047e0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80047e8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047ee:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	fa93 f2a3 	rbit	r2, r3
 80047f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80047fc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8004800:	601a      	str	r2, [r3, #0]
  return result;
 8004802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004806:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 800480a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800480c:	fab3 f383 	clz	r3, r3
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b3f      	cmp	r3, #63	@ 0x3f
 8004814:	d802      	bhi.n	800481c <HAL_RCC_OscConfig+0xf24>
 8004816:	4b2e      	ldr	r3, [pc, #184]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	e027      	b.n	800486c <HAL_RCC_OscConfig+0xf74>
 800481c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004820:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004824:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004828:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800482e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	fa93 f2a3 	rbit	r2, r3
 8004838:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800483c:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8004840:	601a      	str	r2, [r3, #0]
 8004842:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004846:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800484a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800484e:	601a      	str	r2, [r3, #0]
 8004850:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004854:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	fa93 f2a3 	rbit	r2, r3
 800485e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004862:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	4b19      	ldr	r3, [pc, #100]	@ (80048d0 <HAL_RCC_OscConfig+0xfd8>)
 800486a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800486c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004870:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004874:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004878:	6011      	str	r1, [r2, #0]
 800487a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800487e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8004882:	6812      	ldr	r2, [r2, #0]
 8004884:	fa92 f1a2 	rbit	r1, r2
 8004888:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800488c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004890:	6011      	str	r1, [r2, #0]
  return result;
 8004892:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004896:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800489a:	6812      	ldr	r2, [r2, #0]
 800489c:	fab2 f282 	clz	r2, r2
 80048a0:	b2d2      	uxtb	r2, r2
 80048a2:	f042 0220 	orr.w	r2, r2, #32
 80048a6:	b2d2      	uxtb	r2, r2
 80048a8:	f002 021f 	and.w	r2, r2, #31
 80048ac:	2101      	movs	r1, #1
 80048ae:	fa01 f202 	lsl.w	r2, r1, r2
 80048b2:	4013      	ands	r3, r2
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d187      	bne.n	80047c8 <HAL_RCC_OscConfig+0xed0>
 80048b8:	e03a      	b.n	8004930 <HAL_RCC_OscConfig+0x1038>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048be:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d104      	bne.n	80048d4 <HAL_RCC_OscConfig+0xfdc>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e031      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80048d4:	4b19      	ldr	r3, [pc, #100]	@ (800493c <HAL_RCC_OscConfig+0x1044>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80048dc:	4b17      	ldr	r3, [pc, #92]	@ (800493c <HAL_RCC_OscConfig+0x1044>)
 80048de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048e0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80048e4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80048e8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80048ec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80048f0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69db      	ldr	r3, [r3, #28]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d117      	bne.n	800492c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80048fc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004900:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004908:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004910:	429a      	cmp	r2, r3
 8004912:	d10b      	bne.n	800492c <HAL_RCC_OscConfig+0x1034>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004914:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004918:	f003 020f 	and.w	r2, r3, #15
 800491c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004920:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004928:	429a      	cmp	r2, r3
 800492a:	d001      	beq.n	8004930 <HAL_RCC_OscConfig+0x1038>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_RCC_OscConfig+0x103a>
        }
      }
    }
  }

  return HAL_OK;
 8004930:	2300      	movs	r3, #0
}
 8004932:	4618      	mov	r0, r3
 8004934:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40021000 	.word	0x40021000

08004940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b09e      	sub	sp, #120	@ 0x78
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800494a:	2300      	movs	r3, #0
 800494c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d101      	bne.n	8004958 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e154      	b.n	8004c02 <HAL_RCC_ClockConfig+0x2c2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004958:	4b89      	ldr	r3, [pc, #548]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d910      	bls.n	8004988 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b86      	ldr	r3, [pc, #536]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 0207 	bic.w	r2, r3, #7
 800496e:	4984      	ldr	r1, [pc, #528]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b82      	ldr	r3, [pc, #520]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d001      	beq.n	8004988 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e13c      	b.n	8004c02 <HAL_RCC_ClockConfig+0x2c2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004994:	4b7b      	ldr	r3, [pc, #492]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	4978      	ldr	r1, [pc, #480]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	f000 80cd 	beq.w	8004b4e <HAL_RCC_ClockConfig+0x20e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d137      	bne.n	8004a2c <HAL_RCC_ClockConfig+0xec>
 80049bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80049c4:	fa93 f3a3 	rbit	r3, r3
 80049c8:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 80049ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049cc:	fab3 f383 	clz	r3, r3
 80049d0:	b2db      	uxtb	r3, r3
 80049d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80049d4:	d802      	bhi.n	80049dc <HAL_RCC_ClockConfig+0x9c>
 80049d6:	4b6b      	ldr	r3, [pc, #428]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	e00f      	b.n	80049fc <HAL_RCC_ClockConfig+0xbc>
 80049dc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80049e4:	fa93 f3a3 	rbit	r3, r3
 80049e8:	667b      	str	r3, [r7, #100]	@ 0x64
 80049ea:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80049ee:	663b      	str	r3, [r7, #96]	@ 0x60
 80049f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80049f2:	fa93 f3a3 	rbit	r3, r3
 80049f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80049f8:	4b62      	ldr	r3, [pc, #392]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 80049fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049fc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a00:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004a02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a04:	fa92 f2a2 	rbit	r2, r2
 8004a08:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8004a0a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004a0c:	fab2 f282 	clz	r2, r2
 8004a10:	b2d2      	uxtb	r2, r2
 8004a12:	f042 0220 	orr.w	r2, r2, #32
 8004a16:	b2d2      	uxtb	r2, r2
 8004a18:	f002 021f 	and.w	r2, r2, #31
 8004a1c:	2101      	movs	r1, #1
 8004a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d171      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0ea      	b.n	8004c02 <HAL_RCC_ClockConfig+0x2c2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d137      	bne.n	8004aa4 <HAL_RCC_ClockConfig+0x164>
 8004a34:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a38:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a3c:	fa93 f3a3 	rbit	r3, r3
 8004a40:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004a42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a44:	fab3 f383 	clz	r3, r3
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8004a4c:	d802      	bhi.n	8004a54 <HAL_RCC_ClockConfig+0x114>
 8004a4e:	4b4d      	ldr	r3, [pc, #308]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	e00f      	b.n	8004a74 <HAL_RCC_ClockConfig+0x134>
 8004a54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a58:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a5c:	fa93 f3a3 	rbit	r3, r3
 8004a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a62:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004a66:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a6a:	fa93 f3a3 	rbit	r3, r3
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a70:	4b44      	ldr	r3, [pc, #272]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a74:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a78:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004a7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a7c:	fa92 f2a2 	rbit	r2, r2
 8004a80:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8004a82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004a84:	fab2 f282 	clz	r2, r2
 8004a88:	b2d2      	uxtb	r2, r2
 8004a8a:	f042 0220 	orr.w	r2, r2, #32
 8004a8e:	b2d2      	uxtb	r2, r2
 8004a90:	f002 021f 	and.w	r2, r2, #31
 8004a94:	2101      	movs	r1, #1
 8004a96:	fa01 f202 	lsl.w	r2, r1, r2
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d135      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e0ae      	b.n	8004c02 <HAL_RCC_ClockConfig+0x2c2>
 8004aa4:	2302      	movs	r3, #2
 8004aa6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004aaa:	fa93 f3a3 	rbit	r3, r3
 8004aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab2:	fab3 f383 	clz	r3, r3
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b3f      	cmp	r3, #63	@ 0x3f
 8004aba:	d802      	bhi.n	8004ac2 <HAL_RCC_ClockConfig+0x182>
 8004abc:	4b31      	ldr	r3, [pc, #196]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	e00d      	b.n	8004ade <HAL_RCC_ClockConfig+0x19e>
 8004ac2:	2302      	movs	r3, #2
 8004ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	fa93 f3a3 	rbit	r3, r3
 8004acc:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ace:	2302      	movs	r3, #2
 8004ad0:	623b      	str	r3, [r7, #32]
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	61fb      	str	r3, [r7, #28]
 8004ada:	4b2a      	ldr	r3, [pc, #168]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004adc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ade:	2202      	movs	r2, #2
 8004ae0:	61ba      	str	r2, [r7, #24]
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	fa92 f2a2 	rbit	r2, r2
 8004ae8:	617a      	str	r2, [r7, #20]
  return result;
 8004aea:	697a      	ldr	r2, [r7, #20]
 8004aec:	fab2 f282 	clz	r2, r2
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	f042 0220 	orr.w	r2, r2, #32
 8004af6:	b2d2      	uxtb	r2, r2
 8004af8:	f002 021f 	and.w	r2, r2, #31
 8004afc:	2101      	movs	r1, #1
 8004afe:	fa01 f202 	lsl.w	r2, r1, r2
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d101      	bne.n	8004b0c <HAL_RCC_ClockConfig+0x1cc>
      {
        return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e07a      	b.n	8004c02 <HAL_RCC_ClockConfig+0x2c2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	f023 0203 	bic.w	r2, r3, #3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	491a      	ldr	r1, [pc, #104]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b1e:	f7fd f9e1 	bl	8001ee4 <HAL_GetTick>
 8004b22:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b24:	e00a      	b.n	8004b3c <HAL_RCC_ClockConfig+0x1fc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b26:	f7fd f9dd 	bl	8001ee4 <HAL_GetTick>
 8004b2a:	4602      	mov	r2, r0
 8004b2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_ClockConfig+0x1fc>
      {
        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e062      	b.n	8004c02 <HAL_RCC_ClockConfig+0x2c2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b3c:	4b11      	ldr	r3, [pc, #68]	@ (8004b84 <HAL_RCC_ClockConfig+0x244>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 020c 	and.w	r2, r3, #12
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	429a      	cmp	r2, r3
 8004b4c:	d1eb      	bne.n	8004b26 <HAL_RCC_ClockConfig+0x1e6>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d215      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x248>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b5c:	4b08      	ldr	r3, [pc, #32]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f023 0207 	bic.w	r2, r3, #7
 8004b64:	4906      	ldr	r1, [pc, #24]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b6c:	4b04      	ldr	r3, [pc, #16]	@ (8004b80 <HAL_RCC_ClockConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0307 	and.w	r3, r3, #7
 8004b74:	683a      	ldr	r2, [r7, #0]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d006      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e041      	b.n	8004c02 <HAL_RCC_ClockConfig+0x2c2>
 8004b7e:	bf00      	nop
 8004b80:	40022000 	.word	0x40022000
 8004b84:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x266>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b94:	4b1d      	ldr	r3, [pc, #116]	@ (8004c0c <HAL_RCC_ClockConfig+0x2cc>)
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	491a      	ldr	r1, [pc, #104]	@ (8004c0c <HAL_RCC_ClockConfig+0x2cc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x286>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb2:	4b16      	ldr	r3, [pc, #88]	@ (8004c0c <HAL_RCC_ClockConfig+0x2cc>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	4912      	ldr	r1, [pc, #72]	@ (8004c0c <HAL_RCC_ClockConfig+0x2cc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004bc6:	f000 f829 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 8004bca:	4601      	mov	r1, r0
 8004bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8004c0c <HAL_RCC_ClockConfig+0x2cc>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004bd4:	22f0      	movs	r2, #240	@ 0xf0
 8004bd6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bd8:	693a      	ldr	r2, [r7, #16]
 8004bda:	fa92 f2a2 	rbit	r2, r2
 8004bde:	60fa      	str	r2, [r7, #12]
  return result;
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	fab2 f282 	clz	r2, r2
 8004be6:	b2d2      	uxtb	r2, r2
 8004be8:	40d3      	lsrs	r3, r2
 8004bea:	4a09      	ldr	r2, [pc, #36]	@ (8004c10 <HAL_RCC_ClockConfig+0x2d0>)
 8004bec:	5cd3      	ldrb	r3, [r2, r3]
 8004bee:	fa21 f303 	lsr.w	r3, r1, r3
 8004bf2:	4a08      	ldr	r2, [pc, #32]	@ (8004c14 <HAL_RCC_ClockConfig+0x2d4>)
 8004bf4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004bf6:	4b08      	ldr	r3, [pc, #32]	@ (8004c18 <HAL_RCC_ClockConfig+0x2d8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f7fd f92e 	bl	8001e5c <HAL_InitTick>
  
  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3778      	adds	r7, #120	@ 0x78
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40021000 	.word	0x40021000
 8004c10:	0800a168 	.word	0x0800a168
 8004c14:	20000020 	.word	0x20000020
 8004c18:	20000024 	.word	0x20000024

08004c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b087      	sub	sp, #28
 8004c20:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c22:	2300      	movs	r3, #0
 8004c24:	60fb      	str	r3, [r7, #12]
 8004c26:	2300      	movs	r3, #0
 8004c28:	60bb      	str	r3, [r7, #8]
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
 8004c2e:	2300      	movs	r3, #0
 8004c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004c36:	4b1f      	ldr	r3, [pc, #124]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d002      	beq.n	8004c4c <HAL_RCC_GetSysClockFreq+0x30>
 8004c46:	2b08      	cmp	r3, #8
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_GetSysClockFreq+0x36>
 8004c4a:	e029      	b.n	8004ca0 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c4e:	613b      	str	r3, [r7, #16]
      break;
 8004c50:	e029      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	0c9b      	lsrs	r3, r3, #18
 8004c56:	f003 030f 	and.w	r3, r3, #15
 8004c5a:	4a18      	ldr	r2, [pc, #96]	@ (8004cbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c5c:	5cd3      	ldrb	r3, [r2, r3]
 8004c5e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004c60:	4b14      	ldr	r3, [pc, #80]	@ (8004cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c64:	f003 030f 	and.w	r3, r3, #15
 8004c68:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c6a:	5cd3      	ldrb	r3, [r2, r3]
 8004c6c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d008      	beq.n	8004c8a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c78:	4a0f      	ldr	r2, [pc, #60]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	fb02 f303 	mul.w	r3, r2, r3
 8004c86:	617b      	str	r3, [r7, #20]
 8004c88:	e007      	b.n	8004c9a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	fb02 f303 	mul.w	r3, r2, r3
 8004c98:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	613b      	str	r3, [r7, #16]
      break;
 8004c9e:	e002      	b.n	8004ca6 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca0:	4b05      	ldr	r3, [pc, #20]	@ (8004cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004ca2:	613b      	str	r3, [r7, #16]
      break;
 8004ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ca6:	693b      	ldr	r3, [r7, #16]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	371c      	adds	r7, #28
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr
 8004cb4:	40021000 	.word	0x40021000
 8004cb8:	007a1200 	.word	0x007a1200
 8004cbc:	0800a180 	.word	0x0800a180
 8004cc0:	0800a190 	.word	0x0800a190

08004cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cc8:	4b03      	ldr	r3, [pc, #12]	@ (8004cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cca:	681b      	ldr	r3, [r3, #0]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	20000020 	.word	0x20000020

08004cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004ce2:	f7ff ffef 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004ce6:	4601      	mov	r1, r0
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8004d18 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004cf0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004cf4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	fa92 f2a2 	rbit	r2, r2
 8004cfc:	603a      	str	r2, [r7, #0]
  return result;
 8004cfe:	683a      	ldr	r2, [r7, #0]
 8004d00:	fab2 f282 	clz	r2, r2
 8004d04:	b2d2      	uxtb	r2, r2
 8004d06:	40d3      	lsrs	r3, r2
 8004d08:	4a04      	ldr	r2, [pc, #16]	@ (8004d1c <HAL_RCC_GetPCLK1Freq+0x40>)
 8004d0a:	5cd3      	ldrb	r3, [r2, r3]
 8004d0c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	0800a178 	.word	0x0800a178

08004d20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004d26:	f7ff ffcd 	bl	8004cc4 <HAL_RCC_GetHCLKFreq>
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004d5c <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004d34:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004d38:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	fa92 f2a2 	rbit	r2, r2
 8004d40:	603a      	str	r2, [r7, #0]
  return result;
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	fab2 f282 	clz	r2, r2
 8004d48:	b2d2      	uxtb	r2, r2
 8004d4a:	40d3      	lsrs	r3, r2
 8004d4c:	4a04      	ldr	r2, [pc, #16]	@ (8004d60 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
 8004d50:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004d54:	4618      	mov	r0, r3
 8004d56:	3708      	adds	r7, #8
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	40021000 	.word	0x40021000
 8004d60:	0800a178 	.word	0x0800a178

08004d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b092      	sub	sp, #72	@ 0x48
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004d74:	2300      	movs	r3, #0
 8004d76:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 80d2 	beq.w	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d88:	4b4d      	ldr	r3, [pc, #308]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d8a:	69db      	ldr	r3, [r3, #28]
 8004d8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10e      	bne.n	8004db2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d94:	4b4a      	ldr	r3, [pc, #296]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d96:	69db      	ldr	r3, [r3, #28]
 8004d98:	4a49      	ldr	r2, [pc, #292]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d9e:	61d3      	str	r3, [r2, #28]
 8004da0:	4b47      	ldr	r3, [pc, #284]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004da8:	60bb      	str	r3, [r7, #8]
 8004daa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dac:	2301      	movs	r3, #1
 8004dae:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db2:	4b44      	ldr	r3, [pc, #272]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d118      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dbe:	4b41      	ldr	r3, [pc, #260]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a40      	ldr	r2, [pc, #256]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dca:	f7fd f88b 	bl	8001ee4 <HAL_GetTick>
 8004dce:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dd0:	e008      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dd2:	f7fd f887 	bl	8001ee4 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	2b64      	cmp	r3, #100	@ 0x64
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e1d4      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x42a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de4:	4b37      	ldr	r3, [pc, #220]	@ (8004ec4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0f0      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004df0:	4b33      	ldr	r3, [pc, #204]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004df8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8082 	beq.w	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e0a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d07a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e10:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e1a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	fa93 f3a3 	rbit	r3, r3
 8004e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e2a:	fab3 f383 	clz	r3, r3
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	461a      	mov	r2, r3
 8004e32:	4b25      	ldr	r3, [pc, #148]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e34:	4413      	add	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	6013      	str	r3, [r2, #0]
 8004e3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004e42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e46:	fa93 f3a3 	rbit	r3, r3
 8004e4a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004e4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e4e:	fab3 f383 	clz	r3, r3
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	461a      	mov	r2, r3
 8004e56:	4b1c      	ldr	r3, [pc, #112]	@ (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e58:	4413      	add	r3, r2
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2300      	movs	r3, #0
 8004e60:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004e62:	4a17      	ldr	r2, [pc, #92]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004e64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e66:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d049      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e72:	f7fd f837 	bl	8001ee4 <HAL_GetTick>
 8004e76:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e78:	e00a      	b.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e7a:	f7fd f833 	bl	8001ee4 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e17e      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8004e90:	2302      	movs	r3, #2
 8004e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	fa93 f3a3 	rbit	r3, r3
 8004e9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	6a3b      	ldr	r3, [r7, #32]
 8004ea2:	fa93 f3a3 	rbit	r3, r3
 8004ea6:	61fb      	str	r3, [r7, #28]
  return result;
 8004ea8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eaa:	fab3 f383 	clz	r3, r3
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	f023 035f 	bic.w	r3, r3, #95	@ 0x5f
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d108      	bne.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004eba:	4b01      	ldr	r3, [pc, #4]	@ (8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	e00d      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	10908100 	.word	0x10908100
 8004ecc:	2302      	movs	r3, #2
 8004ece:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa93 f3a3 	rbit	r3, r3
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	4b9a      	ldr	r3, [pc, #616]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004edc:	2202      	movs	r2, #2
 8004ede:	613a      	str	r2, [r7, #16]
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	fa92 f2a2 	rbit	r2, r2
 8004ee6:	60fa      	str	r2, [r7, #12]
  return result;
 8004ee8:	68fa      	ldr	r2, [r7, #12]
 8004eea:	fab2 f282 	clz	r2, r2
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ef4:	b2d2      	uxtb	r2, r2
 8004ef6:	f002 021f 	and.w	r2, r2, #31
 8004efa:	2101      	movs	r1, #1
 8004efc:	fa01 f202 	lsl.w	r2, r1, r2
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d0b9      	beq.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004f06:	4b8f      	ldr	r3, [pc, #572]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	498c      	ldr	r1, [pc, #560]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f18:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d105      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f20:	4b88      	ldr	r3, [pc, #544]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	4a87      	ldr	r2, [pc, #540]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f2a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d008      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f38:	4b82      	ldr	r3, [pc, #520]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f3c:	f023 0203 	bic.w	r2, r3, #3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	497f      	ldr	r1, [pc, #508]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d008      	beq.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f56:	4b7b      	ldr	r3, [pc, #492]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f5a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	4978      	ldr	r1, [pc, #480]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f64:	4313      	orrs	r3, r2
 8004f66:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d008      	beq.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f74:	4b73      	ldr	r3, [pc, #460]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f78:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	4970      	ldr	r1, [pc, #448]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d008      	beq.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f92:	4b6c      	ldr	r3, [pc, #432]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f96:	f023 0210 	bic.w	r2, r3, #16
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69db      	ldr	r3, [r3, #28]
 8004f9e:	4969      	ldr	r1, [pc, #420]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d008      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004fb0:	4b64      	ldr	r3, [pc, #400]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	4961      	ldr	r1, [pc, #388]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d008      	beq.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004fce:	4b5d      	ldr	r3, [pc, #372]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fd2:	f023 0220 	bic.w	r2, r3, #32
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a1b      	ldr	r3, [r3, #32]
 8004fda:	495a      	ldr	r1, [pc, #360]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d008      	beq.n	8004ffe <HAL_RCCEx_PeriphCLKConfig+0x29a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004fec:	4b55      	ldr	r3, [pc, #340]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ff0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff8:	4952      	ldr	r1, [pc, #328]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0308 	and.w	r3, r3, #8
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800500a:	4b4e      	ldr	r3, [pc, #312]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800500c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800500e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	494b      	ldr	r1, [pc, #300]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005018:	4313      	orrs	r3, r2
 800501a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0310 	and.w	r3, r3, #16
 8005024:	2b00      	cmp	r3, #0
 8005026:	d008      	beq.n	800503a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005028:	4b46      	ldr	r3, [pc, #280]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	4943      	ldr	r1, [pc, #268]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005036:	4313      	orrs	r3, r2
 8005038:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005042:	2b00      	cmp	r3, #0
 8005044:	d008      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005046:	4b3f      	ldr	r3, [pc, #252]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005052:	493c      	ldr	r1, [pc, #240]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005060:	2b00      	cmp	r3, #0
 8005062:	d008      	beq.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005064:	4b37      	ldr	r3, [pc, #220]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005066:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005068:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005070:	4934      	ldr	r1, [pc, #208]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005072:	4313      	orrs	r3, r2
 8005074:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800507e:	2b00      	cmp	r3, #0
 8005080:	d008      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8005082:	4b30      	ldr	r3, [pc, #192]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005086:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800508e:	492d      	ldr	r1, [pc, #180]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005090:	4313      	orrs	r3, r2
 8005092:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d008      	beq.n	80050b2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80050a0:	4b28      	ldr	r3, [pc, #160]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050ac:	4925      	ldr	r1, [pc, #148]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ae:	4313      	orrs	r3, r2
 80050b0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d008      	beq.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80050be:	4b21      	ldr	r3, [pc, #132]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	491e      	ldr	r1, [pc, #120]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050cc:	4313      	orrs	r3, r2
 80050ce:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d008      	beq.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80050dc:	4b19      	ldr	r3, [pc, #100]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050e0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050e8:	4916      	ldr	r1, [pc, #88]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d008      	beq.n	800510c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80050fa:	4b12      	ldr	r3, [pc, #72]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050fe:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005106:	490f      	ldr	r1, [pc, #60]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005108:	4313      	orrs	r3, r2
 800510a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d008      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005118:	4b0a      	ldr	r3, [pc, #40]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800511c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005124:	4907      	ldr	r1, [pc, #28]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00c      	beq.n	8005150 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8005136:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	e002      	b.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005142:	bf00      	nop
 8005144:	40021000 	.word	0x40021000
 8005148:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800514a:	4913      	ldr	r1, [pc, #76]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800514c:	4313      	orrs	r3, r2
 800514e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 800515c:	4b0e      	ldr	r3, [pc, #56]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800515e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005160:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005168:	490b      	ldr	r1, [pc, #44]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800516a:	4313      	orrs	r3, r2
 800516c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d008      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x428>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 800517a:	4b07      	ldr	r3, [pc, #28]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 800517c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005186:	4904      	ldr	r1, [pc, #16]	@ (8005198 <HAL_RCCEx_PeriphCLKConfig+0x434>)
 8005188:	4313      	orrs	r3, r2
 800518a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3748      	adds	r7, #72	@ 0x48
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	40021000 	.word	0x40021000

0800519c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b082      	sub	sp, #8
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d101      	bne.n	80051ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e049      	b.n	8005242 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051b4:	b2db      	uxtb	r3, r3
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d106      	bne.n	80051c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fc fbc0 	bl	8001948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681a      	ldr	r2, [r3, #0]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	3304      	adds	r3, #4
 80051d8:	4619      	mov	r1, r3
 80051da:	4610      	mov	r0, r2
 80051dc:	f000 ff50 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2201      	movs	r2, #1
 800523c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d001      	beq.n	8005264 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005260:	2301      	movs	r3, #1
 8005262:	e04f      	b.n	8005304 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a23      	ldr	r2, [pc, #140]	@ (8005310 <HAL_TIM_Base_Start_IT+0xc4>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d01d      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0x76>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800528e:	d018      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0x76>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a1f      	ldr	r2, [pc, #124]	@ (8005314 <HAL_TIM_Base_Start_IT+0xc8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d013      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0x76>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a1e      	ldr	r2, [pc, #120]	@ (8005318 <HAL_TIM_Base_Start_IT+0xcc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00e      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0x76>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a1c      	ldr	r2, [pc, #112]	@ (800531c <HAL_TIM_Base_Start_IT+0xd0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d009      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0x76>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a1b      	ldr	r2, [pc, #108]	@ (8005320 <HAL_TIM_Base_Start_IT+0xd4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d004      	beq.n	80052c2 <HAL_TIM_Base_Start_IT+0x76>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a19      	ldr	r2, [pc, #100]	@ (8005324 <HAL_TIM_Base_Start_IT+0xd8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d115      	bne.n	80052ee <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	4b17      	ldr	r3, [pc, #92]	@ (8005328 <HAL_TIM_Base_Start_IT+0xdc>)
 80052ca:	4013      	ands	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	2b06      	cmp	r3, #6
 80052d2:	d015      	beq.n	8005300 <HAL_TIM_Base_Start_IT+0xb4>
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052da:	d011      	beq.n	8005300 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	681a      	ldr	r2, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f042 0201 	orr.w	r2, r2, #1
 80052ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052ec:	e008      	b.n	8005300 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f042 0201 	orr.w	r2, r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
 80052fe:	e000      	b.n	8005302 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005300:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3714      	adds	r7, #20
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40012c00 	.word	0x40012c00
 8005314:	40000400 	.word	0x40000400
 8005318:	40000800 	.word	0x40000800
 800531c:	40013400 	.word	0x40013400
 8005320:	40014000 	.word	0x40014000
 8005324:	40015000 	.word	0x40015000
 8005328:	00010007 	.word	0x00010007

0800532c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b082      	sub	sp, #8
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e049      	b.n	80053d2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b00      	cmp	r3, #0
 8005348:	d106      	bne.n	8005358 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f841 	bl	80053da <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	3304      	adds	r3, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4610      	mov	r0, r2
 800536c:	f000 fe88 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	3708      	adds	r7, #8
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}

080053da <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80053da:	b480      	push	{r7}
 80053dc:	b083      	sub	sp, #12
 80053de:	af00      	add	r7, sp, #0
 80053e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80053e2:	bf00      	nop
 80053e4:	370c      	adds	r7, #12
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
	...

080053f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d109      	bne.n	8005414 <HAL_TIM_PWM_Start+0x24>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005406:	b2db      	uxtb	r3, r3
 8005408:	2b01      	cmp	r3, #1
 800540a:	bf14      	ite	ne
 800540c:	2301      	movne	r3, #1
 800540e:	2300      	moveq	r3, #0
 8005410:	b2db      	uxtb	r3, r3
 8005412:	e03c      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	2b04      	cmp	r3, #4
 8005418:	d109      	bne.n	800542e <HAL_TIM_PWM_Start+0x3e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b01      	cmp	r3, #1
 8005424:	bf14      	ite	ne
 8005426:	2301      	movne	r3, #1
 8005428:	2300      	moveq	r3, #0
 800542a:	b2db      	uxtb	r3, r3
 800542c:	e02f      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d109      	bne.n	8005448 <HAL_TIM_PWM_Start+0x58>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b01      	cmp	r3, #1
 800543e:	bf14      	ite	ne
 8005440:	2301      	movne	r3, #1
 8005442:	2300      	moveq	r3, #0
 8005444:	b2db      	uxtb	r3, r3
 8005446:	e022      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b0c      	cmp	r3, #12
 800544c:	d109      	bne.n	8005462 <HAL_TIM_PWM_Start+0x72>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b01      	cmp	r3, #1
 8005458:	bf14      	ite	ne
 800545a:	2301      	movne	r3, #1
 800545c:	2300      	moveq	r3, #0
 800545e:	b2db      	uxtb	r3, r3
 8005460:	e015      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b10      	cmp	r3, #16
 8005466:	d109      	bne.n	800547c <HAL_TIM_PWM_Start+0x8c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b01      	cmp	r3, #1
 8005472:	bf14      	ite	ne
 8005474:	2301      	movne	r3, #1
 8005476:	2300      	moveq	r3, #0
 8005478:	b2db      	uxtb	r3, r3
 800547a:	e008      	b.n	800548e <HAL_TIM_PWM_Start+0x9e>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005482:	b2db      	uxtb	r3, r3
 8005484:	2b01      	cmp	r3, #1
 8005486:	bf14      	ite	ne
 8005488:	2301      	movne	r3, #1
 800548a:	2300      	moveq	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	2b00      	cmp	r3, #0
 8005490:	d001      	beq.n	8005496 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e0a1      	b.n	80055da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d104      	bne.n	80054a6 <HAL_TIM_PWM_Start+0xb6>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80054a4:	e023      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d104      	bne.n	80054b6 <HAL_TIM_PWM_Start+0xc6>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80054b4:	e01b      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	2b08      	cmp	r3, #8
 80054ba:	d104      	bne.n	80054c6 <HAL_TIM_PWM_Start+0xd6>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2202      	movs	r2, #2
 80054c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80054c4:	e013      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b0c      	cmp	r3, #12
 80054ca:	d104      	bne.n	80054d6 <HAL_TIM_PWM_Start+0xe6>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80054d4:	e00b      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	2b10      	cmp	r3, #16
 80054da:	d104      	bne.n	80054e6 <HAL_TIM_PWM_Start+0xf6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80054e4:	e003      	b.n	80054ee <HAL_TIM_PWM_Start+0xfe>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2202      	movs	r2, #2
 80054ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2201      	movs	r2, #1
 80054f4:	6839      	ldr	r1, [r7, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f001 fb30 	bl	8006b5c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a38      	ldr	r2, [pc, #224]	@ (80055e4 <HAL_TIM_PWM_Start+0x1f4>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d018      	beq.n	8005538 <HAL_TIM_PWM_Start+0x148>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a37      	ldr	r2, [pc, #220]	@ (80055e8 <HAL_TIM_PWM_Start+0x1f8>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d013      	beq.n	8005538 <HAL_TIM_PWM_Start+0x148>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a35      	ldr	r2, [pc, #212]	@ (80055ec <HAL_TIM_PWM_Start+0x1fc>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d00e      	beq.n	8005538 <HAL_TIM_PWM_Start+0x148>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a34      	ldr	r2, [pc, #208]	@ (80055f0 <HAL_TIM_PWM_Start+0x200>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d009      	beq.n	8005538 <HAL_TIM_PWM_Start+0x148>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a32      	ldr	r2, [pc, #200]	@ (80055f4 <HAL_TIM_PWM_Start+0x204>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d004      	beq.n	8005538 <HAL_TIM_PWM_Start+0x148>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a31      	ldr	r2, [pc, #196]	@ (80055f8 <HAL_TIM_PWM_Start+0x208>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d101      	bne.n	800553c <HAL_TIM_PWM_Start+0x14c>
 8005538:	2301      	movs	r3, #1
 800553a:	e000      	b.n	800553e <HAL_TIM_PWM_Start+0x14e>
 800553c:	2300      	movs	r3, #0
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005550:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a23      	ldr	r2, [pc, #140]	@ (80055e4 <HAL_TIM_PWM_Start+0x1f4>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d01d      	beq.n	8005598 <HAL_TIM_PWM_Start+0x1a8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005564:	d018      	beq.n	8005598 <HAL_TIM_PWM_Start+0x1a8>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a24      	ldr	r2, [pc, #144]	@ (80055fc <HAL_TIM_PWM_Start+0x20c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d013      	beq.n	8005598 <HAL_TIM_PWM_Start+0x1a8>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a22      	ldr	r2, [pc, #136]	@ (8005600 <HAL_TIM_PWM_Start+0x210>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00e      	beq.n	8005598 <HAL_TIM_PWM_Start+0x1a8>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1a      	ldr	r2, [pc, #104]	@ (80055e8 <HAL_TIM_PWM_Start+0x1f8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d009      	beq.n	8005598 <HAL_TIM_PWM_Start+0x1a8>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a18      	ldr	r2, [pc, #96]	@ (80055ec <HAL_TIM_PWM_Start+0x1fc>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d004      	beq.n	8005598 <HAL_TIM_PWM_Start+0x1a8>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <HAL_TIM_PWM_Start+0x208>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d115      	bne.n	80055c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689a      	ldr	r2, [r3, #8]
 800559e:	4b19      	ldr	r3, [pc, #100]	@ (8005604 <HAL_TIM_PWM_Start+0x214>)
 80055a0:	4013      	ands	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2b06      	cmp	r3, #6
 80055a8:	d015      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x1e6>
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80055b0:	d011      	beq.n	80055d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f042 0201 	orr.w	r2, r2, #1
 80055c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055c2:	e008      	b.n	80055d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	e000      	b.n	80055d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3710      	adds	r7, #16
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
 80055e2:	bf00      	nop
 80055e4:	40012c00 	.word	0x40012c00
 80055e8:	40013400 	.word	0x40013400
 80055ec:	40014000 	.word	0x40014000
 80055f0:	40014400 	.word	0x40014400
 80055f4:	40014800 	.word	0x40014800
 80055f8:	40015000 	.word	0x40015000
 80055fc:	40000400 	.word	0x40000400
 8005600:	40000800 	.word	0x40000800
 8005604:	00010007 	.word	0x00010007

08005608 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b082      	sub	sp, #8
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e049      	b.n	80056ae <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005620:	b2db      	uxtb	r3, r3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d106      	bne.n	8005634 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f000 f841 	bl	80056b6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2202      	movs	r2, #2
 8005638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	3304      	adds	r3, #4
 8005644:	4619      	mov	r1, r3
 8005646:	4610      	mov	r0, r2
 8005648:	f000 fd1a 	bl	8006080 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3708      	adds	r7, #8
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b083      	sub	sp, #12
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d104      	bne.n	80056e6 <HAL_TIM_IC_Start+0x1a>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	e023      	b.n	800572e <HAL_TIM_IC_Start+0x62>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b04      	cmp	r3, #4
 80056ea:	d104      	bne.n	80056f6 <HAL_TIM_IC_Start+0x2a>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e01b      	b.n	800572e <HAL_TIM_IC_Start+0x62>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b08      	cmp	r3, #8
 80056fa:	d104      	bne.n	8005706 <HAL_TIM_IC_Start+0x3a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005702:	b2db      	uxtb	r3, r3
 8005704:	e013      	b.n	800572e <HAL_TIM_IC_Start+0x62>
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	2b0c      	cmp	r3, #12
 800570a:	d104      	bne.n	8005716 <HAL_TIM_IC_Start+0x4a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005712:	b2db      	uxtb	r3, r3
 8005714:	e00b      	b.n	800572e <HAL_TIM_IC_Start+0x62>
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	2b10      	cmp	r3, #16
 800571a:	d104      	bne.n	8005726 <HAL_TIM_IC_Start+0x5a>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005722:	b2db      	uxtb	r3, r3
 8005724:	e003      	b.n	800572e <HAL_TIM_IC_Start+0x62>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800572c:	b2db      	uxtb	r3, r3
 800572e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d104      	bne.n	8005740 <HAL_TIM_IC_Start+0x74>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e013      	b.n	8005768 <HAL_TIM_IC_Start+0x9c>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d104      	bne.n	8005750 <HAL_TIM_IC_Start+0x84>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e00b      	b.n	8005768 <HAL_TIM_IC_Start+0x9c>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b08      	cmp	r3, #8
 8005754:	d104      	bne.n	8005760 <HAL_TIM_IC_Start+0x94>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800575c:	b2db      	uxtb	r3, r3
 800575e:	e003      	b.n	8005768 <HAL_TIM_IC_Start+0x9c>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8005766:	b2db      	uxtb	r3, r3
 8005768:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800576a:	7bfb      	ldrb	r3, [r7, #15]
 800576c:	2b01      	cmp	r3, #1
 800576e:	d102      	bne.n	8005776 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005770:	7bbb      	ldrb	r3, [r7, #14]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d001      	beq.n	800577a <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e092      	b.n	80058a0 <HAL_TIM_IC_Start+0x1d4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d104      	bne.n	800578a <HAL_TIM_IC_Start+0xbe>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005788:	e023      	b.n	80057d2 <HAL_TIM_IC_Start+0x106>
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	2b04      	cmp	r3, #4
 800578e:	d104      	bne.n	800579a <HAL_TIM_IC_Start+0xce>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005798:	e01b      	b.n	80057d2 <HAL_TIM_IC_Start+0x106>
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	2b08      	cmp	r3, #8
 800579e:	d104      	bne.n	80057aa <HAL_TIM_IC_Start+0xde>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80057a8:	e013      	b.n	80057d2 <HAL_TIM_IC_Start+0x106>
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	2b0c      	cmp	r3, #12
 80057ae:	d104      	bne.n	80057ba <HAL_TIM_IC_Start+0xee>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80057b8:	e00b      	b.n	80057d2 <HAL_TIM_IC_Start+0x106>
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	2b10      	cmp	r3, #16
 80057be:	d104      	bne.n	80057ca <HAL_TIM_IC_Start+0xfe>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2202      	movs	r2, #2
 80057c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80057c8:	e003      	b.n	80057d2 <HAL_TIM_IC_Start+0x106>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2202      	movs	r2, #2
 80057ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_IC_Start+0x116>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e0:	e013      	b.n	800580a <HAL_TIM_IC_Start+0x13e>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_IC_Start+0x126>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f0:	e00b      	b.n	800580a <HAL_TIM_IC_Start+0x13e>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_IC_Start+0x136>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005800:	e003      	b.n	800580a <HAL_TIM_IC_Start+0x13e>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2202      	movs	r2, #2
 8005806:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2201      	movs	r2, #1
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f001 f9a2 	bl	8006b5c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a22      	ldr	r2, [pc, #136]	@ (80058a8 <HAL_TIM_IC_Start+0x1dc>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d01d      	beq.n	800585e <HAL_TIM_IC_Start+0x192>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800582a:	d018      	beq.n	800585e <HAL_TIM_IC_Start+0x192>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a1e      	ldr	r2, [pc, #120]	@ (80058ac <HAL_TIM_IC_Start+0x1e0>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d013      	beq.n	800585e <HAL_TIM_IC_Start+0x192>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1d      	ldr	r2, [pc, #116]	@ (80058b0 <HAL_TIM_IC_Start+0x1e4>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d00e      	beq.n	800585e <HAL_TIM_IC_Start+0x192>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a1b      	ldr	r2, [pc, #108]	@ (80058b4 <HAL_TIM_IC_Start+0x1e8>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d009      	beq.n	800585e <HAL_TIM_IC_Start+0x192>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a1a      	ldr	r2, [pc, #104]	@ (80058b8 <HAL_TIM_IC_Start+0x1ec>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d004      	beq.n	800585e <HAL_TIM_IC_Start+0x192>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a18      	ldr	r2, [pc, #96]	@ (80058bc <HAL_TIM_IC_Start+0x1f0>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d115      	bne.n	800588a <HAL_TIM_IC_Start+0x1be>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	689a      	ldr	r2, [r3, #8]
 8005864:	4b16      	ldr	r3, [pc, #88]	@ (80058c0 <HAL_TIM_IC_Start+0x1f4>)
 8005866:	4013      	ands	r3, r2
 8005868:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2b06      	cmp	r3, #6
 800586e:	d015      	beq.n	800589c <HAL_TIM_IC_Start+0x1d0>
 8005870:	68bb      	ldr	r3, [r7, #8]
 8005872:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005876:	d011      	beq.n	800589c <HAL_TIM_IC_Start+0x1d0>
    {
      __HAL_TIM_ENABLE(htim);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f042 0201 	orr.w	r2, r2, #1
 8005886:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005888:	e008      	b.n	800589c <HAL_TIM_IC_Start+0x1d0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
 800589a:	e000      	b.n	800589e <HAL_TIM_IC_Start+0x1d2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}
 80058a8:	40012c00 	.word	0x40012c00
 80058ac:	40000400 	.word	0x40000400
 80058b0:	40000800 	.word	0x40000800
 80058b4:	40013400 	.word	0x40013400
 80058b8:	40014000 	.word	0x40014000
 80058bc:	40015000 	.word	0x40015000
 80058c0:	00010007 	.word	0x00010007

080058c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68db      	ldr	r3, [r3, #12]
 80058d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	f003 0302 	and.w	r3, r3, #2
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d020      	beq.n	8005928 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d01b      	beq.n	8005928 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f06f 0202 	mvn.w	r2, #2
 80058f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	699b      	ldr	r3, [r3, #24]
 8005906:	f003 0303 	and.w	r3, r3, #3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fb f98a 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8005914:	e005      	b.n	8005922 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 fb94 	bl	8006044 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fb9b 	bl	8006058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d020      	beq.n	8005974 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f003 0304 	and.w	r3, r3, #4
 8005938:	2b00      	cmp	r3, #0
 800593a:	d01b      	beq.n	8005974 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f06f 0204 	mvn.w	r2, #4
 8005944:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2202      	movs	r2, #2
 800594a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7fb f964 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 8005960:	e005      	b.n	800596e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fb6e 	bl	8006044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fb75 	bl	8006058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	f003 0308 	and.w	r3, r3, #8
 800597a:	2b00      	cmp	r3, #0
 800597c:	d020      	beq.n	80059c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0308 	and.w	r3, r3, #8
 8005984:	2b00      	cmp	r3, #0
 8005986:	d01b      	beq.n	80059c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f06f 0208 	mvn.w	r2, #8
 8005990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2204      	movs	r2, #4
 8005996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	69db      	ldr	r3, [r3, #28]
 800599e:	f003 0303 	and.w	r3, r3, #3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d003      	beq.n	80059ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	f7fb f93e 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 80059ac:	e005      	b.n	80059ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fb48 	bl	8006044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fb4f 	bl	8006058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	f003 0310 	and.w	r3, r3, #16
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d020      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d01b      	beq.n	8005a0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f06f 0210 	mvn.w	r2, #16
 80059dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2208      	movs	r2, #8
 80059e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f7fb f918 	bl	8000c28 <HAL_TIM_IC_CaptureCallback>
 80059f8:	e005      	b.n	8005a06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 fb22 	bl	8006044 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fb29 	bl	8006058 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00c      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d007      	beq.n	8005a30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0201 	mvn.w	r2, #1
 8005a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fb f93e 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00c      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d007      	beq.n	8005a54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f001 f9c6 	bl	8006de0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00c      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f001 f9be 	bl	8006df4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a78:	68bb      	ldr	r3, [r7, #8]
 8005a7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00c      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d007      	beq.n	8005a9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fae8 	bl	800606c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f003 0320 	and.w	r3, r3, #32
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00c      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f003 0320 	and.w	r3, r3, #32
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d007      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f06f 0220 	mvn.w	r2, #32
 8005ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 f986 	bl	8006dcc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}

08005ac8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d101      	bne.n	8005ae6 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005ae2:	2302      	movs	r3, #2
 8005ae4:	e088      	b.n	8005bf8 <HAL_TIM_IC_ConfigChannel+0x130>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d11b      	bne.n	8005b2c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005b04:	f000 fe6c 	bl	80067e0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	699a      	ldr	r2, [r3, #24]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 020c 	bic.w	r2, r2, #12
 8005b16:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	6999      	ldr	r1, [r3, #24]
 8005b1e:	68bb      	ldr	r3, [r7, #8]
 8005b20:	689a      	ldr	r2, [r3, #8]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	430a      	orrs	r2, r1
 8005b28:	619a      	str	r2, [r3, #24]
 8005b2a:	e060      	b.n	8005bee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d11c      	bne.n	8005b6c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b3a:	68bb      	ldr	r3, [r7, #8]
 8005b3c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8005b42:	f000 feea 	bl	800691a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699a      	ldr	r2, [r3, #24]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005b54:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6999      	ldr	r1, [r3, #24]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	021a      	lsls	r2, r3, #8
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	430a      	orrs	r2, r1
 8005b68:	619a      	str	r2, [r3, #24]
 8005b6a:	e040      	b.n	8005bee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2b08      	cmp	r3, #8
 8005b70:	d11b      	bne.n	8005baa <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8005b82:	f000 ff37 	bl	80069f4 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69da      	ldr	r2, [r3, #28]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f022 020c 	bic.w	r2, r2, #12
 8005b94:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	69d9      	ldr	r1, [r3, #28]
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	61da      	str	r2, [r3, #28]
 8005ba8:	e021      	b.n	8005bee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2b0c      	cmp	r3, #12
 8005bae:	d11c      	bne.n	8005bea <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8005bc0:	f000 ff54 	bl	8006a6c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	69da      	ldr	r2, [r3, #28]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005bd2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69d9      	ldr	r1, [r3, #28]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	021a      	lsls	r2, r3, #8
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	61da      	str	r2, [r3, #28]
 8005be8:	e001      	b.n	8005bee <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005bf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3718      	adds	r7, #24
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b086      	sub	sp, #24
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	60f8      	str	r0, [r7, #12]
 8005c08:	60b9      	str	r1, [r7, #8]
 8005c0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	e0ff      	b.n	8005e1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2b14      	cmp	r3, #20
 8005c2a:	f200 80f0 	bhi.w	8005e0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005c2e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	08005c89 	.word	0x08005c89
 8005c38:	08005e0f 	.word	0x08005e0f
 8005c3c:	08005e0f 	.word	0x08005e0f
 8005c40:	08005e0f 	.word	0x08005e0f
 8005c44:	08005cc9 	.word	0x08005cc9
 8005c48:	08005e0f 	.word	0x08005e0f
 8005c4c:	08005e0f 	.word	0x08005e0f
 8005c50:	08005e0f 	.word	0x08005e0f
 8005c54:	08005d0b 	.word	0x08005d0b
 8005c58:	08005e0f 	.word	0x08005e0f
 8005c5c:	08005e0f 	.word	0x08005e0f
 8005c60:	08005e0f 	.word	0x08005e0f
 8005c64:	08005d4b 	.word	0x08005d4b
 8005c68:	08005e0f 	.word	0x08005e0f
 8005c6c:	08005e0f 	.word	0x08005e0f
 8005c70:	08005e0f 	.word	0x08005e0f
 8005c74:	08005d8d 	.word	0x08005d8d
 8005c78:	08005e0f 	.word	0x08005e0f
 8005c7c:	08005e0f 	.word	0x08005e0f
 8005c80:	08005e0f 	.word	0x08005e0f
 8005c84:	08005dcd 	.word	0x08005dcd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68b9      	ldr	r1, [r7, #8]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 faa0 	bl	80061d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	699a      	ldr	r2, [r3, #24]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f042 0208 	orr.w	r2, r2, #8
 8005ca2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	699a      	ldr	r2, [r3, #24]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0204 	bic.w	r2, r2, #4
 8005cb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	6999      	ldr	r1, [r3, #24]
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	691a      	ldr	r2, [r3, #16]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	619a      	str	r2, [r3, #24]
      break;
 8005cc6:	e0a5      	b.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68b9      	ldr	r1, [r7, #8]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f000 fb1a 	bl	8006308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	699a      	ldr	r2, [r3, #24]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	699a      	ldr	r2, [r3, #24]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	6999      	ldr	r1, [r3, #24]
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	021a      	lsls	r2, r3, #8
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	619a      	str	r2, [r3, #24]
      break;
 8005d08:	e084      	b.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 fb8d 	bl	8006430 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	69da      	ldr	r2, [r3, #28]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f042 0208 	orr.w	r2, r2, #8
 8005d24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	69da      	ldr	r2, [r3, #28]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f022 0204 	bic.w	r2, r2, #4
 8005d34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	69d9      	ldr	r1, [r3, #28]
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	691a      	ldr	r2, [r3, #16]
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	430a      	orrs	r2, r1
 8005d46:	61da      	str	r2, [r3, #28]
      break;
 8005d48:	e064      	b.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68b9      	ldr	r1, [r7, #8]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f000 fbff 	bl	8006554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69da      	ldr	r2, [r3, #28]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	69da      	ldr	r2, [r3, #28]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	69d9      	ldr	r1, [r3, #28]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	691b      	ldr	r3, [r3, #16]
 8005d80:	021a      	lsls	r2, r3, #8
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	430a      	orrs	r2, r1
 8005d88:	61da      	str	r2, [r3, #28]
      break;
 8005d8a:	e043      	b.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fc4e 	bl	8006634 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0208 	orr.w	r2, r2, #8
 8005da6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0204 	bic.w	r2, r2, #4
 8005db6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005dca:	e023      	b.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fc98 	bl	8006708 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005de6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005e0c:	e002      	b.n	8005e14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	75fb      	strb	r3, [r7, #23]
      break;
 8005e12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3718      	adds	r7, #24
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	bf00      	nop

08005e28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
 8005e30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d101      	bne.n	8005e44 <HAL_TIM_ConfigClockSource+0x1c>
 8005e40:	2302      	movs	r3, #2
 8005e42:	e0b6      	b.n	8005fb2 <HAL_TIM_ConfigClockSource+0x18a>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2201      	movs	r2, #1
 8005e48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005e6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68ba      	ldr	r2, [r7, #8]
 8005e76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e80:	d03e      	beq.n	8005f00 <HAL_TIM_ConfigClockSource+0xd8>
 8005e82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e86:	f200 8087 	bhi.w	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005e8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e8e:	f000 8086 	beq.w	8005f9e <HAL_TIM_ConfigClockSource+0x176>
 8005e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e96:	d87f      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005e98:	2b70      	cmp	r3, #112	@ 0x70
 8005e9a:	d01a      	beq.n	8005ed2 <HAL_TIM_ConfigClockSource+0xaa>
 8005e9c:	2b70      	cmp	r3, #112	@ 0x70
 8005e9e:	d87b      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005ea0:	2b60      	cmp	r3, #96	@ 0x60
 8005ea2:	d050      	beq.n	8005f46 <HAL_TIM_ConfigClockSource+0x11e>
 8005ea4:	2b60      	cmp	r3, #96	@ 0x60
 8005ea6:	d877      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005ea8:	2b50      	cmp	r3, #80	@ 0x50
 8005eaa:	d03c      	beq.n	8005f26 <HAL_TIM_ConfigClockSource+0xfe>
 8005eac:	2b50      	cmp	r3, #80	@ 0x50
 8005eae:	d873      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005eb0:	2b40      	cmp	r3, #64	@ 0x40
 8005eb2:	d058      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0x13e>
 8005eb4:	2b40      	cmp	r3, #64	@ 0x40
 8005eb6:	d86f      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005eb8:	2b30      	cmp	r3, #48	@ 0x30
 8005eba:	d064      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15e>
 8005ebc:	2b30      	cmp	r3, #48	@ 0x30
 8005ebe:	d86b      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005ec0:	2b20      	cmp	r3, #32
 8005ec2:	d060      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15e>
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d867      	bhi.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d05c      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15e>
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d05a      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x15e>
 8005ed0:	e062      	b.n	8005f98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005ee2:	f000 fe1b 	bl	8006b1c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005ef4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68ba      	ldr	r2, [r7, #8]
 8005efc:	609a      	str	r2, [r3, #8]
      break;
 8005efe:	e04f      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f10:	f000 fe04 	bl	8006b1c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	689a      	ldr	r2, [r3, #8]
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f22:	609a      	str	r2, [r3, #8]
      break;
 8005f24:	e03c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f32:	461a      	mov	r2, r3
 8005f34:	f000 fcc2 	bl	80068bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2150      	movs	r1, #80	@ 0x50
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 fdd1 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8005f44:	e02c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f52:	461a      	mov	r2, r3
 8005f54:	f000 fd1e 	bl	8006994 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2160      	movs	r1, #96	@ 0x60
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f000 fdc1 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8005f64:	e01c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f72:	461a      	mov	r2, r3
 8005f74:	f000 fca2 	bl	80068bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2140      	movs	r1, #64	@ 0x40
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 fdb1 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8005f84:	e00c      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681a      	ldr	r2, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4619      	mov	r1, r3
 8005f90:	4610      	mov	r0, r2
 8005f92:	f000 fda8 	bl	8006ae6 <TIM_ITRx_SetConfig>
      break;
 8005f96:	e003      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f9c:	e000      	b.n	8005fa0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3710      	adds	r7, #16
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
	...

08005fbc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	2b0c      	cmp	r3, #12
 8005fce:	d831      	bhi.n	8006034 <HAL_TIM_ReadCapturedValue+0x78>
 8005fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fd8 <HAL_TIM_ReadCapturedValue+0x1c>)
 8005fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd6:	bf00      	nop
 8005fd8:	0800600d 	.word	0x0800600d
 8005fdc:	08006035 	.word	0x08006035
 8005fe0:	08006035 	.word	0x08006035
 8005fe4:	08006035 	.word	0x08006035
 8005fe8:	08006017 	.word	0x08006017
 8005fec:	08006035 	.word	0x08006035
 8005ff0:	08006035 	.word	0x08006035
 8005ff4:	08006035 	.word	0x08006035
 8005ff8:	08006021 	.word	0x08006021
 8005ffc:	08006035 	.word	0x08006035
 8006000:	08006035 	.word	0x08006035
 8006004:	08006035 	.word	0x08006035
 8006008:	0800602b 	.word	0x0800602b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006012:	60fb      	str	r3, [r7, #12]

      break;
 8006014:	e00f      	b.n	8006036 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601c:	60fb      	str	r3, [r7, #12]

      break;
 800601e:	e00a      	b.n	8006036 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006026:	60fb      	str	r3, [r7, #12]

      break;
 8006028:	e005      	b.n	8006036 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006030:	60fb      	str	r3, [r7, #12]

      break;
 8006032:	e000      	b.n	8006036 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006034:	bf00      	nop
  }

  return tmpreg;
 8006036:	68fb      	ldr	r3, [r7, #12]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3714      	adds	r7, #20
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr

08006044 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	4a48      	ldr	r2, [pc, #288]	@ (80061b4 <TIM_Base_SetConfig+0x134>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d013      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800609e:	d00f      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	4a45      	ldr	r2, [pc, #276]	@ (80061b8 <TIM_Base_SetConfig+0x138>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d00b      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a44      	ldr	r2, [pc, #272]	@ (80061bc <TIM_Base_SetConfig+0x13c>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d007      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a43      	ldr	r2, [pc, #268]	@ (80061c0 <TIM_Base_SetConfig+0x140>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d003      	beq.n	80060c0 <TIM_Base_SetConfig+0x40>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	4a42      	ldr	r2, [pc, #264]	@ (80061c4 <TIM_Base_SetConfig+0x144>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d108      	bne.n	80060d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80060c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a37      	ldr	r2, [pc, #220]	@ (80061b4 <TIM_Base_SetConfig+0x134>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d01f      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060e0:	d01b      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a34      	ldr	r2, [pc, #208]	@ (80061b8 <TIM_Base_SetConfig+0x138>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d017      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a33      	ldr	r2, [pc, #204]	@ (80061bc <TIM_Base_SetConfig+0x13c>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d013      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a32      	ldr	r2, [pc, #200]	@ (80061c0 <TIM_Base_SetConfig+0x140>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d00f      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	4a32      	ldr	r2, [pc, #200]	@ (80061c8 <TIM_Base_SetConfig+0x148>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d00b      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	4a31      	ldr	r2, [pc, #196]	@ (80061cc <TIM_Base_SetConfig+0x14c>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d007      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	4a30      	ldr	r2, [pc, #192]	@ (80061d0 <TIM_Base_SetConfig+0x150>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d003      	beq.n	800611a <TIM_Base_SetConfig+0x9a>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a2b      	ldr	r2, [pc, #172]	@ (80061c4 <TIM_Base_SetConfig+0x144>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d108      	bne.n	800612c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006120:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	4313      	orrs	r3, r2
 8006138:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68fa      	ldr	r2, [r7, #12]
 800613e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	689a      	ldr	r2, [r3, #8]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a18      	ldr	r2, [pc, #96]	@ (80061b4 <TIM_Base_SetConfig+0x134>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <TIM_Base_SetConfig+0x100>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	4a19      	ldr	r2, [pc, #100]	@ (80061c0 <TIM_Base_SetConfig+0x140>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d00f      	beq.n	8006180 <TIM_Base_SetConfig+0x100>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	4a19      	ldr	r2, [pc, #100]	@ (80061c8 <TIM_Base_SetConfig+0x148>)
 8006164:	4293      	cmp	r3, r2
 8006166:	d00b      	beq.n	8006180 <TIM_Base_SetConfig+0x100>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	4a18      	ldr	r2, [pc, #96]	@ (80061cc <TIM_Base_SetConfig+0x14c>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d007      	beq.n	8006180 <TIM_Base_SetConfig+0x100>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4a17      	ldr	r2, [pc, #92]	@ (80061d0 <TIM_Base_SetConfig+0x150>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d003      	beq.n	8006180 <TIM_Base_SetConfig+0x100>
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	4a12      	ldr	r2, [pc, #72]	@ (80061c4 <TIM_Base_SetConfig+0x144>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d103      	bne.n	8006188 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	691a      	ldr	r2, [r3, #16]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b01      	cmp	r3, #1
 8006198:	d105      	bne.n	80061a6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	f023 0201 	bic.w	r2, r3, #1
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	611a      	str	r2, [r3, #16]
  }
}
 80061a6:	bf00      	nop
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40013400 	.word	0x40013400
 80061c4:	40015000 	.word	0x40015000
 80061c8:	40014000 	.word	0x40014000
 80061cc:	40014400 	.word	0x40014400
 80061d0:	40014800 	.word	0x40014800

080061d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	f023 0201 	bic.w	r2, r3, #1
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f023 0303 	bic.w	r3, r3, #3
 800620e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800621a:	697b      	ldr	r3, [r7, #20]
 800621c:	f023 0302 	bic.w	r3, r3, #2
 8006220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	689b      	ldr	r3, [r3, #8]
 8006226:	697a      	ldr	r2, [r7, #20]
 8006228:	4313      	orrs	r3, r2
 800622a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4a30      	ldr	r2, [pc, #192]	@ (80062f0 <TIM_OC1_SetConfig+0x11c>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d013      	beq.n	800625c <TIM_OC1_SetConfig+0x88>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	4a2f      	ldr	r2, [pc, #188]	@ (80062f4 <TIM_OC1_SetConfig+0x120>)
 8006238:	4293      	cmp	r3, r2
 800623a:	d00f      	beq.n	800625c <TIM_OC1_SetConfig+0x88>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a2e      	ldr	r2, [pc, #184]	@ (80062f8 <TIM_OC1_SetConfig+0x124>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d00b      	beq.n	800625c <TIM_OC1_SetConfig+0x88>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	4a2d      	ldr	r2, [pc, #180]	@ (80062fc <TIM_OC1_SetConfig+0x128>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d007      	beq.n	800625c <TIM_OC1_SetConfig+0x88>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	4a2c      	ldr	r2, [pc, #176]	@ (8006300 <TIM_OC1_SetConfig+0x12c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d003      	beq.n	800625c <TIM_OC1_SetConfig+0x88>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a2b      	ldr	r2, [pc, #172]	@ (8006304 <TIM_OC1_SetConfig+0x130>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10c      	bne.n	8006276 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0308 	bic.w	r3, r3, #8
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	4313      	orrs	r3, r2
 800626c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	f023 0304 	bic.w	r3, r3, #4
 8006274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a1d      	ldr	r2, [pc, #116]	@ (80062f0 <TIM_OC1_SetConfig+0x11c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d013      	beq.n	80062a6 <TIM_OC1_SetConfig+0xd2>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a1c      	ldr	r2, [pc, #112]	@ (80062f4 <TIM_OC1_SetConfig+0x120>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d00f      	beq.n	80062a6 <TIM_OC1_SetConfig+0xd2>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <TIM_OC1_SetConfig+0x124>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d00b      	beq.n	80062a6 <TIM_OC1_SetConfig+0xd2>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a1a      	ldr	r2, [pc, #104]	@ (80062fc <TIM_OC1_SetConfig+0x128>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d007      	beq.n	80062a6 <TIM_OC1_SetConfig+0xd2>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a19      	ldr	r2, [pc, #100]	@ (8006300 <TIM_OC1_SetConfig+0x12c>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d003      	beq.n	80062a6 <TIM_OC1_SetConfig+0xd2>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a18      	ldr	r2, [pc, #96]	@ (8006304 <TIM_OC1_SetConfig+0x130>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d111      	bne.n	80062ca <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	695b      	ldr	r3, [r3, #20]
 80062ba:	693a      	ldr	r2, [r7, #16]
 80062bc:	4313      	orrs	r3, r2
 80062be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	693a      	ldr	r2, [r7, #16]
 80062ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	68fa      	ldr	r2, [r7, #12]
 80062d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	697a      	ldr	r2, [r7, #20]
 80062e2:	621a      	str	r2, [r3, #32]
}
 80062e4:	bf00      	nop
 80062e6:	371c      	adds	r7, #28
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr
 80062f0:	40012c00 	.word	0x40012c00
 80062f4:	40013400 	.word	0x40013400
 80062f8:	40014000 	.word	0x40014000
 80062fc:	40014400 	.word	0x40014400
 8006300:	40014800 	.word	0x40014800
 8006304:	40015000 	.word	0x40015000

08006308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006308:	b480      	push	{r7}
 800630a:	b087      	sub	sp, #28
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a1b      	ldr	r3, [r3, #32]
 8006316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a1b      	ldr	r3, [r3, #32]
 800631c:	f023 0210 	bic.w	r2, r3, #16
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	699b      	ldr	r3, [r3, #24]
 800632e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800633a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006342:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	021b      	lsls	r3, r3, #8
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4313      	orrs	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	f023 0320 	bic.w	r3, r3, #32
 8006356:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	011b      	lsls	r3, r3, #4
 800635e:	697a      	ldr	r2, [r7, #20]
 8006360:	4313      	orrs	r3, r2
 8006362:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4a2c      	ldr	r2, [pc, #176]	@ (8006418 <TIM_OC2_SetConfig+0x110>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d007      	beq.n	800637c <TIM_OC2_SetConfig+0x74>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a2b      	ldr	r2, [pc, #172]	@ (800641c <TIM_OC2_SetConfig+0x114>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d003      	beq.n	800637c <TIM_OC2_SetConfig+0x74>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a2a      	ldr	r2, [pc, #168]	@ (8006420 <TIM_OC2_SetConfig+0x118>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d10d      	bne.n	8006398 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006382:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	4313      	orrs	r3, r2
 800638e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006396:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a1f      	ldr	r2, [pc, #124]	@ (8006418 <TIM_OC2_SetConfig+0x110>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d013      	beq.n	80063c8 <TIM_OC2_SetConfig+0xc0>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	4a1e      	ldr	r2, [pc, #120]	@ (800641c <TIM_OC2_SetConfig+0x114>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d00f      	beq.n	80063c8 <TIM_OC2_SetConfig+0xc0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006424 <TIM_OC2_SetConfig+0x11c>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <TIM_OC2_SetConfig+0xc0>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4a1d      	ldr	r2, [pc, #116]	@ (8006428 <TIM_OC2_SetConfig+0x120>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d007      	beq.n	80063c8 <TIM_OC2_SetConfig+0xc0>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a1c      	ldr	r2, [pc, #112]	@ (800642c <TIM_OC2_SetConfig+0x124>)
 80063bc:	4293      	cmp	r3, r2
 80063be:	d003      	beq.n	80063c8 <TIM_OC2_SetConfig+0xc0>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a17      	ldr	r2, [pc, #92]	@ (8006420 <TIM_OC2_SetConfig+0x118>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d113      	bne.n	80063f0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80063ce:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80063d6:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	695b      	ldr	r3, [r3, #20]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	693a      	ldr	r2, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	685a      	ldr	r2, [r3, #4]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	621a      	str	r2, [r3, #32]
}
 800640a:	bf00      	nop
 800640c:	371c      	adds	r7, #28
 800640e:	46bd      	mov	sp, r7
 8006410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	40012c00 	.word	0x40012c00
 800641c:	40013400 	.word	0x40013400
 8006420:	40015000 	.word	0x40015000
 8006424:	40014000 	.word	0x40014000
 8006428:	40014400 	.word	0x40014400
 800642c:	40014800 	.word	0x40014800

08006430 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a1b      	ldr	r3, [r3, #32]
 8006444:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	69db      	ldr	r3, [r3, #28]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800645e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0303 	bic.w	r3, r3, #3
 800646a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800647c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	689b      	ldr	r3, [r3, #8]
 8006482:	021b      	lsls	r3, r3, #8
 8006484:	697a      	ldr	r2, [r7, #20]
 8006486:	4313      	orrs	r3, r2
 8006488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	4a2b      	ldr	r2, [pc, #172]	@ (800653c <TIM_OC3_SetConfig+0x10c>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d007      	beq.n	80064a2 <TIM_OC3_SetConfig+0x72>
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	4a2a      	ldr	r2, [pc, #168]	@ (8006540 <TIM_OC3_SetConfig+0x110>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d003      	beq.n	80064a2 <TIM_OC3_SetConfig+0x72>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a29      	ldr	r2, [pc, #164]	@ (8006544 <TIM_OC3_SetConfig+0x114>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d10d      	bne.n	80064be <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80064a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	68db      	ldr	r3, [r3, #12]
 80064ae:	021b      	lsls	r3, r3, #8
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	4313      	orrs	r3, r2
 80064b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80064bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a1e      	ldr	r2, [pc, #120]	@ (800653c <TIM_OC3_SetConfig+0x10c>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <TIM_OC3_SetConfig+0xbe>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006540 <TIM_OC3_SetConfig+0x110>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d00f      	beq.n	80064ee <TIM_OC3_SetConfig+0xbe>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006548 <TIM_OC3_SetConfig+0x118>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d00b      	beq.n	80064ee <TIM_OC3_SetConfig+0xbe>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1c      	ldr	r2, [pc, #112]	@ (800654c <TIM_OC3_SetConfig+0x11c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d007      	beq.n	80064ee <TIM_OC3_SetConfig+0xbe>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006550 <TIM_OC3_SetConfig+0x120>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d003      	beq.n	80064ee <TIM_OC3_SetConfig+0xbe>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a16      	ldr	r2, [pc, #88]	@ (8006544 <TIM_OC3_SetConfig+0x114>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d113      	bne.n	8006516 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80064fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	695b      	ldr	r3, [r3, #20]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	699b      	ldr	r3, [r3, #24]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40012c00 	.word	0x40012c00
 8006540:	40013400 	.word	0x40013400
 8006544:	40015000 	.word	0x40015000
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800

08006554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a1b      	ldr	r3, [r3, #32]
 8006568:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006582:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006586:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800658e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	021b      	lsls	r3, r3, #8
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	4313      	orrs	r3, r2
 800659a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80065a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	031b      	lsls	r3, r3, #12
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a1a      	ldr	r2, [pc, #104]	@ (800661c <TIM_OC4_SetConfig+0xc8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d013      	beq.n	80065e0 <TIM_OC4_SetConfig+0x8c>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	4a19      	ldr	r2, [pc, #100]	@ (8006620 <TIM_OC4_SetConfig+0xcc>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d00f      	beq.n	80065e0 <TIM_OC4_SetConfig+0x8c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	4a18      	ldr	r2, [pc, #96]	@ (8006624 <TIM_OC4_SetConfig+0xd0>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d00b      	beq.n	80065e0 <TIM_OC4_SetConfig+0x8c>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a17      	ldr	r2, [pc, #92]	@ (8006628 <TIM_OC4_SetConfig+0xd4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d007      	beq.n	80065e0 <TIM_OC4_SetConfig+0x8c>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a16      	ldr	r2, [pc, #88]	@ (800662c <TIM_OC4_SetConfig+0xd8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d003      	beq.n	80065e0 <TIM_OC4_SetConfig+0x8c>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a15      	ldr	r2, [pc, #84]	@ (8006630 <TIM_OC4_SetConfig+0xdc>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d109      	bne.n	80065f4 <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80065e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	019b      	lsls	r3, r3, #6
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68fa      	ldr	r2, [r7, #12]
 80065fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006600:	683b      	ldr	r3, [r7, #0]
 8006602:	685a      	ldr	r2, [r3, #4]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	693a      	ldr	r2, [r7, #16]
 800660c:	621a      	str	r2, [r3, #32]
}
 800660e:	bf00      	nop
 8006610:	371c      	adds	r7, #28
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40012c00 	.word	0x40012c00
 8006620:	40013400 	.word	0x40013400
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800
 8006630:	40015000 	.word	0x40015000

08006634 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006678:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	4313      	orrs	r3, r2
 8006684:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a19      	ldr	r2, [pc, #100]	@ (80066f0 <TIM_OC5_SetConfig+0xbc>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d013      	beq.n	80066b6 <TIM_OC5_SetConfig+0x82>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a18      	ldr	r2, [pc, #96]	@ (80066f4 <TIM_OC5_SetConfig+0xc0>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d00f      	beq.n	80066b6 <TIM_OC5_SetConfig+0x82>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	4a17      	ldr	r2, [pc, #92]	@ (80066f8 <TIM_OC5_SetConfig+0xc4>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d00b      	beq.n	80066b6 <TIM_OC5_SetConfig+0x82>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a16      	ldr	r2, [pc, #88]	@ (80066fc <TIM_OC5_SetConfig+0xc8>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d007      	beq.n	80066b6 <TIM_OC5_SetConfig+0x82>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a15      	ldr	r2, [pc, #84]	@ (8006700 <TIM_OC5_SetConfig+0xcc>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d003      	beq.n	80066b6 <TIM_OC5_SetConfig+0x82>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a14      	ldr	r2, [pc, #80]	@ (8006704 <TIM_OC5_SetConfig+0xd0>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d109      	bne.n	80066ca <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80066bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	021b      	lsls	r3, r3, #8
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	697a      	ldr	r2, [r7, #20]
 80066ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	685a      	ldr	r2, [r3, #4]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	621a      	str	r2, [r3, #32]
}
 80066e4:	bf00      	nop
 80066e6:	371c      	adds	r7, #28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr
 80066f0:	40012c00 	.word	0x40012c00
 80066f4:	40013400 	.word	0x40013400
 80066f8:	40014000 	.word	0x40014000
 80066fc:	40014400 	.word	0x40014400
 8006700:	40014800 	.word	0x40014800
 8006704:	40015000 	.word	0x40015000

08006708 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006708:	b480      	push	{r7}
 800670a:	b087      	sub	sp, #28
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a1b      	ldr	r3, [r3, #32]
 800671c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006736:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800673a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	021b      	lsls	r3, r3, #8
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	4313      	orrs	r3, r2
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800674e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	051b      	lsls	r3, r3, #20
 8006756:	693a      	ldr	r2, [r7, #16]
 8006758:	4313      	orrs	r3, r2
 800675a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a1a      	ldr	r2, [pc, #104]	@ (80067c8 <TIM_OC6_SetConfig+0xc0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d013      	beq.n	800678c <TIM_OC6_SetConfig+0x84>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a19      	ldr	r2, [pc, #100]	@ (80067cc <TIM_OC6_SetConfig+0xc4>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d00f      	beq.n	800678c <TIM_OC6_SetConfig+0x84>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a18      	ldr	r2, [pc, #96]	@ (80067d0 <TIM_OC6_SetConfig+0xc8>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d00b      	beq.n	800678c <TIM_OC6_SetConfig+0x84>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a17      	ldr	r2, [pc, #92]	@ (80067d4 <TIM_OC6_SetConfig+0xcc>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d007      	beq.n	800678c <TIM_OC6_SetConfig+0x84>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	4a16      	ldr	r2, [pc, #88]	@ (80067d8 <TIM_OC6_SetConfig+0xd0>)
 8006780:	4293      	cmp	r3, r2
 8006782:	d003      	beq.n	800678c <TIM_OC6_SetConfig+0x84>
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a15      	ldr	r2, [pc, #84]	@ (80067dc <TIM_OC6_SetConfig+0xd4>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d109      	bne.n	80067a0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800678c:	697b      	ldr	r3, [r7, #20]
 800678e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006792:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	029b      	lsls	r3, r3, #10
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	697a      	ldr	r2, [r7, #20]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	693a      	ldr	r2, [r7, #16]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	40012c00 	.word	0x40012c00
 80067cc:	40013400 	.word	0x40013400
 80067d0:	40014000 	.word	0x40014000
 80067d4:	40014400 	.word	0x40014400
 80067d8:	40014800 	.word	0x40014800
 80067dc:	40015000 	.word	0x40015000

080067e0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80067e0:	b480      	push	{r7}
 80067e2:	b087      	sub	sp, #28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a1b      	ldr	r3, [r3, #32]
 80067f8:	f023 0201 	bic.w	r2, r3, #1
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	699b      	ldr	r3, [r3, #24]
 8006804:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	4a26      	ldr	r2, [pc, #152]	@ (80068a4 <TIM_TI1_SetConfig+0xc4>)
 800680a:	4293      	cmp	r3, r2
 800680c:	d017      	beq.n	800683e <TIM_TI1_SetConfig+0x5e>
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006814:	d013      	beq.n	800683e <TIM_TI1_SetConfig+0x5e>
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	4a23      	ldr	r2, [pc, #140]	@ (80068a8 <TIM_TI1_SetConfig+0xc8>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d00f      	beq.n	800683e <TIM_TI1_SetConfig+0x5e>
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	4a22      	ldr	r2, [pc, #136]	@ (80068ac <TIM_TI1_SetConfig+0xcc>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00b      	beq.n	800683e <TIM_TI1_SetConfig+0x5e>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	4a21      	ldr	r2, [pc, #132]	@ (80068b0 <TIM_TI1_SetConfig+0xd0>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d007      	beq.n	800683e <TIM_TI1_SetConfig+0x5e>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	4a20      	ldr	r2, [pc, #128]	@ (80068b4 <TIM_TI1_SetConfig+0xd4>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d003      	beq.n	800683e <TIM_TI1_SetConfig+0x5e>
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4a1f      	ldr	r2, [pc, #124]	@ (80068b8 <TIM_TI1_SetConfig+0xd8>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d101      	bne.n	8006842 <TIM_TI1_SetConfig+0x62>
 800683e:	2301      	movs	r3, #1
 8006840:	e000      	b.n	8006844 <TIM_TI1_SetConfig+0x64>
 8006842:	2300      	movs	r3, #0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d008      	beq.n	800685a <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f023 0303 	bic.w	r3, r3, #3
 800684e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	e003      	b.n	8006862 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	f043 0301 	orr.w	r3, r3, #1
 8006860:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006868:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	011b      	lsls	r3, r3, #4
 800686e:	b2db      	uxtb	r3, r3
 8006870:	697a      	ldr	r2, [r7, #20]
 8006872:	4313      	orrs	r3, r2
 8006874:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	f023 030a 	bic.w	r3, r3, #10
 800687c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	f003 030a 	and.w	r3, r3, #10
 8006884:	693a      	ldr	r2, [r7, #16]
 8006886:	4313      	orrs	r3, r2
 8006888:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	621a      	str	r2, [r3, #32]
}
 8006896:	bf00      	nop
 8006898:	371c      	adds	r7, #28
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop
 80068a4:	40012c00 	.word	0x40012c00
 80068a8:	40000400 	.word	0x40000400
 80068ac:	40000800 	.word	0x40000800
 80068b0:	40013400 	.word	0x40013400
 80068b4:	40014000 	.word	0x40014000
 80068b8:	40015000 	.word	0x40015000

080068bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068bc:	b480      	push	{r7}
 80068be:	b087      	sub	sp, #28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f023 0201 	bic.w	r2, r3, #1
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80068e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	011b      	lsls	r3, r3, #4
 80068ec:	693a      	ldr	r2, [r7, #16]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f023 030a 	bic.w	r3, r3, #10
 80068f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4313      	orrs	r3, r2
 8006900:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	621a      	str	r2, [r3, #32]
}
 800690e:	bf00      	nop
 8006910:	371c      	adds	r7, #28
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800691a:	b480      	push	{r7}
 800691c:	b087      	sub	sp, #28
 800691e:	af00      	add	r7, sp, #0
 8006920:	60f8      	str	r0, [r7, #12]
 8006922:	60b9      	str	r1, [r7, #8]
 8006924:	607a      	str	r2, [r7, #4]
 8006926:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a1b      	ldr	r3, [r3, #32]
 8006932:	f023 0210 	bic.w	r2, r3, #16
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006946:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	021b      	lsls	r3, r3, #8
 800694c:	693a      	ldr	r2, [r7, #16]
 800694e:	4313      	orrs	r3, r2
 8006950:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006958:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	031b      	lsls	r3, r3, #12
 800695e:	b29b      	uxth	r3, r3
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800696c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	011b      	lsls	r3, r3, #4
 8006972:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8006976:	697a      	ldr	r2, [r7, #20]
 8006978:	4313      	orrs	r3, r2
 800697a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	693a      	ldr	r2, [r7, #16]
 8006980:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr

08006994 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0210 	bic.w	r2, r3, #16
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80069be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	031b      	lsls	r3, r3, #12
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	621a      	str	r2, [r3, #32]
}
 80069e8:	bf00      	nop
 80069ea:	371c      	adds	r7, #28
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b087      	sub	sp, #28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	60f8      	str	r0, [r7, #12]
 80069fc:	60b9      	str	r1, [r7, #8]
 80069fe:	607a      	str	r2, [r7, #4]
 8006a00:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a1b      	ldr	r3, [r3, #32]
 8006a0c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	69db      	ldr	r3, [r3, #28]
 8006a18:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f023 0303 	bic.w	r3, r3, #3
 8006a20:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a30:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	693a      	ldr	r2, [r7, #16]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8006a44:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	697a      	ldr	r2, [r7, #20]
 8006a5e:	621a      	str	r2, [r3, #32]
}
 8006a60:	bf00      	nop
 8006a62:	371c      	adds	r7, #28
 8006a64:	46bd      	mov	sp, r7
 8006a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6a:	4770      	bx	lr

08006a6c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	69db      	ldr	r3, [r3, #28]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a98:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	021b      	lsls	r3, r3, #8
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006aaa:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	031b      	lsls	r3, r3, #12
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	693a      	ldr	r2, [r7, #16]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8006abe:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	031b      	lsls	r3, r3, #12
 8006ac4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8006ac8:	697a      	ldr	r2, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	621a      	str	r2, [r3, #32]
}
 8006ada:	bf00      	nop
 8006adc:	371c      	adds	r7, #28
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr

08006ae6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ae6:	b480      	push	{r7}
 8006ae8:	b085      	sub	sp, #20
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006afc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006afe:	683a      	ldr	r2, [r7, #0]
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4313      	orrs	r3, r2
 8006b04:	f043 0307 	orr.w	r3, r3, #7
 8006b08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]
}
 8006b10:	bf00      	nop
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b087      	sub	sp, #28
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	607a      	str	r2, [r7, #4]
 8006b28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	021a      	lsls	r2, r3, #8
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	431a      	orrs	r2, r3
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	697a      	ldr	r2, [r7, #20]
 8006b4e:	609a      	str	r2, [r3, #8]
}
 8006b50:	bf00      	nop
 8006b52:	371c      	adds	r7, #28
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b087      	sub	sp, #28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	f003 031f 	and.w	r3, r3, #31
 8006b6e:	2201      	movs	r2, #1
 8006b70:	fa02 f303 	lsl.w	r3, r2, r3
 8006b74:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6a1a      	ldr	r2, [r3, #32]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	43db      	mvns	r3, r3
 8006b7e:	401a      	ands	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6a1a      	ldr	r2, [r3, #32]
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	6879      	ldr	r1, [r7, #4]
 8006b90:	fa01 f303 	lsl.w	r3, r1, r3
 8006b94:	431a      	orrs	r2, r3
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
	...

08006ba8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bb8:	2b01      	cmp	r3, #1
 8006bba:	d101      	bne.n	8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bbc:	2302      	movs	r3, #2
 8006bbe:	e06d      	b.n	8006c9c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2201      	movs	r2, #1
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	685b      	ldr	r3, [r3, #4]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a30      	ldr	r2, [pc, #192]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d009      	beq.n	8006bfe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a2f      	ldr	r2, [pc, #188]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d004      	beq.n	8006bfe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a2d      	ldr	r2, [pc, #180]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d108      	bne.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c04:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	68fa      	ldr	r2, [r7, #12]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ca8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d01d      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c3c:	d018      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d013      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00e      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	4a15      	ldr	r2, [pc, #84]	@ (8006cac <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d009      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a16      	ldr	r2, [pc, #88]	@ (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d004      	beq.n	8006c70 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a11      	ldr	r2, [pc, #68]	@ (8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d10c      	bne.n	8006c8a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr
 8006ca8:	40012c00 	.word	0x40012c00
 8006cac:	40013400 	.word	0x40013400
 8006cb0:	40015000 	.word	0x40015000
 8006cb4:	40000400 	.word	0x40000400
 8006cb8:	40000800 	.word	0x40000800
 8006cbc:	40014000 	.word	0x40014000

08006cc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b085      	sub	sp, #20
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006cd4:	2b01      	cmp	r3, #1
 8006cd6:	d101      	bne.n	8006cdc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cd8:	2302      	movs	r3, #2
 8006cda:	e06a      	b.n	8006db2 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2201      	movs	r2, #1
 8006ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	691b      	ldr	r3, [r3, #16]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d42:	4313      	orrs	r3, r2
 8006d44:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	041b      	lsls	r3, r3, #16
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a19      	ldr	r2, [pc, #100]	@ (8006dc0 <HAL_TIMEx_ConfigBreakDeadTime+0x100>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d009      	beq.n	8006d74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a17      	ldr	r2, [pc, #92]	@ (8006dc4 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d004      	beq.n	8006d74 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a16      	ldr	r2, [pc, #88]	@ (8006dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d115      	bne.n	8006da0 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7e:	051b      	lsls	r3, r3, #20
 8006d80:	4313      	orrs	r3, r2
 8006d82:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	6a1b      	ldr	r3, [r3, #32]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3714      	adds	r7, #20
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40013400 	.word	0x40013400
 8006dc8:	40015000 	.word	0x40015000

08006dcc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b083      	sub	sp, #12
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006dd4:	bf00      	nop
 8006dd6:	370c      	adds	r7, #12
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006de8:	bf00      	nop
 8006dea:	370c      	adds	r7, #12
 8006dec:	46bd      	mov	sp, r7
 8006dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df2:	4770      	bx	lr

08006df4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b083      	sub	sp, #12
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006dfc:	bf00      	nop
 8006dfe:	370c      	adds	r7, #12
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b082      	sub	sp, #8
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d101      	bne.n	8006e1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e16:	2301      	movs	r3, #1
 8006e18:	e040      	b.n	8006e9c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fa fe60 	bl	8001af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2224      	movs	r2, #36	@ 0x24
 8006e34:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	681a      	ldr	r2, [r3, #0]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	f022 0201 	bic.w	r2, r2, #1
 8006e44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d002      	beq.n	8006e54 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 fa86 	bl	8007360 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e54:	6878      	ldr	r0, [r7, #4]
 8006e56:	f000 f8af 	bl	8006fb8 <UART_SetConfig>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	e01b      	b.n	8006e9c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	689a      	ldr	r2, [r3, #8]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f042 0201 	orr.w	r2, r2, #1
 8006e92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb05 	bl	80074a4 <UART_CheckIdleState>
 8006e9a:	4603      	mov	r3, r0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3708      	adds	r7, #8
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea4:	b580      	push	{r7, lr}
 8006ea6:	b08a      	sub	sp, #40	@ 0x28
 8006ea8:	af02      	add	r7, sp, #8
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	603b      	str	r3, [r7, #0]
 8006eb0:	4613      	mov	r3, r2
 8006eb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d177      	bne.n	8006fac <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_UART_Transmit+0x24>
 8006ec2:	88fb      	ldrh	r3, [r7, #6]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d101      	bne.n	8006ecc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	e070      	b.n	8006fae <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2221      	movs	r2, #33	@ 0x21
 8006ed8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eda:	f7fb f803 	bl	8001ee4 <HAL_GetTick>
 8006ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	88fa      	ldrh	r2, [r7, #6]
 8006ee4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	88fa      	ldrh	r2, [r7, #6]
 8006eec:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ef8:	d108      	bne.n	8006f0c <HAL_UART_Transmit+0x68>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	691b      	ldr	r3, [r3, #16]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d104      	bne.n	8006f0c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006f02:	2300      	movs	r3, #0
 8006f04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	61bb      	str	r3, [r7, #24]
 8006f0a:	e003      	b.n	8006f14 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f10:	2300      	movs	r3, #0
 8006f12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f14:	e02f      	b.n	8006f76 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2180      	movs	r1, #128	@ 0x80
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fb67 	bl	80075f4 <UART_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d004      	beq.n	8006f36 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8006f32:	2303      	movs	r3, #3
 8006f34:	e03b      	b.n	8006fae <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10b      	bne.n	8006f54 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f3c:	69bb      	ldr	r3, [r7, #24]
 8006f3e:	881a      	ldrh	r2, [r3, #0]
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f48:	b292      	uxth	r2, r2
 8006f4a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f4c:	69bb      	ldr	r3, [r7, #24]
 8006f4e:	3302      	adds	r3, #2
 8006f50:	61bb      	str	r3, [r7, #24]
 8006f52:	e007      	b.n	8006f64 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	781a      	ldrb	r2, [r3, #0]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f5e:	69fb      	ldr	r3, [r7, #28]
 8006f60:	3301      	adds	r3, #1
 8006f62:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d1c9      	bne.n	8006f16 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	2140      	movs	r1, #64	@ 0x40
 8006f8c:	68f8      	ldr	r0, [r7, #12]
 8006f8e:	f000 fb31 	bl	80075f4 <UART_WaitOnFlagUntilTimeout>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d004      	beq.n	8006fa2 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e005      	b.n	8006fae <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	2220      	movs	r2, #32
 8006fa6:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	e000      	b.n	8006fae <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
  }
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	689a      	ldr	r2, [r3, #8]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	691b      	ldr	r3, [r3, #16]
 8006fcc:	431a      	orrs	r2, r3
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	431a      	orrs	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	69db      	ldr	r3, [r3, #28]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b92      	ldr	r3, [pc, #584]	@ (800722c <UART_SetConfig+0x274>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	6979      	ldr	r1, [r7, #20]
 8006fec:	430b      	orrs	r3, r1
 8006fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	699b      	ldr	r3, [r3, #24]
 800700a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	697a      	ldr	r2, [r7, #20]
 8007012:	4313      	orrs	r3, r2
 8007014:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	697a      	ldr	r2, [r7, #20]
 8007026:	430a      	orrs	r2, r1
 8007028:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	4a80      	ldr	r2, [pc, #512]	@ (8007230 <UART_SetConfig+0x278>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d120      	bne.n	8007076 <UART_SetConfig+0xbe>
 8007034:	4b7f      	ldr	r3, [pc, #508]	@ (8007234 <UART_SetConfig+0x27c>)
 8007036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007038:	f003 0303 	and.w	r3, r3, #3
 800703c:	2b03      	cmp	r3, #3
 800703e:	d817      	bhi.n	8007070 <UART_SetConfig+0xb8>
 8007040:	a201      	add	r2, pc, #4	@ (adr r2, 8007048 <UART_SetConfig+0x90>)
 8007042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007046:	bf00      	nop
 8007048:	08007059 	.word	0x08007059
 800704c:	08007065 	.word	0x08007065
 8007050:	0800706b 	.word	0x0800706b
 8007054:	0800705f 	.word	0x0800705f
 8007058:	2301      	movs	r3, #1
 800705a:	77fb      	strb	r3, [r7, #31]
 800705c:	e0b5      	b.n	80071ca <UART_SetConfig+0x212>
 800705e:	2302      	movs	r3, #2
 8007060:	77fb      	strb	r3, [r7, #31]
 8007062:	e0b2      	b.n	80071ca <UART_SetConfig+0x212>
 8007064:	2304      	movs	r3, #4
 8007066:	77fb      	strb	r3, [r7, #31]
 8007068:	e0af      	b.n	80071ca <UART_SetConfig+0x212>
 800706a:	2308      	movs	r3, #8
 800706c:	77fb      	strb	r3, [r7, #31]
 800706e:	e0ac      	b.n	80071ca <UART_SetConfig+0x212>
 8007070:	2310      	movs	r3, #16
 8007072:	77fb      	strb	r3, [r7, #31]
 8007074:	e0a9      	b.n	80071ca <UART_SetConfig+0x212>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a6f      	ldr	r2, [pc, #444]	@ (8007238 <UART_SetConfig+0x280>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d124      	bne.n	80070ca <UART_SetConfig+0x112>
 8007080:	4b6c      	ldr	r3, [pc, #432]	@ (8007234 <UART_SetConfig+0x27c>)
 8007082:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007084:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007088:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800708c:	d011      	beq.n	80070b2 <UART_SetConfig+0xfa>
 800708e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8007092:	d817      	bhi.n	80070c4 <UART_SetConfig+0x10c>
 8007094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007098:	d011      	beq.n	80070be <UART_SetConfig+0x106>
 800709a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800709e:	d811      	bhi.n	80070c4 <UART_SetConfig+0x10c>
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d003      	beq.n	80070ac <UART_SetConfig+0xf4>
 80070a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070a8:	d006      	beq.n	80070b8 <UART_SetConfig+0x100>
 80070aa:	e00b      	b.n	80070c4 <UART_SetConfig+0x10c>
 80070ac:	2300      	movs	r3, #0
 80070ae:	77fb      	strb	r3, [r7, #31]
 80070b0:	e08b      	b.n	80071ca <UART_SetConfig+0x212>
 80070b2:	2302      	movs	r3, #2
 80070b4:	77fb      	strb	r3, [r7, #31]
 80070b6:	e088      	b.n	80071ca <UART_SetConfig+0x212>
 80070b8:	2304      	movs	r3, #4
 80070ba:	77fb      	strb	r3, [r7, #31]
 80070bc:	e085      	b.n	80071ca <UART_SetConfig+0x212>
 80070be:	2308      	movs	r3, #8
 80070c0:	77fb      	strb	r3, [r7, #31]
 80070c2:	e082      	b.n	80071ca <UART_SetConfig+0x212>
 80070c4:	2310      	movs	r3, #16
 80070c6:	77fb      	strb	r3, [r7, #31]
 80070c8:	e07f      	b.n	80071ca <UART_SetConfig+0x212>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a5b      	ldr	r2, [pc, #364]	@ (800723c <UART_SetConfig+0x284>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d124      	bne.n	800711e <UART_SetConfig+0x166>
 80070d4:	4b57      	ldr	r3, [pc, #348]	@ (8007234 <UART_SetConfig+0x27c>)
 80070d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d8:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80070dc:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80070e0:	d011      	beq.n	8007106 <UART_SetConfig+0x14e>
 80070e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80070e6:	d817      	bhi.n	8007118 <UART_SetConfig+0x160>
 80070e8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80070ec:	d011      	beq.n	8007112 <UART_SetConfig+0x15a>
 80070ee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80070f2:	d811      	bhi.n	8007118 <UART_SetConfig+0x160>
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d003      	beq.n	8007100 <UART_SetConfig+0x148>
 80070f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070fc:	d006      	beq.n	800710c <UART_SetConfig+0x154>
 80070fe:	e00b      	b.n	8007118 <UART_SetConfig+0x160>
 8007100:	2300      	movs	r3, #0
 8007102:	77fb      	strb	r3, [r7, #31]
 8007104:	e061      	b.n	80071ca <UART_SetConfig+0x212>
 8007106:	2302      	movs	r3, #2
 8007108:	77fb      	strb	r3, [r7, #31]
 800710a:	e05e      	b.n	80071ca <UART_SetConfig+0x212>
 800710c:	2304      	movs	r3, #4
 800710e:	77fb      	strb	r3, [r7, #31]
 8007110:	e05b      	b.n	80071ca <UART_SetConfig+0x212>
 8007112:	2308      	movs	r3, #8
 8007114:	77fb      	strb	r3, [r7, #31]
 8007116:	e058      	b.n	80071ca <UART_SetConfig+0x212>
 8007118:	2310      	movs	r3, #16
 800711a:	77fb      	strb	r3, [r7, #31]
 800711c:	e055      	b.n	80071ca <UART_SetConfig+0x212>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a47      	ldr	r2, [pc, #284]	@ (8007240 <UART_SetConfig+0x288>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d124      	bne.n	8007172 <UART_SetConfig+0x1ba>
 8007128:	4b42      	ldr	r3, [pc, #264]	@ (8007234 <UART_SetConfig+0x27c>)
 800712a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8007130:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007134:	d011      	beq.n	800715a <UART_SetConfig+0x1a2>
 8007136:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800713a:	d817      	bhi.n	800716c <UART_SetConfig+0x1b4>
 800713c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007140:	d011      	beq.n	8007166 <UART_SetConfig+0x1ae>
 8007142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007146:	d811      	bhi.n	800716c <UART_SetConfig+0x1b4>
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <UART_SetConfig+0x19c>
 800714c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007150:	d006      	beq.n	8007160 <UART_SetConfig+0x1a8>
 8007152:	e00b      	b.n	800716c <UART_SetConfig+0x1b4>
 8007154:	2300      	movs	r3, #0
 8007156:	77fb      	strb	r3, [r7, #31]
 8007158:	e037      	b.n	80071ca <UART_SetConfig+0x212>
 800715a:	2302      	movs	r3, #2
 800715c:	77fb      	strb	r3, [r7, #31]
 800715e:	e034      	b.n	80071ca <UART_SetConfig+0x212>
 8007160:	2304      	movs	r3, #4
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	e031      	b.n	80071ca <UART_SetConfig+0x212>
 8007166:	2308      	movs	r3, #8
 8007168:	77fb      	strb	r3, [r7, #31]
 800716a:	e02e      	b.n	80071ca <UART_SetConfig+0x212>
 800716c:	2310      	movs	r3, #16
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e02b      	b.n	80071ca <UART_SetConfig+0x212>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a33      	ldr	r2, [pc, #204]	@ (8007244 <UART_SetConfig+0x28c>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d124      	bne.n	80071c6 <UART_SetConfig+0x20e>
 800717c:	4b2d      	ldr	r3, [pc, #180]	@ (8007234 <UART_SetConfig+0x27c>)
 800717e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007180:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8007184:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007188:	d011      	beq.n	80071ae <UART_SetConfig+0x1f6>
 800718a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800718e:	d817      	bhi.n	80071c0 <UART_SetConfig+0x208>
 8007190:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007194:	d011      	beq.n	80071ba <UART_SetConfig+0x202>
 8007196:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800719a:	d811      	bhi.n	80071c0 <UART_SetConfig+0x208>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d003      	beq.n	80071a8 <UART_SetConfig+0x1f0>
 80071a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80071a4:	d006      	beq.n	80071b4 <UART_SetConfig+0x1fc>
 80071a6:	e00b      	b.n	80071c0 <UART_SetConfig+0x208>
 80071a8:	2300      	movs	r3, #0
 80071aa:	77fb      	strb	r3, [r7, #31]
 80071ac:	e00d      	b.n	80071ca <UART_SetConfig+0x212>
 80071ae:	2302      	movs	r3, #2
 80071b0:	77fb      	strb	r3, [r7, #31]
 80071b2:	e00a      	b.n	80071ca <UART_SetConfig+0x212>
 80071b4:	2304      	movs	r3, #4
 80071b6:	77fb      	strb	r3, [r7, #31]
 80071b8:	e007      	b.n	80071ca <UART_SetConfig+0x212>
 80071ba:	2308      	movs	r3, #8
 80071bc:	77fb      	strb	r3, [r7, #31]
 80071be:	e004      	b.n	80071ca <UART_SetConfig+0x212>
 80071c0:	2310      	movs	r3, #16
 80071c2:	77fb      	strb	r3, [r7, #31]
 80071c4:	e001      	b.n	80071ca <UART_SetConfig+0x212>
 80071c6:	2310      	movs	r3, #16
 80071c8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	69db      	ldr	r3, [r3, #28]
 80071ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071d2:	d16b      	bne.n	80072ac <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80071d4:	7ffb      	ldrb	r3, [r7, #31]
 80071d6:	2b08      	cmp	r3, #8
 80071d8:	d838      	bhi.n	800724c <UART_SetConfig+0x294>
 80071da:	a201      	add	r2, pc, #4	@ (adr r2, 80071e0 <UART_SetConfig+0x228>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	08007205 	.word	0x08007205
 80071e4:	0800720d 	.word	0x0800720d
 80071e8:	08007215 	.word	0x08007215
 80071ec:	0800724d 	.word	0x0800724d
 80071f0:	0800721b 	.word	0x0800721b
 80071f4:	0800724d 	.word	0x0800724d
 80071f8:	0800724d 	.word	0x0800724d
 80071fc:	0800724d 	.word	0x0800724d
 8007200:	08007223 	.word	0x08007223
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007204:	f7fd fd6a 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 8007208:	61b8      	str	r0, [r7, #24]
        break;
 800720a:	e024      	b.n	8007256 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800720c:	f7fd fd88 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 8007210:	61b8      	str	r0, [r7, #24]
        break;
 8007212:	e020      	b.n	8007256 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007214:	4b0c      	ldr	r3, [pc, #48]	@ (8007248 <UART_SetConfig+0x290>)
 8007216:	61bb      	str	r3, [r7, #24]
        break;
 8007218:	e01d      	b.n	8007256 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800721a:	f7fd fcff 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 800721e:	61b8      	str	r0, [r7, #24]
        break;
 8007220:	e019      	b.n	8007256 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007222:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007226:	61bb      	str	r3, [r7, #24]
        break;
 8007228:	e015      	b.n	8007256 <UART_SetConfig+0x29e>
 800722a:	bf00      	nop
 800722c:	efff69f3 	.word	0xefff69f3
 8007230:	40013800 	.word	0x40013800
 8007234:	40021000 	.word	0x40021000
 8007238:	40004400 	.word	0x40004400
 800723c:	40004800 	.word	0x40004800
 8007240:	40004c00 	.word	0x40004c00
 8007244:	40005000 	.word	0x40005000
 8007248:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 800724c:	2300      	movs	r3, #0
 800724e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	77bb      	strb	r3, [r7, #30]
        break;
 8007254:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007256:	69bb      	ldr	r3, [r7, #24]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d073      	beq.n	8007344 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	005a      	lsls	r2, r3, #1
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	685b      	ldr	r3, [r3, #4]
 8007264:	085b      	lsrs	r3, r3, #1
 8007266:	441a      	add	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007270:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2b0f      	cmp	r3, #15
 8007276:	d916      	bls.n	80072a6 <UART_SetConfig+0x2ee>
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800727e:	d212      	bcs.n	80072a6 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	b29b      	uxth	r3, r3
 8007284:	f023 030f 	bic.w	r3, r3, #15
 8007288:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	085b      	lsrs	r3, r3, #1
 800728e:	b29b      	uxth	r3, r3
 8007290:	f003 0307 	and.w	r3, r3, #7
 8007294:	b29a      	uxth	r2, r3
 8007296:	89fb      	ldrh	r3, [r7, #14]
 8007298:	4313      	orrs	r3, r2
 800729a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	89fa      	ldrh	r2, [r7, #14]
 80072a2:	60da      	str	r2, [r3, #12]
 80072a4:	e04e      	b.n	8007344 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	77bb      	strb	r3, [r7, #30]
 80072aa:	e04b      	b.n	8007344 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80072ac:	7ffb      	ldrb	r3, [r7, #31]
 80072ae:	2b08      	cmp	r3, #8
 80072b0:	d827      	bhi.n	8007302 <UART_SetConfig+0x34a>
 80072b2:	a201      	add	r2, pc, #4	@ (adr r2, 80072b8 <UART_SetConfig+0x300>)
 80072b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072b8:	080072dd 	.word	0x080072dd
 80072bc:	080072e5 	.word	0x080072e5
 80072c0:	080072ed 	.word	0x080072ed
 80072c4:	08007303 	.word	0x08007303
 80072c8:	080072f3 	.word	0x080072f3
 80072cc:	08007303 	.word	0x08007303
 80072d0:	08007303 	.word	0x08007303
 80072d4:	08007303 	.word	0x08007303
 80072d8:	080072fb 	.word	0x080072fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072dc:	f7fd fcfe 	bl	8004cdc <HAL_RCC_GetPCLK1Freq>
 80072e0:	61b8      	str	r0, [r7, #24]
        break;
 80072e2:	e013      	b.n	800730c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e4:	f7fd fd1c 	bl	8004d20 <HAL_RCC_GetPCLK2Freq>
 80072e8:	61b8      	str	r0, [r7, #24]
        break;
 80072ea:	e00f      	b.n	800730c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072ec:	4b1b      	ldr	r3, [pc, #108]	@ (800735c <UART_SetConfig+0x3a4>)
 80072ee:	61bb      	str	r3, [r7, #24]
        break;
 80072f0:	e00c      	b.n	800730c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f2:	f7fd fc93 	bl	8004c1c <HAL_RCC_GetSysClockFreq>
 80072f6:	61b8      	str	r0, [r7, #24]
        break;
 80072f8:	e008      	b.n	800730c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072fe:	61bb      	str	r3, [r7, #24]
        break;
 8007300:	e004      	b.n	800730c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007306:	2301      	movs	r3, #1
 8007308:	77bb      	strb	r3, [r7, #30]
        break;
 800730a:	bf00      	nop
    }

    if (pclk != 0U)
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d018      	beq.n	8007344 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	085a      	lsrs	r2, r3, #1
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	441a      	add	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	fbb2 f3f3 	udiv	r3, r2, r3
 8007324:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	2b0f      	cmp	r3, #15
 800732a:	d909      	bls.n	8007340 <UART_SetConfig+0x388>
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007332:	d205      	bcs.n	8007340 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	b29a      	uxth	r2, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60da      	str	r2, [r3, #12]
 800733e:	e001      	b.n	8007344 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2200      	movs	r2, #0
 8007348:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2200      	movs	r2, #0
 800734e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8007350:	7fbb      	ldrb	r3, [r7, #30]
}
 8007352:	4618      	mov	r0, r3
 8007354:	3720      	adds	r7, #32
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	007a1200 	.word	0x007a1200

08007360 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00a      	beq.n	800738a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800738e:	f003 0301 	and.w	r3, r3, #1
 8007392:	2b00      	cmp	r3, #0
 8007394:	d00a      	beq.n	80073ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	430a      	orrs	r2, r1
 80073aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073b0:	f003 0302 	and.w	r3, r3, #2
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00a      	beq.n	80073ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d00a      	beq.n	80073f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	430a      	orrs	r2, r1
 80073ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073f4:	f003 0310 	and.w	r3, r3, #16
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d00a      	beq.n	8007412 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	430a      	orrs	r2, r1
 8007410:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007416:	f003 0320 	and.w	r3, r3, #32
 800741a:	2b00      	cmp	r3, #0
 800741c:	d00a      	beq.n	8007434 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	430a      	orrs	r2, r1
 8007432:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007438:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800743c:	2b00      	cmp	r3, #0
 800743e:	d01a      	beq.n	8007476 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	685b      	ldr	r3, [r3, #4]
 8007446:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	430a      	orrs	r2, r1
 8007454:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800745a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800745e:	d10a      	bne.n	8007476 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	685b      	ldr	r3, [r3, #4]
 8007466:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	430a      	orrs	r2, r1
 8007474:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800747a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00a      	beq.n	8007498 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]
  }
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr

080074a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b098      	sub	sp, #96	@ 0x60
 80074a8:	af02      	add	r7, sp, #8
 80074aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80074b4:	f7fa fd16 	bl	8001ee4 <HAL_GetTick>
 80074b8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	f003 0308 	and.w	r3, r3, #8
 80074c4:	2b08      	cmp	r3, #8
 80074c6:	d12e      	bne.n	8007526 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074c8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074d0:	2200      	movs	r2, #0
 80074d2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f88c 	bl	80075f4 <UART_WaitOnFlagUntilTimeout>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d021      	beq.n	8007526 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074f2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007500:	647b      	str	r3, [r7, #68]	@ 0x44
 8007502:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007506:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800750e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e6      	bne.n	80074e2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2220      	movs	r2, #32
 8007518:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	e062      	b.n	80075ec <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b04      	cmp	r3, #4
 8007532:	d149      	bne.n	80075c8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007534:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800753c:	2200      	movs	r2, #0
 800753e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f856 	bl	80075f4 <UART_WaitOnFlagUntilTimeout>
 8007548:	4603      	mov	r3, r0
 800754a:	2b00      	cmp	r3, #0
 800754c:	d03c      	beq.n	80075c8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007556:	e853 3f00 	ldrex	r3, [r3]
 800755a:	623b      	str	r3, [r7, #32]
   return(result);
 800755c:	6a3b      	ldr	r3, [r7, #32]
 800755e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800756c:	633b      	str	r3, [r7, #48]	@ 0x30
 800756e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007570:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007572:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007574:	e841 2300 	strex	r3, r2, [r1]
 8007578:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800757a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757c:	2b00      	cmp	r3, #0
 800757e:	d1e6      	bne.n	800754e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3308      	adds	r3, #8
 8007586:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007588:	693b      	ldr	r3, [r7, #16]
 800758a:	e853 3f00 	ldrex	r3, [r3]
 800758e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	f023 0301 	bic.w	r3, r3, #1
 8007596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3308      	adds	r3, #8
 800759e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80075a0:	61fa      	str	r2, [r7, #28]
 80075a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	e841 2300 	strex	r3, r2, [r1]
 80075ac:	617b      	str	r3, [r7, #20]
   return(result);
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d1e5      	bne.n	8007580 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2220      	movs	r2, #32
 80075b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e011      	b.n	80075ec <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2220      	movs	r2, #32
 80075cc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075ea:	2300      	movs	r3, #0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3758      	adds	r7, #88	@ 0x58
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	603b      	str	r3, [r7, #0]
 8007600:	4613      	mov	r3, r2
 8007602:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007604:	e04f      	b.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007606:	69bb      	ldr	r3, [r7, #24]
 8007608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800760c:	d04b      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800760e:	f7fa fc69 	bl	8001ee4 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	429a      	cmp	r2, r3
 800761c:	d302      	bcc.n	8007624 <UART_WaitOnFlagUntilTimeout+0x30>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007624:	2303      	movs	r3, #3
 8007626:	e04e      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f003 0304 	and.w	r3, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	d037      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2b80      	cmp	r3, #128	@ 0x80
 800763a:	d034      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	2b40      	cmp	r3, #64	@ 0x40
 8007640:	d031      	beq.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	f003 0308 	and.w	r3, r3, #8
 800764c:	2b08      	cmp	r3, #8
 800764e:	d110      	bne.n	8007672 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2208      	movs	r2, #8
 8007656:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 f838 	bl	80076ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	2208      	movs	r2, #8
 8007662:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800766e:	2301      	movs	r3, #1
 8007670:	e029      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	69db      	ldr	r3, [r3, #28]
 8007678:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800767c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007680:	d111      	bne.n	80076a6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800768a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 f81e 	bl	80076ce <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	2220      	movs	r2, #32
 8007696:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e00f      	b.n	80076c6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	69da      	ldr	r2, [r3, #28]
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	4013      	ands	r3, r2
 80076b0:	68ba      	ldr	r2, [r7, #8]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	bf0c      	ite	eq
 80076b6:	2301      	moveq	r3, #1
 80076b8:	2300      	movne	r3, #0
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	461a      	mov	r2, r3
 80076be:	79fb      	ldrb	r3, [r7, #7]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d0a0      	beq.n	8007606 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076c4:	2300      	movs	r3, #0
}
 80076c6:	4618      	mov	r0, r3
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076ce:	b480      	push	{r7}
 80076d0:	b095      	sub	sp, #84	@ 0x54
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076de:	e853 3f00 	ldrex	r3, [r3]
 80076e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	461a      	mov	r2, r3
 80076f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80076f6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076fc:	e841 2300 	strex	r3, r2, [r1]
 8007700:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007704:	2b00      	cmp	r3, #0
 8007706:	d1e6      	bne.n	80076d6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	3308      	adds	r3, #8
 800770e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	e853 3f00 	ldrex	r3, [r3]
 8007716:	61fb      	str	r3, [r7, #28]
   return(result);
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f023 0301 	bic.w	r3, r3, #1
 800771e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	3308      	adds	r3, #8
 8007726:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007728:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800772a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800772e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007730:	e841 2300 	strex	r3, r2, [r1]
 8007734:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007738:	2b00      	cmp	r3, #0
 800773a:	d1e5      	bne.n	8007708 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007740:	2b01      	cmp	r3, #1
 8007742:	d118      	bne.n	8007776 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	e853 3f00 	ldrex	r3, [r3]
 8007750:	60bb      	str	r3, [r7, #8]
   return(result);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	f023 0310 	bic.w	r3, r3, #16
 8007758:	647b      	str	r3, [r7, #68]	@ 0x44
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007762:	61bb      	str	r3, [r7, #24]
 8007764:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007766:	6979      	ldr	r1, [r7, #20]
 8007768:	69ba      	ldr	r2, [r7, #24]
 800776a:	e841 2300 	strex	r3, r2, [r1]
 800776e:	613b      	str	r3, [r7, #16]
   return(result);
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d1e6      	bne.n	8007744 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2220      	movs	r2, #32
 800777a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800778a:	bf00      	nop
 800778c:	3754      	adds	r7, #84	@ 0x54
 800778e:	46bd      	mov	sp, r7
 8007790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007794:	4770      	bx	lr

08007796 <__cvt>:
 8007796:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800779a:	ec57 6b10 	vmov	r6, r7, d0
 800779e:	2f00      	cmp	r7, #0
 80077a0:	460c      	mov	r4, r1
 80077a2:	4619      	mov	r1, r3
 80077a4:	463b      	mov	r3, r7
 80077a6:	bfbb      	ittet	lt
 80077a8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80077ac:	461f      	movlt	r7, r3
 80077ae:	2300      	movge	r3, #0
 80077b0:	232d      	movlt	r3, #45	@ 0x2d
 80077b2:	700b      	strb	r3, [r1, #0]
 80077b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80077b6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80077ba:	4691      	mov	r9, r2
 80077bc:	f023 0820 	bic.w	r8, r3, #32
 80077c0:	bfbc      	itt	lt
 80077c2:	4632      	movlt	r2, r6
 80077c4:	4616      	movlt	r6, r2
 80077c6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80077ca:	d005      	beq.n	80077d8 <__cvt+0x42>
 80077cc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80077d0:	d100      	bne.n	80077d4 <__cvt+0x3e>
 80077d2:	3401      	adds	r4, #1
 80077d4:	2102      	movs	r1, #2
 80077d6:	e000      	b.n	80077da <__cvt+0x44>
 80077d8:	2103      	movs	r1, #3
 80077da:	ab03      	add	r3, sp, #12
 80077dc:	9301      	str	r3, [sp, #4]
 80077de:	ab02      	add	r3, sp, #8
 80077e0:	9300      	str	r3, [sp, #0]
 80077e2:	ec47 6b10 	vmov	d0, r6, r7
 80077e6:	4653      	mov	r3, sl
 80077e8:	4622      	mov	r2, r4
 80077ea:	f000 fe49 	bl	8008480 <_dtoa_r>
 80077ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80077f2:	4605      	mov	r5, r0
 80077f4:	d119      	bne.n	800782a <__cvt+0x94>
 80077f6:	f019 0f01 	tst.w	r9, #1
 80077fa:	d00e      	beq.n	800781a <__cvt+0x84>
 80077fc:	eb00 0904 	add.w	r9, r0, r4
 8007800:	2200      	movs	r2, #0
 8007802:	2300      	movs	r3, #0
 8007804:	4630      	mov	r0, r6
 8007806:	4639      	mov	r1, r7
 8007808:	f7f9 f966 	bl	8000ad8 <__aeabi_dcmpeq>
 800780c:	b108      	cbz	r0, 8007812 <__cvt+0x7c>
 800780e:	f8cd 900c 	str.w	r9, [sp, #12]
 8007812:	2230      	movs	r2, #48	@ 0x30
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	454b      	cmp	r3, r9
 8007818:	d31e      	bcc.n	8007858 <__cvt+0xc2>
 800781a:	9b03      	ldr	r3, [sp, #12]
 800781c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800781e:	1b5b      	subs	r3, r3, r5
 8007820:	4628      	mov	r0, r5
 8007822:	6013      	str	r3, [r2, #0]
 8007824:	b004      	add	sp, #16
 8007826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800782a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800782e:	eb00 0904 	add.w	r9, r0, r4
 8007832:	d1e5      	bne.n	8007800 <__cvt+0x6a>
 8007834:	7803      	ldrb	r3, [r0, #0]
 8007836:	2b30      	cmp	r3, #48	@ 0x30
 8007838:	d10a      	bne.n	8007850 <__cvt+0xba>
 800783a:	2200      	movs	r2, #0
 800783c:	2300      	movs	r3, #0
 800783e:	4630      	mov	r0, r6
 8007840:	4639      	mov	r1, r7
 8007842:	f7f9 f949 	bl	8000ad8 <__aeabi_dcmpeq>
 8007846:	b918      	cbnz	r0, 8007850 <__cvt+0xba>
 8007848:	f1c4 0401 	rsb	r4, r4, #1
 800784c:	f8ca 4000 	str.w	r4, [sl]
 8007850:	f8da 3000 	ldr.w	r3, [sl]
 8007854:	4499      	add	r9, r3
 8007856:	e7d3      	b.n	8007800 <__cvt+0x6a>
 8007858:	1c59      	adds	r1, r3, #1
 800785a:	9103      	str	r1, [sp, #12]
 800785c:	701a      	strb	r2, [r3, #0]
 800785e:	e7d9      	b.n	8007814 <__cvt+0x7e>

08007860 <__exponent>:
 8007860:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007862:	2900      	cmp	r1, #0
 8007864:	bfba      	itte	lt
 8007866:	4249      	neglt	r1, r1
 8007868:	232d      	movlt	r3, #45	@ 0x2d
 800786a:	232b      	movge	r3, #43	@ 0x2b
 800786c:	2909      	cmp	r1, #9
 800786e:	7002      	strb	r2, [r0, #0]
 8007870:	7043      	strb	r3, [r0, #1]
 8007872:	dd29      	ble.n	80078c8 <__exponent+0x68>
 8007874:	f10d 0307 	add.w	r3, sp, #7
 8007878:	461d      	mov	r5, r3
 800787a:	270a      	movs	r7, #10
 800787c:	461a      	mov	r2, r3
 800787e:	fbb1 f6f7 	udiv	r6, r1, r7
 8007882:	fb07 1416 	mls	r4, r7, r6, r1
 8007886:	3430      	adds	r4, #48	@ 0x30
 8007888:	f802 4c01 	strb.w	r4, [r2, #-1]
 800788c:	460c      	mov	r4, r1
 800788e:	2c63      	cmp	r4, #99	@ 0x63
 8007890:	f103 33ff 	add.w	r3, r3, #4294967295
 8007894:	4631      	mov	r1, r6
 8007896:	dcf1      	bgt.n	800787c <__exponent+0x1c>
 8007898:	3130      	adds	r1, #48	@ 0x30
 800789a:	1e94      	subs	r4, r2, #2
 800789c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80078a0:	1c41      	adds	r1, r0, #1
 80078a2:	4623      	mov	r3, r4
 80078a4:	42ab      	cmp	r3, r5
 80078a6:	d30a      	bcc.n	80078be <__exponent+0x5e>
 80078a8:	f10d 0309 	add.w	r3, sp, #9
 80078ac:	1a9b      	subs	r3, r3, r2
 80078ae:	42ac      	cmp	r4, r5
 80078b0:	bf88      	it	hi
 80078b2:	2300      	movhi	r3, #0
 80078b4:	3302      	adds	r3, #2
 80078b6:	4403      	add	r3, r0
 80078b8:	1a18      	subs	r0, r3, r0
 80078ba:	b003      	add	sp, #12
 80078bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80078c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80078c6:	e7ed      	b.n	80078a4 <__exponent+0x44>
 80078c8:	2330      	movs	r3, #48	@ 0x30
 80078ca:	3130      	adds	r1, #48	@ 0x30
 80078cc:	7083      	strb	r3, [r0, #2]
 80078ce:	70c1      	strb	r1, [r0, #3]
 80078d0:	1d03      	adds	r3, r0, #4
 80078d2:	e7f1      	b.n	80078b8 <__exponent+0x58>

080078d4 <_printf_float>:
 80078d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d8:	b08d      	sub	sp, #52	@ 0x34
 80078da:	460c      	mov	r4, r1
 80078dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80078e0:	4616      	mov	r6, r2
 80078e2:	461f      	mov	r7, r3
 80078e4:	4605      	mov	r5, r0
 80078e6:	f000 fccb 	bl	8008280 <_localeconv_r>
 80078ea:	6803      	ldr	r3, [r0, #0]
 80078ec:	9304      	str	r3, [sp, #16]
 80078ee:	4618      	mov	r0, r3
 80078f0:	f7f8 fcc6 	bl	8000280 <strlen>
 80078f4:	2300      	movs	r3, #0
 80078f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80078f8:	f8d8 3000 	ldr.w	r3, [r8]
 80078fc:	9005      	str	r0, [sp, #20]
 80078fe:	3307      	adds	r3, #7
 8007900:	f023 0307 	bic.w	r3, r3, #7
 8007904:	f103 0208 	add.w	r2, r3, #8
 8007908:	f894 a018 	ldrb.w	sl, [r4, #24]
 800790c:	f8d4 b000 	ldr.w	fp, [r4]
 8007910:	f8c8 2000 	str.w	r2, [r8]
 8007914:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007918:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800791c:	9307      	str	r3, [sp, #28]
 800791e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007922:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007926:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800792a:	4b9c      	ldr	r3, [pc, #624]	@ (8007b9c <_printf_float+0x2c8>)
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	f7f9 f904 	bl	8000b3c <__aeabi_dcmpun>
 8007934:	bb70      	cbnz	r0, 8007994 <_printf_float+0xc0>
 8007936:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800793a:	4b98      	ldr	r3, [pc, #608]	@ (8007b9c <_printf_float+0x2c8>)
 800793c:	f04f 32ff 	mov.w	r2, #4294967295
 8007940:	f7f9 f8de 	bl	8000b00 <__aeabi_dcmple>
 8007944:	bb30      	cbnz	r0, 8007994 <_printf_float+0xc0>
 8007946:	2200      	movs	r2, #0
 8007948:	2300      	movs	r3, #0
 800794a:	4640      	mov	r0, r8
 800794c:	4649      	mov	r1, r9
 800794e:	f7f9 f8cd 	bl	8000aec <__aeabi_dcmplt>
 8007952:	b110      	cbz	r0, 800795a <_printf_float+0x86>
 8007954:	232d      	movs	r3, #45	@ 0x2d
 8007956:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800795a:	4a91      	ldr	r2, [pc, #580]	@ (8007ba0 <_printf_float+0x2cc>)
 800795c:	4b91      	ldr	r3, [pc, #580]	@ (8007ba4 <_printf_float+0x2d0>)
 800795e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007962:	bf8c      	ite	hi
 8007964:	4690      	movhi	r8, r2
 8007966:	4698      	movls	r8, r3
 8007968:	2303      	movs	r3, #3
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	f02b 0304 	bic.w	r3, fp, #4
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	f04f 0900 	mov.w	r9, #0
 8007976:	9700      	str	r7, [sp, #0]
 8007978:	4633      	mov	r3, r6
 800797a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800797c:	4621      	mov	r1, r4
 800797e:	4628      	mov	r0, r5
 8007980:	f000 f9d2 	bl	8007d28 <_printf_common>
 8007984:	3001      	adds	r0, #1
 8007986:	f040 808d 	bne.w	8007aa4 <_printf_float+0x1d0>
 800798a:	f04f 30ff 	mov.w	r0, #4294967295
 800798e:	b00d      	add	sp, #52	@ 0x34
 8007990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007994:	4642      	mov	r2, r8
 8007996:	464b      	mov	r3, r9
 8007998:	4640      	mov	r0, r8
 800799a:	4649      	mov	r1, r9
 800799c:	f7f9 f8ce 	bl	8000b3c <__aeabi_dcmpun>
 80079a0:	b140      	cbz	r0, 80079b4 <_printf_float+0xe0>
 80079a2:	464b      	mov	r3, r9
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	bfbc      	itt	lt
 80079a8:	232d      	movlt	r3, #45	@ 0x2d
 80079aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80079ae:	4a7e      	ldr	r2, [pc, #504]	@ (8007ba8 <_printf_float+0x2d4>)
 80079b0:	4b7e      	ldr	r3, [pc, #504]	@ (8007bac <_printf_float+0x2d8>)
 80079b2:	e7d4      	b.n	800795e <_printf_float+0x8a>
 80079b4:	6863      	ldr	r3, [r4, #4]
 80079b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80079ba:	9206      	str	r2, [sp, #24]
 80079bc:	1c5a      	adds	r2, r3, #1
 80079be:	d13b      	bne.n	8007a38 <_printf_float+0x164>
 80079c0:	2306      	movs	r3, #6
 80079c2:	6063      	str	r3, [r4, #4]
 80079c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80079c8:	2300      	movs	r3, #0
 80079ca:	6022      	str	r2, [r4, #0]
 80079cc:	9303      	str	r3, [sp, #12]
 80079ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80079d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80079d4:	ab09      	add	r3, sp, #36	@ 0x24
 80079d6:	9300      	str	r3, [sp, #0]
 80079d8:	6861      	ldr	r1, [r4, #4]
 80079da:	ec49 8b10 	vmov	d0, r8, r9
 80079de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80079e2:	4628      	mov	r0, r5
 80079e4:	f7ff fed7 	bl	8007796 <__cvt>
 80079e8:	9b06      	ldr	r3, [sp, #24]
 80079ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80079ec:	2b47      	cmp	r3, #71	@ 0x47
 80079ee:	4680      	mov	r8, r0
 80079f0:	d129      	bne.n	8007a46 <_printf_float+0x172>
 80079f2:	1cc8      	adds	r0, r1, #3
 80079f4:	db02      	blt.n	80079fc <_printf_float+0x128>
 80079f6:	6863      	ldr	r3, [r4, #4]
 80079f8:	4299      	cmp	r1, r3
 80079fa:	dd41      	ble.n	8007a80 <_printf_float+0x1ac>
 80079fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a00:	fa5f fa8a 	uxtb.w	sl, sl
 8007a04:	3901      	subs	r1, #1
 8007a06:	4652      	mov	r2, sl
 8007a08:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a0c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a0e:	f7ff ff27 	bl	8007860 <__exponent>
 8007a12:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a14:	1813      	adds	r3, r2, r0
 8007a16:	2a01      	cmp	r2, #1
 8007a18:	4681      	mov	r9, r0
 8007a1a:	6123      	str	r3, [r4, #16]
 8007a1c:	dc02      	bgt.n	8007a24 <_printf_float+0x150>
 8007a1e:	6822      	ldr	r2, [r4, #0]
 8007a20:	07d2      	lsls	r2, r2, #31
 8007a22:	d501      	bpl.n	8007a28 <_printf_float+0x154>
 8007a24:	3301      	adds	r3, #1
 8007a26:	6123      	str	r3, [r4, #16]
 8007a28:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d0a2      	beq.n	8007976 <_printf_float+0xa2>
 8007a30:	232d      	movs	r3, #45	@ 0x2d
 8007a32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007a36:	e79e      	b.n	8007976 <_printf_float+0xa2>
 8007a38:	9a06      	ldr	r2, [sp, #24]
 8007a3a:	2a47      	cmp	r2, #71	@ 0x47
 8007a3c:	d1c2      	bne.n	80079c4 <_printf_float+0xf0>
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1c0      	bne.n	80079c4 <_printf_float+0xf0>
 8007a42:	2301      	movs	r3, #1
 8007a44:	e7bd      	b.n	80079c2 <_printf_float+0xee>
 8007a46:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a4a:	d9db      	bls.n	8007a04 <_printf_float+0x130>
 8007a4c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007a50:	d118      	bne.n	8007a84 <_printf_float+0x1b0>
 8007a52:	2900      	cmp	r1, #0
 8007a54:	6863      	ldr	r3, [r4, #4]
 8007a56:	dd0b      	ble.n	8007a70 <_printf_float+0x19c>
 8007a58:	6121      	str	r1, [r4, #16]
 8007a5a:	b913      	cbnz	r3, 8007a62 <_printf_float+0x18e>
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	07d0      	lsls	r0, r2, #31
 8007a60:	d502      	bpl.n	8007a68 <_printf_float+0x194>
 8007a62:	3301      	adds	r3, #1
 8007a64:	440b      	add	r3, r1
 8007a66:	6123      	str	r3, [r4, #16]
 8007a68:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007a6a:	f04f 0900 	mov.w	r9, #0
 8007a6e:	e7db      	b.n	8007a28 <_printf_float+0x154>
 8007a70:	b913      	cbnz	r3, 8007a78 <_printf_float+0x1a4>
 8007a72:	6822      	ldr	r2, [r4, #0]
 8007a74:	07d2      	lsls	r2, r2, #31
 8007a76:	d501      	bpl.n	8007a7c <_printf_float+0x1a8>
 8007a78:	3302      	adds	r3, #2
 8007a7a:	e7f4      	b.n	8007a66 <_printf_float+0x192>
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e7f2      	b.n	8007a66 <_printf_float+0x192>
 8007a80:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007a84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a86:	4299      	cmp	r1, r3
 8007a88:	db05      	blt.n	8007a96 <_printf_float+0x1c2>
 8007a8a:	6823      	ldr	r3, [r4, #0]
 8007a8c:	6121      	str	r1, [r4, #16]
 8007a8e:	07d8      	lsls	r0, r3, #31
 8007a90:	d5ea      	bpl.n	8007a68 <_printf_float+0x194>
 8007a92:	1c4b      	adds	r3, r1, #1
 8007a94:	e7e7      	b.n	8007a66 <_printf_float+0x192>
 8007a96:	2900      	cmp	r1, #0
 8007a98:	bfd4      	ite	le
 8007a9a:	f1c1 0202 	rsble	r2, r1, #2
 8007a9e:	2201      	movgt	r2, #1
 8007aa0:	4413      	add	r3, r2
 8007aa2:	e7e0      	b.n	8007a66 <_printf_float+0x192>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	055a      	lsls	r2, r3, #21
 8007aa8:	d407      	bmi.n	8007aba <_printf_float+0x1e6>
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	4642      	mov	r2, r8
 8007aae:	4631      	mov	r1, r6
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	47b8      	blx	r7
 8007ab4:	3001      	adds	r0, #1
 8007ab6:	d12b      	bne.n	8007b10 <_printf_float+0x23c>
 8007ab8:	e767      	b.n	800798a <_printf_float+0xb6>
 8007aba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007abe:	f240 80dd 	bls.w	8007c7c <_printf_float+0x3a8>
 8007ac2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	2300      	movs	r3, #0
 8007aca:	f7f9 f805 	bl	8000ad8 <__aeabi_dcmpeq>
 8007ace:	2800      	cmp	r0, #0
 8007ad0:	d033      	beq.n	8007b3a <_printf_float+0x266>
 8007ad2:	4a37      	ldr	r2, [pc, #220]	@ (8007bb0 <_printf_float+0x2dc>)
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	4631      	mov	r1, r6
 8007ad8:	4628      	mov	r0, r5
 8007ada:	47b8      	blx	r7
 8007adc:	3001      	adds	r0, #1
 8007ade:	f43f af54 	beq.w	800798a <_printf_float+0xb6>
 8007ae2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007ae6:	4543      	cmp	r3, r8
 8007ae8:	db02      	blt.n	8007af0 <_printf_float+0x21c>
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	07d8      	lsls	r0, r3, #31
 8007aee:	d50f      	bpl.n	8007b10 <_printf_float+0x23c>
 8007af0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007af4:	4631      	mov	r1, r6
 8007af6:	4628      	mov	r0, r5
 8007af8:	47b8      	blx	r7
 8007afa:	3001      	adds	r0, #1
 8007afc:	f43f af45 	beq.w	800798a <_printf_float+0xb6>
 8007b00:	f04f 0900 	mov.w	r9, #0
 8007b04:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b08:	f104 0a1a 	add.w	sl, r4, #26
 8007b0c:	45c8      	cmp	r8, r9
 8007b0e:	dc09      	bgt.n	8007b24 <_printf_float+0x250>
 8007b10:	6823      	ldr	r3, [r4, #0]
 8007b12:	079b      	lsls	r3, r3, #30
 8007b14:	f100 8103 	bmi.w	8007d1e <_printf_float+0x44a>
 8007b18:	68e0      	ldr	r0, [r4, #12]
 8007b1a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b1c:	4298      	cmp	r0, r3
 8007b1e:	bfb8      	it	lt
 8007b20:	4618      	movlt	r0, r3
 8007b22:	e734      	b.n	800798e <_printf_float+0xba>
 8007b24:	2301      	movs	r3, #1
 8007b26:	4652      	mov	r2, sl
 8007b28:	4631      	mov	r1, r6
 8007b2a:	4628      	mov	r0, r5
 8007b2c:	47b8      	blx	r7
 8007b2e:	3001      	adds	r0, #1
 8007b30:	f43f af2b 	beq.w	800798a <_printf_float+0xb6>
 8007b34:	f109 0901 	add.w	r9, r9, #1
 8007b38:	e7e8      	b.n	8007b0c <_printf_float+0x238>
 8007b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	dc39      	bgt.n	8007bb4 <_printf_float+0x2e0>
 8007b40:	4a1b      	ldr	r2, [pc, #108]	@ (8007bb0 <_printf_float+0x2dc>)
 8007b42:	2301      	movs	r3, #1
 8007b44:	4631      	mov	r1, r6
 8007b46:	4628      	mov	r0, r5
 8007b48:	47b8      	blx	r7
 8007b4a:	3001      	adds	r0, #1
 8007b4c:	f43f af1d 	beq.w	800798a <_printf_float+0xb6>
 8007b50:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007b54:	ea59 0303 	orrs.w	r3, r9, r3
 8007b58:	d102      	bne.n	8007b60 <_printf_float+0x28c>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	07d9      	lsls	r1, r3, #31
 8007b5e:	d5d7      	bpl.n	8007b10 <_printf_float+0x23c>
 8007b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f af0d 	beq.w	800798a <_printf_float+0xb6>
 8007b70:	f04f 0a00 	mov.w	sl, #0
 8007b74:	f104 0b1a 	add.w	fp, r4, #26
 8007b78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7a:	425b      	negs	r3, r3
 8007b7c:	4553      	cmp	r3, sl
 8007b7e:	dc01      	bgt.n	8007b84 <_printf_float+0x2b0>
 8007b80:	464b      	mov	r3, r9
 8007b82:	e793      	b.n	8007aac <_printf_float+0x1d8>
 8007b84:	2301      	movs	r3, #1
 8007b86:	465a      	mov	r2, fp
 8007b88:	4631      	mov	r1, r6
 8007b8a:	4628      	mov	r0, r5
 8007b8c:	47b8      	blx	r7
 8007b8e:	3001      	adds	r0, #1
 8007b90:	f43f aefb 	beq.w	800798a <_printf_float+0xb6>
 8007b94:	f10a 0a01 	add.w	sl, sl, #1
 8007b98:	e7ee      	b.n	8007b78 <_printf_float+0x2a4>
 8007b9a:	bf00      	nop
 8007b9c:	7fefffff 	.word	0x7fefffff
 8007ba0:	0800a1a4 	.word	0x0800a1a4
 8007ba4:	0800a1a0 	.word	0x0800a1a0
 8007ba8:	0800a1ac 	.word	0x0800a1ac
 8007bac:	0800a1a8 	.word	0x0800a1a8
 8007bb0:	0800a1b0 	.word	0x0800a1b0
 8007bb4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bb6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007bba:	4553      	cmp	r3, sl
 8007bbc:	bfa8      	it	ge
 8007bbe:	4653      	movge	r3, sl
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	4699      	mov	r9, r3
 8007bc4:	dc36      	bgt.n	8007c34 <_printf_float+0x360>
 8007bc6:	f04f 0b00 	mov.w	fp, #0
 8007bca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007bce:	f104 021a 	add.w	r2, r4, #26
 8007bd2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007bd4:	9306      	str	r3, [sp, #24]
 8007bd6:	eba3 0309 	sub.w	r3, r3, r9
 8007bda:	455b      	cmp	r3, fp
 8007bdc:	dc31      	bgt.n	8007c42 <_printf_float+0x36e>
 8007bde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be0:	459a      	cmp	sl, r3
 8007be2:	dc3a      	bgt.n	8007c5a <_printf_float+0x386>
 8007be4:	6823      	ldr	r3, [r4, #0]
 8007be6:	07da      	lsls	r2, r3, #31
 8007be8:	d437      	bmi.n	8007c5a <_printf_float+0x386>
 8007bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bec:	ebaa 0903 	sub.w	r9, sl, r3
 8007bf0:	9b06      	ldr	r3, [sp, #24]
 8007bf2:	ebaa 0303 	sub.w	r3, sl, r3
 8007bf6:	4599      	cmp	r9, r3
 8007bf8:	bfa8      	it	ge
 8007bfa:	4699      	movge	r9, r3
 8007bfc:	f1b9 0f00 	cmp.w	r9, #0
 8007c00:	dc33      	bgt.n	8007c6a <_printf_float+0x396>
 8007c02:	f04f 0800 	mov.w	r8, #0
 8007c06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c0a:	f104 0b1a 	add.w	fp, r4, #26
 8007c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c10:	ebaa 0303 	sub.w	r3, sl, r3
 8007c14:	eba3 0309 	sub.w	r3, r3, r9
 8007c18:	4543      	cmp	r3, r8
 8007c1a:	f77f af79 	ble.w	8007b10 <_printf_float+0x23c>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	465a      	mov	r2, fp
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f aeae 	beq.w	800798a <_printf_float+0xb6>
 8007c2e:	f108 0801 	add.w	r8, r8, #1
 8007c32:	e7ec      	b.n	8007c0e <_printf_float+0x33a>
 8007c34:	4642      	mov	r2, r8
 8007c36:	4631      	mov	r1, r6
 8007c38:	4628      	mov	r0, r5
 8007c3a:	47b8      	blx	r7
 8007c3c:	3001      	adds	r0, #1
 8007c3e:	d1c2      	bne.n	8007bc6 <_printf_float+0x2f2>
 8007c40:	e6a3      	b.n	800798a <_printf_float+0xb6>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4631      	mov	r1, r6
 8007c46:	4628      	mov	r0, r5
 8007c48:	9206      	str	r2, [sp, #24]
 8007c4a:	47b8      	blx	r7
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	f43f ae9c 	beq.w	800798a <_printf_float+0xb6>
 8007c52:	9a06      	ldr	r2, [sp, #24]
 8007c54:	f10b 0b01 	add.w	fp, fp, #1
 8007c58:	e7bb      	b.n	8007bd2 <_printf_float+0x2fe>
 8007c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c5e:	4631      	mov	r1, r6
 8007c60:	4628      	mov	r0, r5
 8007c62:	47b8      	blx	r7
 8007c64:	3001      	adds	r0, #1
 8007c66:	d1c0      	bne.n	8007bea <_printf_float+0x316>
 8007c68:	e68f      	b.n	800798a <_printf_float+0xb6>
 8007c6a:	9a06      	ldr	r2, [sp, #24]
 8007c6c:	464b      	mov	r3, r9
 8007c6e:	4442      	add	r2, r8
 8007c70:	4631      	mov	r1, r6
 8007c72:	4628      	mov	r0, r5
 8007c74:	47b8      	blx	r7
 8007c76:	3001      	adds	r0, #1
 8007c78:	d1c3      	bne.n	8007c02 <_printf_float+0x32e>
 8007c7a:	e686      	b.n	800798a <_printf_float+0xb6>
 8007c7c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c80:	f1ba 0f01 	cmp.w	sl, #1
 8007c84:	dc01      	bgt.n	8007c8a <_printf_float+0x3b6>
 8007c86:	07db      	lsls	r3, r3, #31
 8007c88:	d536      	bpl.n	8007cf8 <_printf_float+0x424>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4642      	mov	r2, r8
 8007c8e:	4631      	mov	r1, r6
 8007c90:	4628      	mov	r0, r5
 8007c92:	47b8      	blx	r7
 8007c94:	3001      	adds	r0, #1
 8007c96:	f43f ae78 	beq.w	800798a <_printf_float+0xb6>
 8007c9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c9e:	4631      	mov	r1, r6
 8007ca0:	4628      	mov	r0, r5
 8007ca2:	47b8      	blx	r7
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	f43f ae70 	beq.w	800798a <_printf_float+0xb6>
 8007caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cb6:	f7f8 ff0f 	bl	8000ad8 <__aeabi_dcmpeq>
 8007cba:	b9c0      	cbnz	r0, 8007cee <_printf_float+0x41a>
 8007cbc:	4653      	mov	r3, sl
 8007cbe:	f108 0201 	add.w	r2, r8, #1
 8007cc2:	4631      	mov	r1, r6
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	47b8      	blx	r7
 8007cc8:	3001      	adds	r0, #1
 8007cca:	d10c      	bne.n	8007ce6 <_printf_float+0x412>
 8007ccc:	e65d      	b.n	800798a <_printf_float+0xb6>
 8007cce:	2301      	movs	r3, #1
 8007cd0:	465a      	mov	r2, fp
 8007cd2:	4631      	mov	r1, r6
 8007cd4:	4628      	mov	r0, r5
 8007cd6:	47b8      	blx	r7
 8007cd8:	3001      	adds	r0, #1
 8007cda:	f43f ae56 	beq.w	800798a <_printf_float+0xb6>
 8007cde:	f108 0801 	add.w	r8, r8, #1
 8007ce2:	45d0      	cmp	r8, sl
 8007ce4:	dbf3      	blt.n	8007cce <_printf_float+0x3fa>
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007cec:	e6df      	b.n	8007aae <_printf_float+0x1da>
 8007cee:	f04f 0800 	mov.w	r8, #0
 8007cf2:	f104 0b1a 	add.w	fp, r4, #26
 8007cf6:	e7f4      	b.n	8007ce2 <_printf_float+0x40e>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	4642      	mov	r2, r8
 8007cfc:	e7e1      	b.n	8007cc2 <_printf_float+0x3ee>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	464a      	mov	r2, r9
 8007d02:	4631      	mov	r1, r6
 8007d04:	4628      	mov	r0, r5
 8007d06:	47b8      	blx	r7
 8007d08:	3001      	adds	r0, #1
 8007d0a:	f43f ae3e 	beq.w	800798a <_printf_float+0xb6>
 8007d0e:	f108 0801 	add.w	r8, r8, #1
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d16:	1a5b      	subs	r3, r3, r1
 8007d18:	4543      	cmp	r3, r8
 8007d1a:	dcf0      	bgt.n	8007cfe <_printf_float+0x42a>
 8007d1c:	e6fc      	b.n	8007b18 <_printf_float+0x244>
 8007d1e:	f04f 0800 	mov.w	r8, #0
 8007d22:	f104 0919 	add.w	r9, r4, #25
 8007d26:	e7f4      	b.n	8007d12 <_printf_float+0x43e>

08007d28 <_printf_common>:
 8007d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d2c:	4616      	mov	r6, r2
 8007d2e:	4698      	mov	r8, r3
 8007d30:	688a      	ldr	r2, [r1, #8]
 8007d32:	690b      	ldr	r3, [r1, #16]
 8007d34:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	bfb8      	it	lt
 8007d3c:	4613      	movlt	r3, r2
 8007d3e:	6033      	str	r3, [r6, #0]
 8007d40:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d44:	4607      	mov	r7, r0
 8007d46:	460c      	mov	r4, r1
 8007d48:	b10a      	cbz	r2, 8007d4e <_printf_common+0x26>
 8007d4a:	3301      	adds	r3, #1
 8007d4c:	6033      	str	r3, [r6, #0]
 8007d4e:	6823      	ldr	r3, [r4, #0]
 8007d50:	0699      	lsls	r1, r3, #26
 8007d52:	bf42      	ittt	mi
 8007d54:	6833      	ldrmi	r3, [r6, #0]
 8007d56:	3302      	addmi	r3, #2
 8007d58:	6033      	strmi	r3, [r6, #0]
 8007d5a:	6825      	ldr	r5, [r4, #0]
 8007d5c:	f015 0506 	ands.w	r5, r5, #6
 8007d60:	d106      	bne.n	8007d70 <_printf_common+0x48>
 8007d62:	f104 0a19 	add.w	sl, r4, #25
 8007d66:	68e3      	ldr	r3, [r4, #12]
 8007d68:	6832      	ldr	r2, [r6, #0]
 8007d6a:	1a9b      	subs	r3, r3, r2
 8007d6c:	42ab      	cmp	r3, r5
 8007d6e:	dc26      	bgt.n	8007dbe <_printf_common+0x96>
 8007d70:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007d74:	6822      	ldr	r2, [r4, #0]
 8007d76:	3b00      	subs	r3, #0
 8007d78:	bf18      	it	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	0692      	lsls	r2, r2, #26
 8007d7e:	d42b      	bmi.n	8007dd8 <_printf_common+0xb0>
 8007d80:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007d84:	4641      	mov	r1, r8
 8007d86:	4638      	mov	r0, r7
 8007d88:	47c8      	blx	r9
 8007d8a:	3001      	adds	r0, #1
 8007d8c:	d01e      	beq.n	8007dcc <_printf_common+0xa4>
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	6922      	ldr	r2, [r4, #16]
 8007d92:	f003 0306 	and.w	r3, r3, #6
 8007d96:	2b04      	cmp	r3, #4
 8007d98:	bf02      	ittt	eq
 8007d9a:	68e5      	ldreq	r5, [r4, #12]
 8007d9c:	6833      	ldreq	r3, [r6, #0]
 8007d9e:	1aed      	subeq	r5, r5, r3
 8007da0:	68a3      	ldr	r3, [r4, #8]
 8007da2:	bf0c      	ite	eq
 8007da4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007da8:	2500      	movne	r5, #0
 8007daa:	4293      	cmp	r3, r2
 8007dac:	bfc4      	itt	gt
 8007dae:	1a9b      	subgt	r3, r3, r2
 8007db0:	18ed      	addgt	r5, r5, r3
 8007db2:	2600      	movs	r6, #0
 8007db4:	341a      	adds	r4, #26
 8007db6:	42b5      	cmp	r5, r6
 8007db8:	d11a      	bne.n	8007df0 <_printf_common+0xc8>
 8007dba:	2000      	movs	r0, #0
 8007dbc:	e008      	b.n	8007dd0 <_printf_common+0xa8>
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	4652      	mov	r2, sl
 8007dc2:	4641      	mov	r1, r8
 8007dc4:	4638      	mov	r0, r7
 8007dc6:	47c8      	blx	r9
 8007dc8:	3001      	adds	r0, #1
 8007dca:	d103      	bne.n	8007dd4 <_printf_common+0xac>
 8007dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007dd4:	3501      	adds	r5, #1
 8007dd6:	e7c6      	b.n	8007d66 <_printf_common+0x3e>
 8007dd8:	18e1      	adds	r1, r4, r3
 8007dda:	1c5a      	adds	r2, r3, #1
 8007ddc:	2030      	movs	r0, #48	@ 0x30
 8007dde:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007de2:	4422      	add	r2, r4
 8007de4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007de8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007dec:	3302      	adds	r3, #2
 8007dee:	e7c7      	b.n	8007d80 <_printf_common+0x58>
 8007df0:	2301      	movs	r3, #1
 8007df2:	4622      	mov	r2, r4
 8007df4:	4641      	mov	r1, r8
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c8      	blx	r9
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d0e6      	beq.n	8007dcc <_printf_common+0xa4>
 8007dfe:	3601      	adds	r6, #1
 8007e00:	e7d9      	b.n	8007db6 <_printf_common+0x8e>
	...

08007e04 <_printf_i>:
 8007e04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e08:	7e0f      	ldrb	r7, [r1, #24]
 8007e0a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e0c:	2f78      	cmp	r7, #120	@ 0x78
 8007e0e:	4691      	mov	r9, r2
 8007e10:	4680      	mov	r8, r0
 8007e12:	460c      	mov	r4, r1
 8007e14:	469a      	mov	sl, r3
 8007e16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e1a:	d807      	bhi.n	8007e2c <_printf_i+0x28>
 8007e1c:	2f62      	cmp	r7, #98	@ 0x62
 8007e1e:	d80a      	bhi.n	8007e36 <_printf_i+0x32>
 8007e20:	2f00      	cmp	r7, #0
 8007e22:	f000 80d1 	beq.w	8007fc8 <_printf_i+0x1c4>
 8007e26:	2f58      	cmp	r7, #88	@ 0x58
 8007e28:	f000 80b8 	beq.w	8007f9c <_printf_i+0x198>
 8007e2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e34:	e03a      	b.n	8007eac <_printf_i+0xa8>
 8007e36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e3a:	2b15      	cmp	r3, #21
 8007e3c:	d8f6      	bhi.n	8007e2c <_printf_i+0x28>
 8007e3e:	a101      	add	r1, pc, #4	@ (adr r1, 8007e44 <_printf_i+0x40>)
 8007e40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e44:	08007e9d 	.word	0x08007e9d
 8007e48:	08007eb1 	.word	0x08007eb1
 8007e4c:	08007e2d 	.word	0x08007e2d
 8007e50:	08007e2d 	.word	0x08007e2d
 8007e54:	08007e2d 	.word	0x08007e2d
 8007e58:	08007e2d 	.word	0x08007e2d
 8007e5c:	08007eb1 	.word	0x08007eb1
 8007e60:	08007e2d 	.word	0x08007e2d
 8007e64:	08007e2d 	.word	0x08007e2d
 8007e68:	08007e2d 	.word	0x08007e2d
 8007e6c:	08007e2d 	.word	0x08007e2d
 8007e70:	08007faf 	.word	0x08007faf
 8007e74:	08007edb 	.word	0x08007edb
 8007e78:	08007f69 	.word	0x08007f69
 8007e7c:	08007e2d 	.word	0x08007e2d
 8007e80:	08007e2d 	.word	0x08007e2d
 8007e84:	08007fd1 	.word	0x08007fd1
 8007e88:	08007e2d 	.word	0x08007e2d
 8007e8c:	08007edb 	.word	0x08007edb
 8007e90:	08007e2d 	.word	0x08007e2d
 8007e94:	08007e2d 	.word	0x08007e2d
 8007e98:	08007f71 	.word	0x08007f71
 8007e9c:	6833      	ldr	r3, [r6, #0]
 8007e9e:	1d1a      	adds	r2, r3, #4
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6032      	str	r2, [r6, #0]
 8007ea4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ea8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007eac:	2301      	movs	r3, #1
 8007eae:	e09c      	b.n	8007fea <_printf_i+0x1e6>
 8007eb0:	6833      	ldr	r3, [r6, #0]
 8007eb2:	6820      	ldr	r0, [r4, #0]
 8007eb4:	1d19      	adds	r1, r3, #4
 8007eb6:	6031      	str	r1, [r6, #0]
 8007eb8:	0606      	lsls	r6, r0, #24
 8007eba:	d501      	bpl.n	8007ec0 <_printf_i+0xbc>
 8007ebc:	681d      	ldr	r5, [r3, #0]
 8007ebe:	e003      	b.n	8007ec8 <_printf_i+0xc4>
 8007ec0:	0645      	lsls	r5, r0, #25
 8007ec2:	d5fb      	bpl.n	8007ebc <_printf_i+0xb8>
 8007ec4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ec8:	2d00      	cmp	r5, #0
 8007eca:	da03      	bge.n	8007ed4 <_printf_i+0xd0>
 8007ecc:	232d      	movs	r3, #45	@ 0x2d
 8007ece:	426d      	negs	r5, r5
 8007ed0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ed4:	4858      	ldr	r0, [pc, #352]	@ (8008038 <_printf_i+0x234>)
 8007ed6:	230a      	movs	r3, #10
 8007ed8:	e011      	b.n	8007efe <_printf_i+0xfa>
 8007eda:	6821      	ldr	r1, [r4, #0]
 8007edc:	6833      	ldr	r3, [r6, #0]
 8007ede:	0608      	lsls	r0, r1, #24
 8007ee0:	f853 5b04 	ldr.w	r5, [r3], #4
 8007ee4:	d402      	bmi.n	8007eec <_printf_i+0xe8>
 8007ee6:	0649      	lsls	r1, r1, #25
 8007ee8:	bf48      	it	mi
 8007eea:	b2ad      	uxthmi	r5, r5
 8007eec:	2f6f      	cmp	r7, #111	@ 0x6f
 8007eee:	4852      	ldr	r0, [pc, #328]	@ (8008038 <_printf_i+0x234>)
 8007ef0:	6033      	str	r3, [r6, #0]
 8007ef2:	bf14      	ite	ne
 8007ef4:	230a      	movne	r3, #10
 8007ef6:	2308      	moveq	r3, #8
 8007ef8:	2100      	movs	r1, #0
 8007efa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007efe:	6866      	ldr	r6, [r4, #4]
 8007f00:	60a6      	str	r6, [r4, #8]
 8007f02:	2e00      	cmp	r6, #0
 8007f04:	db05      	blt.n	8007f12 <_printf_i+0x10e>
 8007f06:	6821      	ldr	r1, [r4, #0]
 8007f08:	432e      	orrs	r6, r5
 8007f0a:	f021 0104 	bic.w	r1, r1, #4
 8007f0e:	6021      	str	r1, [r4, #0]
 8007f10:	d04b      	beq.n	8007faa <_printf_i+0x1a6>
 8007f12:	4616      	mov	r6, r2
 8007f14:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f18:	fb03 5711 	mls	r7, r3, r1, r5
 8007f1c:	5dc7      	ldrb	r7, [r0, r7]
 8007f1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f22:	462f      	mov	r7, r5
 8007f24:	42bb      	cmp	r3, r7
 8007f26:	460d      	mov	r5, r1
 8007f28:	d9f4      	bls.n	8007f14 <_printf_i+0x110>
 8007f2a:	2b08      	cmp	r3, #8
 8007f2c:	d10b      	bne.n	8007f46 <_printf_i+0x142>
 8007f2e:	6823      	ldr	r3, [r4, #0]
 8007f30:	07df      	lsls	r7, r3, #31
 8007f32:	d508      	bpl.n	8007f46 <_printf_i+0x142>
 8007f34:	6923      	ldr	r3, [r4, #16]
 8007f36:	6861      	ldr	r1, [r4, #4]
 8007f38:	4299      	cmp	r1, r3
 8007f3a:	bfde      	ittt	le
 8007f3c:	2330      	movle	r3, #48	@ 0x30
 8007f3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f46:	1b92      	subs	r2, r2, r6
 8007f48:	6122      	str	r2, [r4, #16]
 8007f4a:	f8cd a000 	str.w	sl, [sp]
 8007f4e:	464b      	mov	r3, r9
 8007f50:	aa03      	add	r2, sp, #12
 8007f52:	4621      	mov	r1, r4
 8007f54:	4640      	mov	r0, r8
 8007f56:	f7ff fee7 	bl	8007d28 <_printf_common>
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	d14a      	bne.n	8007ff4 <_printf_i+0x1f0>
 8007f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8007f62:	b004      	add	sp, #16
 8007f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	f043 0320 	orr.w	r3, r3, #32
 8007f6e:	6023      	str	r3, [r4, #0]
 8007f70:	4832      	ldr	r0, [pc, #200]	@ (800803c <_printf_i+0x238>)
 8007f72:	2778      	movs	r7, #120	@ 0x78
 8007f74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007f78:	6823      	ldr	r3, [r4, #0]
 8007f7a:	6831      	ldr	r1, [r6, #0]
 8007f7c:	061f      	lsls	r7, r3, #24
 8007f7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007f82:	d402      	bmi.n	8007f8a <_printf_i+0x186>
 8007f84:	065f      	lsls	r7, r3, #25
 8007f86:	bf48      	it	mi
 8007f88:	b2ad      	uxthmi	r5, r5
 8007f8a:	6031      	str	r1, [r6, #0]
 8007f8c:	07d9      	lsls	r1, r3, #31
 8007f8e:	bf44      	itt	mi
 8007f90:	f043 0320 	orrmi.w	r3, r3, #32
 8007f94:	6023      	strmi	r3, [r4, #0]
 8007f96:	b11d      	cbz	r5, 8007fa0 <_printf_i+0x19c>
 8007f98:	2310      	movs	r3, #16
 8007f9a:	e7ad      	b.n	8007ef8 <_printf_i+0xf4>
 8007f9c:	4826      	ldr	r0, [pc, #152]	@ (8008038 <_printf_i+0x234>)
 8007f9e:	e7e9      	b.n	8007f74 <_printf_i+0x170>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	f023 0320 	bic.w	r3, r3, #32
 8007fa6:	6023      	str	r3, [r4, #0]
 8007fa8:	e7f6      	b.n	8007f98 <_printf_i+0x194>
 8007faa:	4616      	mov	r6, r2
 8007fac:	e7bd      	b.n	8007f2a <_printf_i+0x126>
 8007fae:	6833      	ldr	r3, [r6, #0]
 8007fb0:	6825      	ldr	r5, [r4, #0]
 8007fb2:	6961      	ldr	r1, [r4, #20]
 8007fb4:	1d18      	adds	r0, r3, #4
 8007fb6:	6030      	str	r0, [r6, #0]
 8007fb8:	062e      	lsls	r6, r5, #24
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	d501      	bpl.n	8007fc2 <_printf_i+0x1be>
 8007fbe:	6019      	str	r1, [r3, #0]
 8007fc0:	e002      	b.n	8007fc8 <_printf_i+0x1c4>
 8007fc2:	0668      	lsls	r0, r5, #25
 8007fc4:	d5fb      	bpl.n	8007fbe <_printf_i+0x1ba>
 8007fc6:	8019      	strh	r1, [r3, #0]
 8007fc8:	2300      	movs	r3, #0
 8007fca:	6123      	str	r3, [r4, #16]
 8007fcc:	4616      	mov	r6, r2
 8007fce:	e7bc      	b.n	8007f4a <_printf_i+0x146>
 8007fd0:	6833      	ldr	r3, [r6, #0]
 8007fd2:	1d1a      	adds	r2, r3, #4
 8007fd4:	6032      	str	r2, [r6, #0]
 8007fd6:	681e      	ldr	r6, [r3, #0]
 8007fd8:	6862      	ldr	r2, [r4, #4]
 8007fda:	2100      	movs	r1, #0
 8007fdc:	4630      	mov	r0, r6
 8007fde:	f7f8 f8ff 	bl	80001e0 <memchr>
 8007fe2:	b108      	cbz	r0, 8007fe8 <_printf_i+0x1e4>
 8007fe4:	1b80      	subs	r0, r0, r6
 8007fe6:	6060      	str	r0, [r4, #4]
 8007fe8:	6863      	ldr	r3, [r4, #4]
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	2300      	movs	r3, #0
 8007fee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ff2:	e7aa      	b.n	8007f4a <_printf_i+0x146>
 8007ff4:	6923      	ldr	r3, [r4, #16]
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	4640      	mov	r0, r8
 8007ffc:	47d0      	blx	sl
 8007ffe:	3001      	adds	r0, #1
 8008000:	d0ad      	beq.n	8007f5e <_printf_i+0x15a>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	079b      	lsls	r3, r3, #30
 8008006:	d413      	bmi.n	8008030 <_printf_i+0x22c>
 8008008:	68e0      	ldr	r0, [r4, #12]
 800800a:	9b03      	ldr	r3, [sp, #12]
 800800c:	4298      	cmp	r0, r3
 800800e:	bfb8      	it	lt
 8008010:	4618      	movlt	r0, r3
 8008012:	e7a6      	b.n	8007f62 <_printf_i+0x15e>
 8008014:	2301      	movs	r3, #1
 8008016:	4632      	mov	r2, r6
 8008018:	4649      	mov	r1, r9
 800801a:	4640      	mov	r0, r8
 800801c:	47d0      	blx	sl
 800801e:	3001      	adds	r0, #1
 8008020:	d09d      	beq.n	8007f5e <_printf_i+0x15a>
 8008022:	3501      	adds	r5, #1
 8008024:	68e3      	ldr	r3, [r4, #12]
 8008026:	9903      	ldr	r1, [sp, #12]
 8008028:	1a5b      	subs	r3, r3, r1
 800802a:	42ab      	cmp	r3, r5
 800802c:	dcf2      	bgt.n	8008014 <_printf_i+0x210>
 800802e:	e7eb      	b.n	8008008 <_printf_i+0x204>
 8008030:	2500      	movs	r5, #0
 8008032:	f104 0619 	add.w	r6, r4, #25
 8008036:	e7f5      	b.n	8008024 <_printf_i+0x220>
 8008038:	0800a1b2 	.word	0x0800a1b2
 800803c:	0800a1c3 	.word	0x0800a1c3

08008040 <std>:
 8008040:	2300      	movs	r3, #0
 8008042:	b510      	push	{r4, lr}
 8008044:	4604      	mov	r4, r0
 8008046:	e9c0 3300 	strd	r3, r3, [r0]
 800804a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800804e:	6083      	str	r3, [r0, #8]
 8008050:	8181      	strh	r1, [r0, #12]
 8008052:	6643      	str	r3, [r0, #100]	@ 0x64
 8008054:	81c2      	strh	r2, [r0, #14]
 8008056:	6183      	str	r3, [r0, #24]
 8008058:	4619      	mov	r1, r3
 800805a:	2208      	movs	r2, #8
 800805c:	305c      	adds	r0, #92	@ 0x5c
 800805e:	f000 f906 	bl	800826e <memset>
 8008062:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <std+0x58>)
 8008064:	6263      	str	r3, [r4, #36]	@ 0x24
 8008066:	4b0d      	ldr	r3, [pc, #52]	@ (800809c <std+0x5c>)
 8008068:	62a3      	str	r3, [r4, #40]	@ 0x28
 800806a:	4b0d      	ldr	r3, [pc, #52]	@ (80080a0 <std+0x60>)
 800806c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800806e:	4b0d      	ldr	r3, [pc, #52]	@ (80080a4 <std+0x64>)
 8008070:	6323      	str	r3, [r4, #48]	@ 0x30
 8008072:	4b0d      	ldr	r3, [pc, #52]	@ (80080a8 <std+0x68>)
 8008074:	6224      	str	r4, [r4, #32]
 8008076:	429c      	cmp	r4, r3
 8008078:	d006      	beq.n	8008088 <std+0x48>
 800807a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800807e:	4294      	cmp	r4, r2
 8008080:	d002      	beq.n	8008088 <std+0x48>
 8008082:	33d0      	adds	r3, #208	@ 0xd0
 8008084:	429c      	cmp	r4, r3
 8008086:	d105      	bne.n	8008094 <std+0x54>
 8008088:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800808c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008090:	f000 b96a 	b.w	8008368 <__retarget_lock_init_recursive>
 8008094:	bd10      	pop	{r4, pc}
 8008096:	bf00      	nop
 8008098:	080081e9 	.word	0x080081e9
 800809c:	0800820b 	.word	0x0800820b
 80080a0:	08008243 	.word	0x08008243
 80080a4:	08008267 	.word	0x08008267
 80080a8:	2000049c 	.word	0x2000049c

080080ac <stdio_exit_handler>:
 80080ac:	4a02      	ldr	r2, [pc, #8]	@ (80080b8 <stdio_exit_handler+0xc>)
 80080ae:	4903      	ldr	r1, [pc, #12]	@ (80080bc <stdio_exit_handler+0x10>)
 80080b0:	4803      	ldr	r0, [pc, #12]	@ (80080c0 <stdio_exit_handler+0x14>)
 80080b2:	f000 b869 	b.w	8008188 <_fwalk_sglue>
 80080b6:	bf00      	nop
 80080b8:	2000002c 	.word	0x2000002c
 80080bc:	08009ca1 	.word	0x08009ca1
 80080c0:	2000003c 	.word	0x2000003c

080080c4 <cleanup_stdio>:
 80080c4:	6841      	ldr	r1, [r0, #4]
 80080c6:	4b0c      	ldr	r3, [pc, #48]	@ (80080f8 <cleanup_stdio+0x34>)
 80080c8:	4299      	cmp	r1, r3
 80080ca:	b510      	push	{r4, lr}
 80080cc:	4604      	mov	r4, r0
 80080ce:	d001      	beq.n	80080d4 <cleanup_stdio+0x10>
 80080d0:	f001 fde6 	bl	8009ca0 <_fflush_r>
 80080d4:	68a1      	ldr	r1, [r4, #8]
 80080d6:	4b09      	ldr	r3, [pc, #36]	@ (80080fc <cleanup_stdio+0x38>)
 80080d8:	4299      	cmp	r1, r3
 80080da:	d002      	beq.n	80080e2 <cleanup_stdio+0x1e>
 80080dc:	4620      	mov	r0, r4
 80080de:	f001 fddf 	bl	8009ca0 <_fflush_r>
 80080e2:	68e1      	ldr	r1, [r4, #12]
 80080e4:	4b06      	ldr	r3, [pc, #24]	@ (8008100 <cleanup_stdio+0x3c>)
 80080e6:	4299      	cmp	r1, r3
 80080e8:	d004      	beq.n	80080f4 <cleanup_stdio+0x30>
 80080ea:	4620      	mov	r0, r4
 80080ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080f0:	f001 bdd6 	b.w	8009ca0 <_fflush_r>
 80080f4:	bd10      	pop	{r4, pc}
 80080f6:	bf00      	nop
 80080f8:	2000049c 	.word	0x2000049c
 80080fc:	20000504 	.word	0x20000504
 8008100:	2000056c 	.word	0x2000056c

08008104 <global_stdio_init.part.0>:
 8008104:	b510      	push	{r4, lr}
 8008106:	4b0b      	ldr	r3, [pc, #44]	@ (8008134 <global_stdio_init.part.0+0x30>)
 8008108:	4c0b      	ldr	r4, [pc, #44]	@ (8008138 <global_stdio_init.part.0+0x34>)
 800810a:	4a0c      	ldr	r2, [pc, #48]	@ (800813c <global_stdio_init.part.0+0x38>)
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	4620      	mov	r0, r4
 8008110:	2200      	movs	r2, #0
 8008112:	2104      	movs	r1, #4
 8008114:	f7ff ff94 	bl	8008040 <std>
 8008118:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800811c:	2201      	movs	r2, #1
 800811e:	2109      	movs	r1, #9
 8008120:	f7ff ff8e 	bl	8008040 <std>
 8008124:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008128:	2202      	movs	r2, #2
 800812a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800812e:	2112      	movs	r1, #18
 8008130:	f7ff bf86 	b.w	8008040 <std>
 8008134:	200005d4 	.word	0x200005d4
 8008138:	2000049c 	.word	0x2000049c
 800813c:	080080ad 	.word	0x080080ad

08008140 <__sfp_lock_acquire>:
 8008140:	4801      	ldr	r0, [pc, #4]	@ (8008148 <__sfp_lock_acquire+0x8>)
 8008142:	f000 b912 	b.w	800836a <__retarget_lock_acquire_recursive>
 8008146:	bf00      	nop
 8008148:	200005dd 	.word	0x200005dd

0800814c <__sfp_lock_release>:
 800814c:	4801      	ldr	r0, [pc, #4]	@ (8008154 <__sfp_lock_release+0x8>)
 800814e:	f000 b90d 	b.w	800836c <__retarget_lock_release_recursive>
 8008152:	bf00      	nop
 8008154:	200005dd 	.word	0x200005dd

08008158 <__sinit>:
 8008158:	b510      	push	{r4, lr}
 800815a:	4604      	mov	r4, r0
 800815c:	f7ff fff0 	bl	8008140 <__sfp_lock_acquire>
 8008160:	6a23      	ldr	r3, [r4, #32]
 8008162:	b11b      	cbz	r3, 800816c <__sinit+0x14>
 8008164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008168:	f7ff bff0 	b.w	800814c <__sfp_lock_release>
 800816c:	4b04      	ldr	r3, [pc, #16]	@ (8008180 <__sinit+0x28>)
 800816e:	6223      	str	r3, [r4, #32]
 8008170:	4b04      	ldr	r3, [pc, #16]	@ (8008184 <__sinit+0x2c>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d1f5      	bne.n	8008164 <__sinit+0xc>
 8008178:	f7ff ffc4 	bl	8008104 <global_stdio_init.part.0>
 800817c:	e7f2      	b.n	8008164 <__sinit+0xc>
 800817e:	bf00      	nop
 8008180:	080080c5 	.word	0x080080c5
 8008184:	200005d4 	.word	0x200005d4

08008188 <_fwalk_sglue>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	4607      	mov	r7, r0
 800818e:	4688      	mov	r8, r1
 8008190:	4614      	mov	r4, r2
 8008192:	2600      	movs	r6, #0
 8008194:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008198:	f1b9 0901 	subs.w	r9, r9, #1
 800819c:	d505      	bpl.n	80081aa <_fwalk_sglue+0x22>
 800819e:	6824      	ldr	r4, [r4, #0]
 80081a0:	2c00      	cmp	r4, #0
 80081a2:	d1f7      	bne.n	8008194 <_fwalk_sglue+0xc>
 80081a4:	4630      	mov	r0, r6
 80081a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d907      	bls.n	80081c0 <_fwalk_sglue+0x38>
 80081b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081b4:	3301      	adds	r3, #1
 80081b6:	d003      	beq.n	80081c0 <_fwalk_sglue+0x38>
 80081b8:	4629      	mov	r1, r5
 80081ba:	4638      	mov	r0, r7
 80081bc:	47c0      	blx	r8
 80081be:	4306      	orrs	r6, r0
 80081c0:	3568      	adds	r5, #104	@ 0x68
 80081c2:	e7e9      	b.n	8008198 <_fwalk_sglue+0x10>

080081c4 <iprintf>:
 80081c4:	b40f      	push	{r0, r1, r2, r3}
 80081c6:	b507      	push	{r0, r1, r2, lr}
 80081c8:	4906      	ldr	r1, [pc, #24]	@ (80081e4 <iprintf+0x20>)
 80081ca:	ab04      	add	r3, sp, #16
 80081cc:	6808      	ldr	r0, [r1, #0]
 80081ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80081d2:	6881      	ldr	r1, [r0, #8]
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	f001 fbc7 	bl	8009968 <_vfiprintf_r>
 80081da:	b003      	add	sp, #12
 80081dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80081e0:	b004      	add	sp, #16
 80081e2:	4770      	bx	lr
 80081e4:	20000038 	.word	0x20000038

080081e8 <__sread>:
 80081e8:	b510      	push	{r4, lr}
 80081ea:	460c      	mov	r4, r1
 80081ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f0:	f000 f86c 	bl	80082cc <_read_r>
 80081f4:	2800      	cmp	r0, #0
 80081f6:	bfab      	itete	ge
 80081f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081fa:	89a3      	ldrhlt	r3, [r4, #12]
 80081fc:	181b      	addge	r3, r3, r0
 80081fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008202:	bfac      	ite	ge
 8008204:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008206:	81a3      	strhlt	r3, [r4, #12]
 8008208:	bd10      	pop	{r4, pc}

0800820a <__swrite>:
 800820a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800820e:	461f      	mov	r7, r3
 8008210:	898b      	ldrh	r3, [r1, #12]
 8008212:	05db      	lsls	r3, r3, #23
 8008214:	4605      	mov	r5, r0
 8008216:	460c      	mov	r4, r1
 8008218:	4616      	mov	r6, r2
 800821a:	d505      	bpl.n	8008228 <__swrite+0x1e>
 800821c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008220:	2302      	movs	r3, #2
 8008222:	2200      	movs	r2, #0
 8008224:	f000 f840 	bl	80082a8 <_lseek_r>
 8008228:	89a3      	ldrh	r3, [r4, #12]
 800822a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800822e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	4632      	mov	r2, r6
 8008236:	463b      	mov	r3, r7
 8008238:	4628      	mov	r0, r5
 800823a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800823e:	f000 b857 	b.w	80082f0 <_write_r>

08008242 <__sseek>:
 8008242:	b510      	push	{r4, lr}
 8008244:	460c      	mov	r4, r1
 8008246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800824a:	f000 f82d 	bl	80082a8 <_lseek_r>
 800824e:	1c43      	adds	r3, r0, #1
 8008250:	89a3      	ldrh	r3, [r4, #12]
 8008252:	bf15      	itete	ne
 8008254:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008256:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800825a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800825e:	81a3      	strheq	r3, [r4, #12]
 8008260:	bf18      	it	ne
 8008262:	81a3      	strhne	r3, [r4, #12]
 8008264:	bd10      	pop	{r4, pc}

08008266 <__sclose>:
 8008266:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800826a:	f000 b80d 	b.w	8008288 <_close_r>

0800826e <memset>:
 800826e:	4402      	add	r2, r0
 8008270:	4603      	mov	r3, r0
 8008272:	4293      	cmp	r3, r2
 8008274:	d100      	bne.n	8008278 <memset+0xa>
 8008276:	4770      	bx	lr
 8008278:	f803 1b01 	strb.w	r1, [r3], #1
 800827c:	e7f9      	b.n	8008272 <memset+0x4>
	...

08008280 <_localeconv_r>:
 8008280:	4800      	ldr	r0, [pc, #0]	@ (8008284 <_localeconv_r+0x4>)
 8008282:	4770      	bx	lr
 8008284:	20000178 	.word	0x20000178

08008288 <_close_r>:
 8008288:	b538      	push	{r3, r4, r5, lr}
 800828a:	4d06      	ldr	r5, [pc, #24]	@ (80082a4 <_close_r+0x1c>)
 800828c:	2300      	movs	r3, #0
 800828e:	4604      	mov	r4, r0
 8008290:	4608      	mov	r0, r1
 8008292:	602b      	str	r3, [r5, #0]
 8008294:	f7f9 fd26 	bl	8001ce4 <_close>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_close_r+0x1a>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_close_r+0x1a>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	200005d8 	.word	0x200005d8

080082a8 <_lseek_r>:
 80082a8:	b538      	push	{r3, r4, r5, lr}
 80082aa:	4d07      	ldr	r5, [pc, #28]	@ (80082c8 <_lseek_r+0x20>)
 80082ac:	4604      	mov	r4, r0
 80082ae:	4608      	mov	r0, r1
 80082b0:	4611      	mov	r1, r2
 80082b2:	2200      	movs	r2, #0
 80082b4:	602a      	str	r2, [r5, #0]
 80082b6:	461a      	mov	r2, r3
 80082b8:	f7f9 fd3b 	bl	8001d32 <_lseek>
 80082bc:	1c43      	adds	r3, r0, #1
 80082be:	d102      	bne.n	80082c6 <_lseek_r+0x1e>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	b103      	cbz	r3, 80082c6 <_lseek_r+0x1e>
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	bd38      	pop	{r3, r4, r5, pc}
 80082c8:	200005d8 	.word	0x200005d8

080082cc <_read_r>:
 80082cc:	b538      	push	{r3, r4, r5, lr}
 80082ce:	4d07      	ldr	r5, [pc, #28]	@ (80082ec <_read_r+0x20>)
 80082d0:	4604      	mov	r4, r0
 80082d2:	4608      	mov	r0, r1
 80082d4:	4611      	mov	r1, r2
 80082d6:	2200      	movs	r2, #0
 80082d8:	602a      	str	r2, [r5, #0]
 80082da:	461a      	mov	r2, r3
 80082dc:	f7f9 fcc9 	bl	8001c72 <_read>
 80082e0:	1c43      	adds	r3, r0, #1
 80082e2:	d102      	bne.n	80082ea <_read_r+0x1e>
 80082e4:	682b      	ldr	r3, [r5, #0]
 80082e6:	b103      	cbz	r3, 80082ea <_read_r+0x1e>
 80082e8:	6023      	str	r3, [r4, #0]
 80082ea:	bd38      	pop	{r3, r4, r5, pc}
 80082ec:	200005d8 	.word	0x200005d8

080082f0 <_write_r>:
 80082f0:	b538      	push	{r3, r4, r5, lr}
 80082f2:	4d07      	ldr	r5, [pc, #28]	@ (8008310 <_write_r+0x20>)
 80082f4:	4604      	mov	r4, r0
 80082f6:	4608      	mov	r0, r1
 80082f8:	4611      	mov	r1, r2
 80082fa:	2200      	movs	r2, #0
 80082fc:	602a      	str	r2, [r5, #0]
 80082fe:	461a      	mov	r2, r3
 8008300:	f7f9 fcd4 	bl	8001cac <_write>
 8008304:	1c43      	adds	r3, r0, #1
 8008306:	d102      	bne.n	800830e <_write_r+0x1e>
 8008308:	682b      	ldr	r3, [r5, #0]
 800830a:	b103      	cbz	r3, 800830e <_write_r+0x1e>
 800830c:	6023      	str	r3, [r4, #0]
 800830e:	bd38      	pop	{r3, r4, r5, pc}
 8008310:	200005d8 	.word	0x200005d8

08008314 <__errno>:
 8008314:	4b01      	ldr	r3, [pc, #4]	@ (800831c <__errno+0x8>)
 8008316:	6818      	ldr	r0, [r3, #0]
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20000038 	.word	0x20000038

08008320 <__libc_init_array>:
 8008320:	b570      	push	{r4, r5, r6, lr}
 8008322:	4d0d      	ldr	r5, [pc, #52]	@ (8008358 <__libc_init_array+0x38>)
 8008324:	4c0d      	ldr	r4, [pc, #52]	@ (800835c <__libc_init_array+0x3c>)
 8008326:	1b64      	subs	r4, r4, r5
 8008328:	10a4      	asrs	r4, r4, #2
 800832a:	2600      	movs	r6, #0
 800832c:	42a6      	cmp	r6, r4
 800832e:	d109      	bne.n	8008344 <__libc_init_array+0x24>
 8008330:	4d0b      	ldr	r5, [pc, #44]	@ (8008360 <__libc_init_array+0x40>)
 8008332:	4c0c      	ldr	r4, [pc, #48]	@ (8008364 <__libc_init_array+0x44>)
 8008334:	f001 fee6 	bl	800a104 <_init>
 8008338:	1b64      	subs	r4, r4, r5
 800833a:	10a4      	asrs	r4, r4, #2
 800833c:	2600      	movs	r6, #0
 800833e:	42a6      	cmp	r6, r4
 8008340:	d105      	bne.n	800834e <__libc_init_array+0x2e>
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	f855 3b04 	ldr.w	r3, [r5], #4
 8008348:	4798      	blx	r3
 800834a:	3601      	adds	r6, #1
 800834c:	e7ee      	b.n	800832c <__libc_init_array+0xc>
 800834e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008352:	4798      	blx	r3
 8008354:	3601      	adds	r6, #1
 8008356:	e7f2      	b.n	800833e <__libc_init_array+0x1e>
 8008358:	0800a51c 	.word	0x0800a51c
 800835c:	0800a51c 	.word	0x0800a51c
 8008360:	0800a51c 	.word	0x0800a51c
 8008364:	0800a520 	.word	0x0800a520

08008368 <__retarget_lock_init_recursive>:
 8008368:	4770      	bx	lr

0800836a <__retarget_lock_acquire_recursive>:
 800836a:	4770      	bx	lr

0800836c <__retarget_lock_release_recursive>:
 800836c:	4770      	bx	lr

0800836e <quorem>:
 800836e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008372:	6903      	ldr	r3, [r0, #16]
 8008374:	690c      	ldr	r4, [r1, #16]
 8008376:	42a3      	cmp	r3, r4
 8008378:	4607      	mov	r7, r0
 800837a:	db7e      	blt.n	800847a <quorem+0x10c>
 800837c:	3c01      	subs	r4, #1
 800837e:	f101 0814 	add.w	r8, r1, #20
 8008382:	00a3      	lsls	r3, r4, #2
 8008384:	f100 0514 	add.w	r5, r0, #20
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008394:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008398:	3301      	adds	r3, #1
 800839a:	429a      	cmp	r2, r3
 800839c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083a0:	fbb2 f6f3 	udiv	r6, r2, r3
 80083a4:	d32e      	bcc.n	8008404 <quorem+0x96>
 80083a6:	f04f 0a00 	mov.w	sl, #0
 80083aa:	46c4      	mov	ip, r8
 80083ac:	46ae      	mov	lr, r5
 80083ae:	46d3      	mov	fp, sl
 80083b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80083b4:	b298      	uxth	r0, r3
 80083b6:	fb06 a000 	mla	r0, r6, r0, sl
 80083ba:	0c02      	lsrs	r2, r0, #16
 80083bc:	0c1b      	lsrs	r3, r3, #16
 80083be:	fb06 2303 	mla	r3, r6, r3, r2
 80083c2:	f8de 2000 	ldr.w	r2, [lr]
 80083c6:	b280      	uxth	r0, r0
 80083c8:	b292      	uxth	r2, r2
 80083ca:	1a12      	subs	r2, r2, r0
 80083cc:	445a      	add	r2, fp
 80083ce:	f8de 0000 	ldr.w	r0, [lr]
 80083d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80083dc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80083e0:	b292      	uxth	r2, r2
 80083e2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80083e6:	45e1      	cmp	r9, ip
 80083e8:	f84e 2b04 	str.w	r2, [lr], #4
 80083ec:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80083f0:	d2de      	bcs.n	80083b0 <quorem+0x42>
 80083f2:	9b00      	ldr	r3, [sp, #0]
 80083f4:	58eb      	ldr	r3, [r5, r3]
 80083f6:	b92b      	cbnz	r3, 8008404 <quorem+0x96>
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	3b04      	subs	r3, #4
 80083fc:	429d      	cmp	r5, r3
 80083fe:	461a      	mov	r2, r3
 8008400:	d32f      	bcc.n	8008462 <quorem+0xf4>
 8008402:	613c      	str	r4, [r7, #16]
 8008404:	4638      	mov	r0, r7
 8008406:	f001 f97d 	bl	8009704 <__mcmp>
 800840a:	2800      	cmp	r0, #0
 800840c:	db25      	blt.n	800845a <quorem+0xec>
 800840e:	4629      	mov	r1, r5
 8008410:	2000      	movs	r0, #0
 8008412:	f858 2b04 	ldr.w	r2, [r8], #4
 8008416:	f8d1 c000 	ldr.w	ip, [r1]
 800841a:	fa1f fe82 	uxth.w	lr, r2
 800841e:	fa1f f38c 	uxth.w	r3, ip
 8008422:	eba3 030e 	sub.w	r3, r3, lr
 8008426:	4403      	add	r3, r0
 8008428:	0c12      	lsrs	r2, r2, #16
 800842a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800842e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008432:	b29b      	uxth	r3, r3
 8008434:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008438:	45c1      	cmp	r9, r8
 800843a:	f841 3b04 	str.w	r3, [r1], #4
 800843e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008442:	d2e6      	bcs.n	8008412 <quorem+0xa4>
 8008444:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008448:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800844c:	b922      	cbnz	r2, 8008458 <quorem+0xea>
 800844e:	3b04      	subs	r3, #4
 8008450:	429d      	cmp	r5, r3
 8008452:	461a      	mov	r2, r3
 8008454:	d30b      	bcc.n	800846e <quorem+0x100>
 8008456:	613c      	str	r4, [r7, #16]
 8008458:	3601      	adds	r6, #1
 800845a:	4630      	mov	r0, r6
 800845c:	b003      	add	sp, #12
 800845e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008462:	6812      	ldr	r2, [r2, #0]
 8008464:	3b04      	subs	r3, #4
 8008466:	2a00      	cmp	r2, #0
 8008468:	d1cb      	bne.n	8008402 <quorem+0x94>
 800846a:	3c01      	subs	r4, #1
 800846c:	e7c6      	b.n	80083fc <quorem+0x8e>
 800846e:	6812      	ldr	r2, [r2, #0]
 8008470:	3b04      	subs	r3, #4
 8008472:	2a00      	cmp	r2, #0
 8008474:	d1ef      	bne.n	8008456 <quorem+0xe8>
 8008476:	3c01      	subs	r4, #1
 8008478:	e7ea      	b.n	8008450 <quorem+0xe2>
 800847a:	2000      	movs	r0, #0
 800847c:	e7ee      	b.n	800845c <quorem+0xee>
	...

08008480 <_dtoa_r>:
 8008480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008484:	69c7      	ldr	r7, [r0, #28]
 8008486:	b097      	sub	sp, #92	@ 0x5c
 8008488:	ed8d 0b04 	vstr	d0, [sp, #16]
 800848c:	ec55 4b10 	vmov	r4, r5, d0
 8008490:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8008492:	9107      	str	r1, [sp, #28]
 8008494:	4681      	mov	r9, r0
 8008496:	920c      	str	r2, [sp, #48]	@ 0x30
 8008498:	9311      	str	r3, [sp, #68]	@ 0x44
 800849a:	b97f      	cbnz	r7, 80084bc <_dtoa_r+0x3c>
 800849c:	2010      	movs	r0, #16
 800849e:	f000 fe09 	bl	80090b4 <malloc>
 80084a2:	4602      	mov	r2, r0
 80084a4:	f8c9 001c 	str.w	r0, [r9, #28]
 80084a8:	b920      	cbnz	r0, 80084b4 <_dtoa_r+0x34>
 80084aa:	4ba9      	ldr	r3, [pc, #676]	@ (8008750 <_dtoa_r+0x2d0>)
 80084ac:	21ef      	movs	r1, #239	@ 0xef
 80084ae:	48a9      	ldr	r0, [pc, #676]	@ (8008754 <_dtoa_r+0x2d4>)
 80084b0:	f001 fcd0 	bl	8009e54 <__assert_func>
 80084b4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80084b8:	6007      	str	r7, [r0, #0]
 80084ba:	60c7      	str	r7, [r0, #12]
 80084bc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084c0:	6819      	ldr	r1, [r3, #0]
 80084c2:	b159      	cbz	r1, 80084dc <_dtoa_r+0x5c>
 80084c4:	685a      	ldr	r2, [r3, #4]
 80084c6:	604a      	str	r2, [r1, #4]
 80084c8:	2301      	movs	r3, #1
 80084ca:	4093      	lsls	r3, r2
 80084cc:	608b      	str	r3, [r1, #8]
 80084ce:	4648      	mov	r0, r9
 80084d0:	f000 fee6 	bl	80092a0 <_Bfree>
 80084d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80084d8:	2200      	movs	r2, #0
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	1e2b      	subs	r3, r5, #0
 80084de:	bfb9      	ittee	lt
 80084e0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80084e4:	9305      	strlt	r3, [sp, #20]
 80084e6:	2300      	movge	r3, #0
 80084e8:	6033      	strge	r3, [r6, #0]
 80084ea:	9f05      	ldr	r7, [sp, #20]
 80084ec:	4b9a      	ldr	r3, [pc, #616]	@ (8008758 <_dtoa_r+0x2d8>)
 80084ee:	bfbc      	itt	lt
 80084f0:	2201      	movlt	r2, #1
 80084f2:	6032      	strlt	r2, [r6, #0]
 80084f4:	43bb      	bics	r3, r7
 80084f6:	d112      	bne.n	800851e <_dtoa_r+0x9e>
 80084f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80084fa:	f242 730f 	movw	r3, #9999	@ 0x270f
 80084fe:	6013      	str	r3, [r2, #0]
 8008500:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008504:	4323      	orrs	r3, r4
 8008506:	f000 855a 	beq.w	8008fbe <_dtoa_r+0xb3e>
 800850a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800850c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800876c <_dtoa_r+0x2ec>
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 855c 	beq.w	8008fce <_dtoa_r+0xb4e>
 8008516:	f10a 0303 	add.w	r3, sl, #3
 800851a:	f000 bd56 	b.w	8008fca <_dtoa_r+0xb4a>
 800851e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008522:	2200      	movs	r2, #0
 8008524:	ec51 0b17 	vmov	r0, r1, d7
 8008528:	2300      	movs	r3, #0
 800852a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800852e:	f7f8 fad3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008532:	4680      	mov	r8, r0
 8008534:	b158      	cbz	r0, 800854e <_dtoa_r+0xce>
 8008536:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008538:	2301      	movs	r3, #1
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800853e:	b113      	cbz	r3, 8008546 <_dtoa_r+0xc6>
 8008540:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008542:	4b86      	ldr	r3, [pc, #536]	@ (800875c <_dtoa_r+0x2dc>)
 8008544:	6013      	str	r3, [r2, #0]
 8008546:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8008770 <_dtoa_r+0x2f0>
 800854a:	f000 bd40 	b.w	8008fce <_dtoa_r+0xb4e>
 800854e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8008552:	aa14      	add	r2, sp, #80	@ 0x50
 8008554:	a915      	add	r1, sp, #84	@ 0x54
 8008556:	4648      	mov	r0, r9
 8008558:	f001 f984 	bl	8009864 <__d2b>
 800855c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008560:	9002      	str	r0, [sp, #8]
 8008562:	2e00      	cmp	r6, #0
 8008564:	d078      	beq.n	8008658 <_dtoa_r+0x1d8>
 8008566:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008568:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800856c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008570:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008574:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008578:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800857c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008580:	4619      	mov	r1, r3
 8008582:	2200      	movs	r2, #0
 8008584:	4b76      	ldr	r3, [pc, #472]	@ (8008760 <_dtoa_r+0x2e0>)
 8008586:	f7f7 fe87 	bl	8000298 <__aeabi_dsub>
 800858a:	a36b      	add	r3, pc, #428	@ (adr r3, 8008738 <_dtoa_r+0x2b8>)
 800858c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008590:	f7f8 f83a 	bl	8000608 <__aeabi_dmul>
 8008594:	a36a      	add	r3, pc, #424	@ (adr r3, 8008740 <_dtoa_r+0x2c0>)
 8008596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800859a:	f7f7 fe7f 	bl	800029c <__adddf3>
 800859e:	4604      	mov	r4, r0
 80085a0:	4630      	mov	r0, r6
 80085a2:	460d      	mov	r5, r1
 80085a4:	f7f7 ffc6 	bl	8000534 <__aeabi_i2d>
 80085a8:	a367      	add	r3, pc, #412	@ (adr r3, 8008748 <_dtoa_r+0x2c8>)
 80085aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ae:	f7f8 f82b 	bl	8000608 <__aeabi_dmul>
 80085b2:	4602      	mov	r2, r0
 80085b4:	460b      	mov	r3, r1
 80085b6:	4620      	mov	r0, r4
 80085b8:	4629      	mov	r1, r5
 80085ba:	f7f7 fe6f 	bl	800029c <__adddf3>
 80085be:	4604      	mov	r4, r0
 80085c0:	460d      	mov	r5, r1
 80085c2:	f7f8 fad1 	bl	8000b68 <__aeabi_d2iz>
 80085c6:	2200      	movs	r2, #0
 80085c8:	4607      	mov	r7, r0
 80085ca:	2300      	movs	r3, #0
 80085cc:	4620      	mov	r0, r4
 80085ce:	4629      	mov	r1, r5
 80085d0:	f7f8 fa8c 	bl	8000aec <__aeabi_dcmplt>
 80085d4:	b140      	cbz	r0, 80085e8 <_dtoa_r+0x168>
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7f7 ffac 	bl	8000534 <__aeabi_i2d>
 80085dc:	4622      	mov	r2, r4
 80085de:	462b      	mov	r3, r5
 80085e0:	f7f8 fa7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80085e4:	b900      	cbnz	r0, 80085e8 <_dtoa_r+0x168>
 80085e6:	3f01      	subs	r7, #1
 80085e8:	2f16      	cmp	r7, #22
 80085ea:	d852      	bhi.n	8008692 <_dtoa_r+0x212>
 80085ec:	4b5d      	ldr	r3, [pc, #372]	@ (8008764 <_dtoa_r+0x2e4>)
 80085ee:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085fa:	f7f8 fa77 	bl	8000aec <__aeabi_dcmplt>
 80085fe:	2800      	cmp	r0, #0
 8008600:	d049      	beq.n	8008696 <_dtoa_r+0x216>
 8008602:	3f01      	subs	r7, #1
 8008604:	2300      	movs	r3, #0
 8008606:	9310      	str	r3, [sp, #64]	@ 0x40
 8008608:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800860a:	1b9b      	subs	r3, r3, r6
 800860c:	1e5a      	subs	r2, r3, #1
 800860e:	bf45      	ittet	mi
 8008610:	f1c3 0301 	rsbmi	r3, r3, #1
 8008614:	9300      	strmi	r3, [sp, #0]
 8008616:	2300      	movpl	r3, #0
 8008618:	2300      	movmi	r3, #0
 800861a:	9206      	str	r2, [sp, #24]
 800861c:	bf54      	ite	pl
 800861e:	9300      	strpl	r3, [sp, #0]
 8008620:	9306      	strmi	r3, [sp, #24]
 8008622:	2f00      	cmp	r7, #0
 8008624:	db39      	blt.n	800869a <_dtoa_r+0x21a>
 8008626:	9b06      	ldr	r3, [sp, #24]
 8008628:	970d      	str	r7, [sp, #52]	@ 0x34
 800862a:	443b      	add	r3, r7
 800862c:	9306      	str	r3, [sp, #24]
 800862e:	2300      	movs	r3, #0
 8008630:	9308      	str	r3, [sp, #32]
 8008632:	9b07      	ldr	r3, [sp, #28]
 8008634:	2b09      	cmp	r3, #9
 8008636:	d863      	bhi.n	8008700 <_dtoa_r+0x280>
 8008638:	2b05      	cmp	r3, #5
 800863a:	bfc4      	itt	gt
 800863c:	3b04      	subgt	r3, #4
 800863e:	9307      	strgt	r3, [sp, #28]
 8008640:	9b07      	ldr	r3, [sp, #28]
 8008642:	f1a3 0302 	sub.w	r3, r3, #2
 8008646:	bfcc      	ite	gt
 8008648:	2400      	movgt	r4, #0
 800864a:	2401      	movle	r4, #1
 800864c:	2b03      	cmp	r3, #3
 800864e:	d863      	bhi.n	8008718 <_dtoa_r+0x298>
 8008650:	e8df f003 	tbb	[pc, r3]
 8008654:	2b375452 	.word	0x2b375452
 8008658:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800865c:	441e      	add	r6, r3
 800865e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008662:	2b20      	cmp	r3, #32
 8008664:	bfc1      	itttt	gt
 8008666:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800866a:	409f      	lslgt	r7, r3
 800866c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008670:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008674:	bfd6      	itet	le
 8008676:	f1c3 0320 	rsble	r3, r3, #32
 800867a:	ea47 0003 	orrgt.w	r0, r7, r3
 800867e:	fa04 f003 	lslle.w	r0, r4, r3
 8008682:	f7f7 ff47 	bl	8000514 <__aeabi_ui2d>
 8008686:	2201      	movs	r2, #1
 8008688:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800868c:	3e01      	subs	r6, #1
 800868e:	9212      	str	r2, [sp, #72]	@ 0x48
 8008690:	e776      	b.n	8008580 <_dtoa_r+0x100>
 8008692:	2301      	movs	r3, #1
 8008694:	e7b7      	b.n	8008606 <_dtoa_r+0x186>
 8008696:	9010      	str	r0, [sp, #64]	@ 0x40
 8008698:	e7b6      	b.n	8008608 <_dtoa_r+0x188>
 800869a:	9b00      	ldr	r3, [sp, #0]
 800869c:	1bdb      	subs	r3, r3, r7
 800869e:	9300      	str	r3, [sp, #0]
 80086a0:	427b      	negs	r3, r7
 80086a2:	9308      	str	r3, [sp, #32]
 80086a4:	2300      	movs	r3, #0
 80086a6:	930d      	str	r3, [sp, #52]	@ 0x34
 80086a8:	e7c3      	b.n	8008632 <_dtoa_r+0x1b2>
 80086aa:	2301      	movs	r3, #1
 80086ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086b0:	eb07 0b03 	add.w	fp, r7, r3
 80086b4:	f10b 0301 	add.w	r3, fp, #1
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	9303      	str	r3, [sp, #12]
 80086bc:	bfb8      	it	lt
 80086be:	2301      	movlt	r3, #1
 80086c0:	e006      	b.n	80086d0 <_dtoa_r+0x250>
 80086c2:	2301      	movs	r3, #1
 80086c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80086c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	dd28      	ble.n	800871e <_dtoa_r+0x29e>
 80086cc:	469b      	mov	fp, r3
 80086ce:	9303      	str	r3, [sp, #12]
 80086d0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80086d4:	2100      	movs	r1, #0
 80086d6:	2204      	movs	r2, #4
 80086d8:	f102 0514 	add.w	r5, r2, #20
 80086dc:	429d      	cmp	r5, r3
 80086de:	d926      	bls.n	800872e <_dtoa_r+0x2ae>
 80086e0:	6041      	str	r1, [r0, #4]
 80086e2:	4648      	mov	r0, r9
 80086e4:	f000 fd9c 	bl	8009220 <_Balloc>
 80086e8:	4682      	mov	sl, r0
 80086ea:	2800      	cmp	r0, #0
 80086ec:	d142      	bne.n	8008774 <_dtoa_r+0x2f4>
 80086ee:	4b1e      	ldr	r3, [pc, #120]	@ (8008768 <_dtoa_r+0x2e8>)
 80086f0:	4602      	mov	r2, r0
 80086f2:	f240 11af 	movw	r1, #431	@ 0x1af
 80086f6:	e6da      	b.n	80084ae <_dtoa_r+0x2e>
 80086f8:	2300      	movs	r3, #0
 80086fa:	e7e3      	b.n	80086c4 <_dtoa_r+0x244>
 80086fc:	2300      	movs	r3, #0
 80086fe:	e7d5      	b.n	80086ac <_dtoa_r+0x22c>
 8008700:	2401      	movs	r4, #1
 8008702:	2300      	movs	r3, #0
 8008704:	9307      	str	r3, [sp, #28]
 8008706:	9409      	str	r4, [sp, #36]	@ 0x24
 8008708:	f04f 3bff 	mov.w	fp, #4294967295
 800870c:	2200      	movs	r2, #0
 800870e:	f8cd b00c 	str.w	fp, [sp, #12]
 8008712:	2312      	movs	r3, #18
 8008714:	920c      	str	r2, [sp, #48]	@ 0x30
 8008716:	e7db      	b.n	80086d0 <_dtoa_r+0x250>
 8008718:	2301      	movs	r3, #1
 800871a:	9309      	str	r3, [sp, #36]	@ 0x24
 800871c:	e7f4      	b.n	8008708 <_dtoa_r+0x288>
 800871e:	f04f 0b01 	mov.w	fp, #1
 8008722:	f8cd b00c 	str.w	fp, [sp, #12]
 8008726:	465b      	mov	r3, fp
 8008728:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800872c:	e7d0      	b.n	80086d0 <_dtoa_r+0x250>
 800872e:	3101      	adds	r1, #1
 8008730:	0052      	lsls	r2, r2, #1
 8008732:	e7d1      	b.n	80086d8 <_dtoa_r+0x258>
 8008734:	f3af 8000 	nop.w
 8008738:	636f4361 	.word	0x636f4361
 800873c:	3fd287a7 	.word	0x3fd287a7
 8008740:	8b60c8b3 	.word	0x8b60c8b3
 8008744:	3fc68a28 	.word	0x3fc68a28
 8008748:	509f79fb 	.word	0x509f79fb
 800874c:	3fd34413 	.word	0x3fd34413
 8008750:	0800a1e1 	.word	0x0800a1e1
 8008754:	0800a1f8 	.word	0x0800a1f8
 8008758:	7ff00000 	.word	0x7ff00000
 800875c:	0800a1b1 	.word	0x0800a1b1
 8008760:	3ff80000 	.word	0x3ff80000
 8008764:	0800a348 	.word	0x0800a348
 8008768:	0800a250 	.word	0x0800a250
 800876c:	0800a1dd 	.word	0x0800a1dd
 8008770:	0800a1b0 	.word	0x0800a1b0
 8008774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008778:	6018      	str	r0, [r3, #0]
 800877a:	9b03      	ldr	r3, [sp, #12]
 800877c:	2b0e      	cmp	r3, #14
 800877e:	f200 80a1 	bhi.w	80088c4 <_dtoa_r+0x444>
 8008782:	2c00      	cmp	r4, #0
 8008784:	f000 809e 	beq.w	80088c4 <_dtoa_r+0x444>
 8008788:	2f00      	cmp	r7, #0
 800878a:	dd33      	ble.n	80087f4 <_dtoa_r+0x374>
 800878c:	4b9c      	ldr	r3, [pc, #624]	@ (8008a00 <_dtoa_r+0x580>)
 800878e:	f007 020f 	and.w	r2, r7, #15
 8008792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008796:	ed93 7b00 	vldr	d7, [r3]
 800879a:	05f8      	lsls	r0, r7, #23
 800879c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80087a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80087a4:	d516      	bpl.n	80087d4 <_dtoa_r+0x354>
 80087a6:	4b97      	ldr	r3, [pc, #604]	@ (8008a04 <_dtoa_r+0x584>)
 80087a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80087ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80087b0:	f7f8 f854 	bl	800085c <__aeabi_ddiv>
 80087b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087b8:	f004 040f 	and.w	r4, r4, #15
 80087bc:	2603      	movs	r6, #3
 80087be:	4d91      	ldr	r5, [pc, #580]	@ (8008a04 <_dtoa_r+0x584>)
 80087c0:	b954      	cbnz	r4, 80087d8 <_dtoa_r+0x358>
 80087c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ca:	f7f8 f847 	bl	800085c <__aeabi_ddiv>
 80087ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087d2:	e028      	b.n	8008826 <_dtoa_r+0x3a6>
 80087d4:	2602      	movs	r6, #2
 80087d6:	e7f2      	b.n	80087be <_dtoa_r+0x33e>
 80087d8:	07e1      	lsls	r1, r4, #31
 80087da:	d508      	bpl.n	80087ee <_dtoa_r+0x36e>
 80087dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80087e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80087e4:	f7f7 ff10 	bl	8000608 <__aeabi_dmul>
 80087e8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80087ec:	3601      	adds	r6, #1
 80087ee:	1064      	asrs	r4, r4, #1
 80087f0:	3508      	adds	r5, #8
 80087f2:	e7e5      	b.n	80087c0 <_dtoa_r+0x340>
 80087f4:	f000 80af 	beq.w	8008956 <_dtoa_r+0x4d6>
 80087f8:	427c      	negs	r4, r7
 80087fa:	4b81      	ldr	r3, [pc, #516]	@ (8008a00 <_dtoa_r+0x580>)
 80087fc:	4d81      	ldr	r5, [pc, #516]	@ (8008a04 <_dtoa_r+0x584>)
 80087fe:	f004 020f 	and.w	r2, r4, #15
 8008802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800880a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800880e:	f7f7 fefb 	bl	8000608 <__aeabi_dmul>
 8008812:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008816:	1124      	asrs	r4, r4, #4
 8008818:	2300      	movs	r3, #0
 800881a:	2602      	movs	r6, #2
 800881c:	2c00      	cmp	r4, #0
 800881e:	f040 808f 	bne.w	8008940 <_dtoa_r+0x4c0>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d1d3      	bne.n	80087ce <_dtoa_r+0x34e>
 8008826:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008828:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800882c:	2b00      	cmp	r3, #0
 800882e:	f000 8094 	beq.w	800895a <_dtoa_r+0x4da>
 8008832:	4b75      	ldr	r3, [pc, #468]	@ (8008a08 <_dtoa_r+0x588>)
 8008834:	2200      	movs	r2, #0
 8008836:	4620      	mov	r0, r4
 8008838:	4629      	mov	r1, r5
 800883a:	f7f8 f957 	bl	8000aec <__aeabi_dcmplt>
 800883e:	2800      	cmp	r0, #0
 8008840:	f000 808b 	beq.w	800895a <_dtoa_r+0x4da>
 8008844:	9b03      	ldr	r3, [sp, #12]
 8008846:	2b00      	cmp	r3, #0
 8008848:	f000 8087 	beq.w	800895a <_dtoa_r+0x4da>
 800884c:	f1bb 0f00 	cmp.w	fp, #0
 8008850:	dd34      	ble.n	80088bc <_dtoa_r+0x43c>
 8008852:	4620      	mov	r0, r4
 8008854:	4b6d      	ldr	r3, [pc, #436]	@ (8008a0c <_dtoa_r+0x58c>)
 8008856:	2200      	movs	r2, #0
 8008858:	4629      	mov	r1, r5
 800885a:	f7f7 fed5 	bl	8000608 <__aeabi_dmul>
 800885e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008862:	f107 38ff 	add.w	r8, r7, #4294967295
 8008866:	3601      	adds	r6, #1
 8008868:	465c      	mov	r4, fp
 800886a:	4630      	mov	r0, r6
 800886c:	f7f7 fe62 	bl	8000534 <__aeabi_i2d>
 8008870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008874:	f7f7 fec8 	bl	8000608 <__aeabi_dmul>
 8008878:	4b65      	ldr	r3, [pc, #404]	@ (8008a10 <_dtoa_r+0x590>)
 800887a:	2200      	movs	r2, #0
 800887c:	f7f7 fd0e 	bl	800029c <__adddf3>
 8008880:	4605      	mov	r5, r0
 8008882:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008886:	2c00      	cmp	r4, #0
 8008888:	d16a      	bne.n	8008960 <_dtoa_r+0x4e0>
 800888a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800888e:	4b61      	ldr	r3, [pc, #388]	@ (8008a14 <_dtoa_r+0x594>)
 8008890:	2200      	movs	r2, #0
 8008892:	f7f7 fd01 	bl	8000298 <__aeabi_dsub>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800889e:	462a      	mov	r2, r5
 80088a0:	4633      	mov	r3, r6
 80088a2:	f7f8 f941 	bl	8000b28 <__aeabi_dcmpgt>
 80088a6:	2800      	cmp	r0, #0
 80088a8:	f040 8298 	bne.w	8008ddc <_dtoa_r+0x95c>
 80088ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088b0:	462a      	mov	r2, r5
 80088b2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80088b6:	f7f8 f919 	bl	8000aec <__aeabi_dcmplt>
 80088ba:	bb38      	cbnz	r0, 800890c <_dtoa_r+0x48c>
 80088bc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80088c0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80088c4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	f2c0 8157 	blt.w	8008b7a <_dtoa_r+0x6fa>
 80088cc:	2f0e      	cmp	r7, #14
 80088ce:	f300 8154 	bgt.w	8008b7a <_dtoa_r+0x6fa>
 80088d2:	4b4b      	ldr	r3, [pc, #300]	@ (8008a00 <_dtoa_r+0x580>)
 80088d4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80088d8:	ed93 7b00 	vldr	d7, [r3]
 80088dc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80088de:	2b00      	cmp	r3, #0
 80088e0:	ed8d 7b00 	vstr	d7, [sp]
 80088e4:	f280 80e5 	bge.w	8008ab2 <_dtoa_r+0x632>
 80088e8:	9b03      	ldr	r3, [sp, #12]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	f300 80e1 	bgt.w	8008ab2 <_dtoa_r+0x632>
 80088f0:	d10c      	bne.n	800890c <_dtoa_r+0x48c>
 80088f2:	4b48      	ldr	r3, [pc, #288]	@ (8008a14 <_dtoa_r+0x594>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	ec51 0b17 	vmov	r0, r1, d7
 80088fa:	f7f7 fe85 	bl	8000608 <__aeabi_dmul>
 80088fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008902:	f7f8 f907 	bl	8000b14 <__aeabi_dcmpge>
 8008906:	2800      	cmp	r0, #0
 8008908:	f000 8266 	beq.w	8008dd8 <_dtoa_r+0x958>
 800890c:	2400      	movs	r4, #0
 800890e:	4625      	mov	r5, r4
 8008910:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008912:	4656      	mov	r6, sl
 8008914:	ea6f 0803 	mvn.w	r8, r3
 8008918:	2700      	movs	r7, #0
 800891a:	4621      	mov	r1, r4
 800891c:	4648      	mov	r0, r9
 800891e:	f000 fcbf 	bl	80092a0 <_Bfree>
 8008922:	2d00      	cmp	r5, #0
 8008924:	f000 80bd 	beq.w	8008aa2 <_dtoa_r+0x622>
 8008928:	b12f      	cbz	r7, 8008936 <_dtoa_r+0x4b6>
 800892a:	42af      	cmp	r7, r5
 800892c:	d003      	beq.n	8008936 <_dtoa_r+0x4b6>
 800892e:	4639      	mov	r1, r7
 8008930:	4648      	mov	r0, r9
 8008932:	f000 fcb5 	bl	80092a0 <_Bfree>
 8008936:	4629      	mov	r1, r5
 8008938:	4648      	mov	r0, r9
 800893a:	f000 fcb1 	bl	80092a0 <_Bfree>
 800893e:	e0b0      	b.n	8008aa2 <_dtoa_r+0x622>
 8008940:	07e2      	lsls	r2, r4, #31
 8008942:	d505      	bpl.n	8008950 <_dtoa_r+0x4d0>
 8008944:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008948:	f7f7 fe5e 	bl	8000608 <__aeabi_dmul>
 800894c:	3601      	adds	r6, #1
 800894e:	2301      	movs	r3, #1
 8008950:	1064      	asrs	r4, r4, #1
 8008952:	3508      	adds	r5, #8
 8008954:	e762      	b.n	800881c <_dtoa_r+0x39c>
 8008956:	2602      	movs	r6, #2
 8008958:	e765      	b.n	8008826 <_dtoa_r+0x3a6>
 800895a:	9c03      	ldr	r4, [sp, #12]
 800895c:	46b8      	mov	r8, r7
 800895e:	e784      	b.n	800886a <_dtoa_r+0x3ea>
 8008960:	4b27      	ldr	r3, [pc, #156]	@ (8008a00 <_dtoa_r+0x580>)
 8008962:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008964:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008968:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800896c:	4454      	add	r4, sl
 800896e:	2900      	cmp	r1, #0
 8008970:	d054      	beq.n	8008a1c <_dtoa_r+0x59c>
 8008972:	4929      	ldr	r1, [pc, #164]	@ (8008a18 <_dtoa_r+0x598>)
 8008974:	2000      	movs	r0, #0
 8008976:	f7f7 ff71 	bl	800085c <__aeabi_ddiv>
 800897a:	4633      	mov	r3, r6
 800897c:	462a      	mov	r2, r5
 800897e:	f7f7 fc8b 	bl	8000298 <__aeabi_dsub>
 8008982:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008986:	4656      	mov	r6, sl
 8008988:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800898c:	f7f8 f8ec 	bl	8000b68 <__aeabi_d2iz>
 8008990:	4605      	mov	r5, r0
 8008992:	f7f7 fdcf 	bl	8000534 <__aeabi_i2d>
 8008996:	4602      	mov	r2, r0
 8008998:	460b      	mov	r3, r1
 800899a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800899e:	f7f7 fc7b 	bl	8000298 <__aeabi_dsub>
 80089a2:	3530      	adds	r5, #48	@ 0x30
 80089a4:	4602      	mov	r2, r0
 80089a6:	460b      	mov	r3, r1
 80089a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80089ac:	f806 5b01 	strb.w	r5, [r6], #1
 80089b0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089b4:	f7f8 f89a 	bl	8000aec <__aeabi_dcmplt>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d172      	bne.n	8008aa2 <_dtoa_r+0x622>
 80089bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089c0:	4911      	ldr	r1, [pc, #68]	@ (8008a08 <_dtoa_r+0x588>)
 80089c2:	2000      	movs	r0, #0
 80089c4:	f7f7 fc68 	bl	8000298 <__aeabi_dsub>
 80089c8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80089cc:	f7f8 f88e 	bl	8000aec <__aeabi_dcmplt>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	f040 80b4 	bne.w	8008b3e <_dtoa_r+0x6be>
 80089d6:	42a6      	cmp	r6, r4
 80089d8:	f43f af70 	beq.w	80088bc <_dtoa_r+0x43c>
 80089dc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80089e0:	4b0a      	ldr	r3, [pc, #40]	@ (8008a0c <_dtoa_r+0x58c>)
 80089e2:	2200      	movs	r2, #0
 80089e4:	f7f7 fe10 	bl	8000608 <__aeabi_dmul>
 80089e8:	4b08      	ldr	r3, [pc, #32]	@ (8008a0c <_dtoa_r+0x58c>)
 80089ea:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80089ee:	2200      	movs	r2, #0
 80089f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80089f4:	f7f7 fe08 	bl	8000608 <__aeabi_dmul>
 80089f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80089fc:	e7c4      	b.n	8008988 <_dtoa_r+0x508>
 80089fe:	bf00      	nop
 8008a00:	0800a348 	.word	0x0800a348
 8008a04:	0800a320 	.word	0x0800a320
 8008a08:	3ff00000 	.word	0x3ff00000
 8008a0c:	40240000 	.word	0x40240000
 8008a10:	401c0000 	.word	0x401c0000
 8008a14:	40140000 	.word	0x40140000
 8008a18:	3fe00000 	.word	0x3fe00000
 8008a1c:	4631      	mov	r1, r6
 8008a1e:	4628      	mov	r0, r5
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008a28:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008a2a:	4656      	mov	r6, sl
 8008a2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a30:	f7f8 f89a 	bl	8000b68 <__aeabi_d2iz>
 8008a34:	4605      	mov	r5, r0
 8008a36:	f7f7 fd7d 	bl	8000534 <__aeabi_i2d>
 8008a3a:	4602      	mov	r2, r0
 8008a3c:	460b      	mov	r3, r1
 8008a3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a42:	f7f7 fc29 	bl	8000298 <__aeabi_dsub>
 8008a46:	3530      	adds	r5, #48	@ 0x30
 8008a48:	f806 5b01 	strb.w	r5, [r6], #1
 8008a4c:	4602      	mov	r2, r0
 8008a4e:	460b      	mov	r3, r1
 8008a50:	42a6      	cmp	r6, r4
 8008a52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008a56:	f04f 0200 	mov.w	r2, #0
 8008a5a:	d124      	bne.n	8008aa6 <_dtoa_r+0x626>
 8008a5c:	4baf      	ldr	r3, [pc, #700]	@ (8008d1c <_dtoa_r+0x89c>)
 8008a5e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008a62:	f7f7 fc1b 	bl	800029c <__adddf3>
 8008a66:	4602      	mov	r2, r0
 8008a68:	460b      	mov	r3, r1
 8008a6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a6e:	f7f8 f85b 	bl	8000b28 <__aeabi_dcmpgt>
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d163      	bne.n	8008b3e <_dtoa_r+0x6be>
 8008a76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008a7a:	49a8      	ldr	r1, [pc, #672]	@ (8008d1c <_dtoa_r+0x89c>)
 8008a7c:	2000      	movs	r0, #0
 8008a7e:	f7f7 fc0b 	bl	8000298 <__aeabi_dsub>
 8008a82:	4602      	mov	r2, r0
 8008a84:	460b      	mov	r3, r1
 8008a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a8a:	f7f8 f82f 	bl	8000aec <__aeabi_dcmplt>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	f43f af14 	beq.w	80088bc <_dtoa_r+0x43c>
 8008a94:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008a96:	1e73      	subs	r3, r6, #1
 8008a98:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a9a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a9e:	2b30      	cmp	r3, #48	@ 0x30
 8008aa0:	d0f8      	beq.n	8008a94 <_dtoa_r+0x614>
 8008aa2:	4647      	mov	r7, r8
 8008aa4:	e03b      	b.n	8008b1e <_dtoa_r+0x69e>
 8008aa6:	4b9e      	ldr	r3, [pc, #632]	@ (8008d20 <_dtoa_r+0x8a0>)
 8008aa8:	f7f7 fdae 	bl	8000608 <__aeabi_dmul>
 8008aac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008ab0:	e7bc      	b.n	8008a2c <_dtoa_r+0x5ac>
 8008ab2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008ab6:	4656      	mov	r6, sl
 8008ab8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008abc:	4620      	mov	r0, r4
 8008abe:	4629      	mov	r1, r5
 8008ac0:	f7f7 fecc 	bl	800085c <__aeabi_ddiv>
 8008ac4:	f7f8 f850 	bl	8000b68 <__aeabi_d2iz>
 8008ac8:	4680      	mov	r8, r0
 8008aca:	f7f7 fd33 	bl	8000534 <__aeabi_i2d>
 8008ace:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ad2:	f7f7 fd99 	bl	8000608 <__aeabi_dmul>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4620      	mov	r0, r4
 8008adc:	4629      	mov	r1, r5
 8008ade:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008ae2:	f7f7 fbd9 	bl	8000298 <__aeabi_dsub>
 8008ae6:	f806 4b01 	strb.w	r4, [r6], #1
 8008aea:	9d03      	ldr	r5, [sp, #12]
 8008aec:	eba6 040a 	sub.w	r4, r6, sl
 8008af0:	42a5      	cmp	r5, r4
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	d133      	bne.n	8008b60 <_dtoa_r+0x6e0>
 8008af8:	f7f7 fbd0 	bl	800029c <__adddf3>
 8008afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b00:	4604      	mov	r4, r0
 8008b02:	460d      	mov	r5, r1
 8008b04:	f7f8 f810 	bl	8000b28 <__aeabi_dcmpgt>
 8008b08:	b9c0      	cbnz	r0, 8008b3c <_dtoa_r+0x6bc>
 8008b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b0e:	4620      	mov	r0, r4
 8008b10:	4629      	mov	r1, r5
 8008b12:	f7f7 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b16:	b110      	cbz	r0, 8008b1e <_dtoa_r+0x69e>
 8008b18:	f018 0f01 	tst.w	r8, #1
 8008b1c:	d10e      	bne.n	8008b3c <_dtoa_r+0x6bc>
 8008b1e:	9902      	ldr	r1, [sp, #8]
 8008b20:	4648      	mov	r0, r9
 8008b22:	f000 fbbd 	bl	80092a0 <_Bfree>
 8008b26:	2300      	movs	r3, #0
 8008b28:	7033      	strb	r3, [r6, #0]
 8008b2a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008b2c:	3701      	adds	r7, #1
 8008b2e:	601f      	str	r7, [r3, #0]
 8008b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	f000 824b 	beq.w	8008fce <_dtoa_r+0xb4e>
 8008b38:	601e      	str	r6, [r3, #0]
 8008b3a:	e248      	b.n	8008fce <_dtoa_r+0xb4e>
 8008b3c:	46b8      	mov	r8, r7
 8008b3e:	4633      	mov	r3, r6
 8008b40:	461e      	mov	r6, r3
 8008b42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b46:	2a39      	cmp	r2, #57	@ 0x39
 8008b48:	d106      	bne.n	8008b58 <_dtoa_r+0x6d8>
 8008b4a:	459a      	cmp	sl, r3
 8008b4c:	d1f8      	bne.n	8008b40 <_dtoa_r+0x6c0>
 8008b4e:	2230      	movs	r2, #48	@ 0x30
 8008b50:	f108 0801 	add.w	r8, r8, #1
 8008b54:	f88a 2000 	strb.w	r2, [sl]
 8008b58:	781a      	ldrb	r2, [r3, #0]
 8008b5a:	3201      	adds	r2, #1
 8008b5c:	701a      	strb	r2, [r3, #0]
 8008b5e:	e7a0      	b.n	8008aa2 <_dtoa_r+0x622>
 8008b60:	4b6f      	ldr	r3, [pc, #444]	@ (8008d20 <_dtoa_r+0x8a0>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	f7f7 fd50 	bl	8000608 <__aeabi_dmul>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	460d      	mov	r5, r1
 8008b70:	f7f7 ffb2 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b74:	2800      	cmp	r0, #0
 8008b76:	d09f      	beq.n	8008ab8 <_dtoa_r+0x638>
 8008b78:	e7d1      	b.n	8008b1e <_dtoa_r+0x69e>
 8008b7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	f000 80ea 	beq.w	8008d56 <_dtoa_r+0x8d6>
 8008b82:	9a07      	ldr	r2, [sp, #28]
 8008b84:	2a01      	cmp	r2, #1
 8008b86:	f300 80cd 	bgt.w	8008d24 <_dtoa_r+0x8a4>
 8008b8a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b8c:	2a00      	cmp	r2, #0
 8008b8e:	f000 80c1 	beq.w	8008d14 <_dtoa_r+0x894>
 8008b92:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b96:	9c08      	ldr	r4, [sp, #32]
 8008b98:	9e00      	ldr	r6, [sp, #0]
 8008b9a:	9a00      	ldr	r2, [sp, #0]
 8008b9c:	441a      	add	r2, r3
 8008b9e:	9200      	str	r2, [sp, #0]
 8008ba0:	9a06      	ldr	r2, [sp, #24]
 8008ba2:	2101      	movs	r1, #1
 8008ba4:	441a      	add	r2, r3
 8008ba6:	4648      	mov	r0, r9
 8008ba8:	9206      	str	r2, [sp, #24]
 8008baa:	f000 fc2d 	bl	8009408 <__i2b>
 8008bae:	4605      	mov	r5, r0
 8008bb0:	b166      	cbz	r6, 8008bcc <_dtoa_r+0x74c>
 8008bb2:	9b06      	ldr	r3, [sp, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	dd09      	ble.n	8008bcc <_dtoa_r+0x74c>
 8008bb8:	42b3      	cmp	r3, r6
 8008bba:	9a00      	ldr	r2, [sp, #0]
 8008bbc:	bfa8      	it	ge
 8008bbe:	4633      	movge	r3, r6
 8008bc0:	1ad2      	subs	r2, r2, r3
 8008bc2:	9200      	str	r2, [sp, #0]
 8008bc4:	9a06      	ldr	r2, [sp, #24]
 8008bc6:	1af6      	subs	r6, r6, r3
 8008bc8:	1ad3      	subs	r3, r2, r3
 8008bca:	9306      	str	r3, [sp, #24]
 8008bcc:	9b08      	ldr	r3, [sp, #32]
 8008bce:	b30b      	cbz	r3, 8008c14 <_dtoa_r+0x794>
 8008bd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	f000 80c6 	beq.w	8008d64 <_dtoa_r+0x8e4>
 8008bd8:	2c00      	cmp	r4, #0
 8008bda:	f000 80c0 	beq.w	8008d5e <_dtoa_r+0x8de>
 8008bde:	4629      	mov	r1, r5
 8008be0:	4622      	mov	r2, r4
 8008be2:	4648      	mov	r0, r9
 8008be4:	f000 fcc8 	bl	8009578 <__pow5mult>
 8008be8:	9a02      	ldr	r2, [sp, #8]
 8008bea:	4601      	mov	r1, r0
 8008bec:	4605      	mov	r5, r0
 8008bee:	4648      	mov	r0, r9
 8008bf0:	f000 fc20 	bl	8009434 <__multiply>
 8008bf4:	9902      	ldr	r1, [sp, #8]
 8008bf6:	4680      	mov	r8, r0
 8008bf8:	4648      	mov	r0, r9
 8008bfa:	f000 fb51 	bl	80092a0 <_Bfree>
 8008bfe:	9b08      	ldr	r3, [sp, #32]
 8008c00:	1b1b      	subs	r3, r3, r4
 8008c02:	9308      	str	r3, [sp, #32]
 8008c04:	f000 80b1 	beq.w	8008d6a <_dtoa_r+0x8ea>
 8008c08:	9a08      	ldr	r2, [sp, #32]
 8008c0a:	4641      	mov	r1, r8
 8008c0c:	4648      	mov	r0, r9
 8008c0e:	f000 fcb3 	bl	8009578 <__pow5mult>
 8008c12:	9002      	str	r0, [sp, #8]
 8008c14:	2101      	movs	r1, #1
 8008c16:	4648      	mov	r0, r9
 8008c18:	f000 fbf6 	bl	8009408 <__i2b>
 8008c1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c1e:	4604      	mov	r4, r0
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 81d8 	beq.w	8008fd6 <_dtoa_r+0xb56>
 8008c26:	461a      	mov	r2, r3
 8008c28:	4601      	mov	r1, r0
 8008c2a:	4648      	mov	r0, r9
 8008c2c:	f000 fca4 	bl	8009578 <__pow5mult>
 8008c30:	9b07      	ldr	r3, [sp, #28]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	4604      	mov	r4, r0
 8008c36:	f300 809f 	bgt.w	8008d78 <_dtoa_r+0x8f8>
 8008c3a:	9b04      	ldr	r3, [sp, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f040 8097 	bne.w	8008d70 <_dtoa_r+0x8f0>
 8008c42:	9b05      	ldr	r3, [sp, #20]
 8008c44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f040 8093 	bne.w	8008d74 <_dtoa_r+0x8f4>
 8008c4e:	9b05      	ldr	r3, [sp, #20]
 8008c50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c54:	0d1b      	lsrs	r3, r3, #20
 8008c56:	051b      	lsls	r3, r3, #20
 8008c58:	b133      	cbz	r3, 8008c68 <_dtoa_r+0x7e8>
 8008c5a:	9b00      	ldr	r3, [sp, #0]
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	9b06      	ldr	r3, [sp, #24]
 8008c62:	3301      	adds	r3, #1
 8008c64:	9306      	str	r3, [sp, #24]
 8008c66:	2301      	movs	r3, #1
 8008c68:	9308      	str	r3, [sp, #32]
 8008c6a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f000 81b8 	beq.w	8008fe2 <_dtoa_r+0xb62>
 8008c72:	6923      	ldr	r3, [r4, #16]
 8008c74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c78:	6918      	ldr	r0, [r3, #16]
 8008c7a:	f000 fb79 	bl	8009370 <__hi0bits>
 8008c7e:	f1c0 0020 	rsb	r0, r0, #32
 8008c82:	9b06      	ldr	r3, [sp, #24]
 8008c84:	4418      	add	r0, r3
 8008c86:	f010 001f 	ands.w	r0, r0, #31
 8008c8a:	f000 8082 	beq.w	8008d92 <_dtoa_r+0x912>
 8008c8e:	f1c0 0320 	rsb	r3, r0, #32
 8008c92:	2b04      	cmp	r3, #4
 8008c94:	dd73      	ble.n	8008d7e <_dtoa_r+0x8fe>
 8008c96:	9b00      	ldr	r3, [sp, #0]
 8008c98:	f1c0 001c 	rsb	r0, r0, #28
 8008c9c:	4403      	add	r3, r0
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	9b06      	ldr	r3, [sp, #24]
 8008ca2:	4403      	add	r3, r0
 8008ca4:	4406      	add	r6, r0
 8008ca6:	9306      	str	r3, [sp, #24]
 8008ca8:	9b00      	ldr	r3, [sp, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dd05      	ble.n	8008cba <_dtoa_r+0x83a>
 8008cae:	9902      	ldr	r1, [sp, #8]
 8008cb0:	461a      	mov	r2, r3
 8008cb2:	4648      	mov	r0, r9
 8008cb4:	f000 fcba 	bl	800962c <__lshift>
 8008cb8:	9002      	str	r0, [sp, #8]
 8008cba:	9b06      	ldr	r3, [sp, #24]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dd05      	ble.n	8008ccc <_dtoa_r+0x84c>
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	461a      	mov	r2, r3
 8008cc4:	4648      	mov	r0, r9
 8008cc6:	f000 fcb1 	bl	800962c <__lshift>
 8008cca:	4604      	mov	r4, r0
 8008ccc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d061      	beq.n	8008d96 <_dtoa_r+0x916>
 8008cd2:	9802      	ldr	r0, [sp, #8]
 8008cd4:	4621      	mov	r1, r4
 8008cd6:	f000 fd15 	bl	8009704 <__mcmp>
 8008cda:	2800      	cmp	r0, #0
 8008cdc:	da5b      	bge.n	8008d96 <_dtoa_r+0x916>
 8008cde:	2300      	movs	r3, #0
 8008ce0:	9902      	ldr	r1, [sp, #8]
 8008ce2:	220a      	movs	r2, #10
 8008ce4:	4648      	mov	r0, r9
 8008ce6:	f000 fafd 	bl	80092e4 <__multadd>
 8008cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cec:	9002      	str	r0, [sp, #8]
 8008cee:	f107 38ff 	add.w	r8, r7, #4294967295
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	f000 8177 	beq.w	8008fe6 <_dtoa_r+0xb66>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	220a      	movs	r2, #10
 8008cfe:	4648      	mov	r0, r9
 8008d00:	f000 faf0 	bl	80092e4 <__multadd>
 8008d04:	f1bb 0f00 	cmp.w	fp, #0
 8008d08:	4605      	mov	r5, r0
 8008d0a:	dc6f      	bgt.n	8008dec <_dtoa_r+0x96c>
 8008d0c:	9b07      	ldr	r3, [sp, #28]
 8008d0e:	2b02      	cmp	r3, #2
 8008d10:	dc49      	bgt.n	8008da6 <_dtoa_r+0x926>
 8008d12:	e06b      	b.n	8008dec <_dtoa_r+0x96c>
 8008d14:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008d16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008d1a:	e73c      	b.n	8008b96 <_dtoa_r+0x716>
 8008d1c:	3fe00000 	.word	0x3fe00000
 8008d20:	40240000 	.word	0x40240000
 8008d24:	9b03      	ldr	r3, [sp, #12]
 8008d26:	1e5c      	subs	r4, r3, #1
 8008d28:	9b08      	ldr	r3, [sp, #32]
 8008d2a:	42a3      	cmp	r3, r4
 8008d2c:	db09      	blt.n	8008d42 <_dtoa_r+0x8c2>
 8008d2e:	1b1c      	subs	r4, r3, r4
 8008d30:	9b03      	ldr	r3, [sp, #12]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f6bf af30 	bge.w	8008b98 <_dtoa_r+0x718>
 8008d38:	9b00      	ldr	r3, [sp, #0]
 8008d3a:	9a03      	ldr	r2, [sp, #12]
 8008d3c:	1a9e      	subs	r6, r3, r2
 8008d3e:	2300      	movs	r3, #0
 8008d40:	e72b      	b.n	8008b9a <_dtoa_r+0x71a>
 8008d42:	9b08      	ldr	r3, [sp, #32]
 8008d44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008d46:	9408      	str	r4, [sp, #32]
 8008d48:	1ae3      	subs	r3, r4, r3
 8008d4a:	441a      	add	r2, r3
 8008d4c:	9e00      	ldr	r6, [sp, #0]
 8008d4e:	9b03      	ldr	r3, [sp, #12]
 8008d50:	920d      	str	r2, [sp, #52]	@ 0x34
 8008d52:	2400      	movs	r4, #0
 8008d54:	e721      	b.n	8008b9a <_dtoa_r+0x71a>
 8008d56:	9c08      	ldr	r4, [sp, #32]
 8008d58:	9e00      	ldr	r6, [sp, #0]
 8008d5a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008d5c:	e728      	b.n	8008bb0 <_dtoa_r+0x730>
 8008d5e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008d62:	e751      	b.n	8008c08 <_dtoa_r+0x788>
 8008d64:	9a08      	ldr	r2, [sp, #32]
 8008d66:	9902      	ldr	r1, [sp, #8]
 8008d68:	e750      	b.n	8008c0c <_dtoa_r+0x78c>
 8008d6a:	f8cd 8008 	str.w	r8, [sp, #8]
 8008d6e:	e751      	b.n	8008c14 <_dtoa_r+0x794>
 8008d70:	2300      	movs	r3, #0
 8008d72:	e779      	b.n	8008c68 <_dtoa_r+0x7e8>
 8008d74:	9b04      	ldr	r3, [sp, #16]
 8008d76:	e777      	b.n	8008c68 <_dtoa_r+0x7e8>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	9308      	str	r3, [sp, #32]
 8008d7c:	e779      	b.n	8008c72 <_dtoa_r+0x7f2>
 8008d7e:	d093      	beq.n	8008ca8 <_dtoa_r+0x828>
 8008d80:	9a00      	ldr	r2, [sp, #0]
 8008d82:	331c      	adds	r3, #28
 8008d84:	441a      	add	r2, r3
 8008d86:	9200      	str	r2, [sp, #0]
 8008d88:	9a06      	ldr	r2, [sp, #24]
 8008d8a:	441a      	add	r2, r3
 8008d8c:	441e      	add	r6, r3
 8008d8e:	9206      	str	r2, [sp, #24]
 8008d90:	e78a      	b.n	8008ca8 <_dtoa_r+0x828>
 8008d92:	4603      	mov	r3, r0
 8008d94:	e7f4      	b.n	8008d80 <_dtoa_r+0x900>
 8008d96:	9b03      	ldr	r3, [sp, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	46b8      	mov	r8, r7
 8008d9c:	dc20      	bgt.n	8008de0 <_dtoa_r+0x960>
 8008d9e:	469b      	mov	fp, r3
 8008da0:	9b07      	ldr	r3, [sp, #28]
 8008da2:	2b02      	cmp	r3, #2
 8008da4:	dd1e      	ble.n	8008de4 <_dtoa_r+0x964>
 8008da6:	f1bb 0f00 	cmp.w	fp, #0
 8008daa:	f47f adb1 	bne.w	8008910 <_dtoa_r+0x490>
 8008dae:	4621      	mov	r1, r4
 8008db0:	465b      	mov	r3, fp
 8008db2:	2205      	movs	r2, #5
 8008db4:	4648      	mov	r0, r9
 8008db6:	f000 fa95 	bl	80092e4 <__multadd>
 8008dba:	4601      	mov	r1, r0
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	9802      	ldr	r0, [sp, #8]
 8008dc0:	f000 fca0 	bl	8009704 <__mcmp>
 8008dc4:	2800      	cmp	r0, #0
 8008dc6:	f77f ada3 	ble.w	8008910 <_dtoa_r+0x490>
 8008dca:	4656      	mov	r6, sl
 8008dcc:	2331      	movs	r3, #49	@ 0x31
 8008dce:	f806 3b01 	strb.w	r3, [r6], #1
 8008dd2:	f108 0801 	add.w	r8, r8, #1
 8008dd6:	e59f      	b.n	8008918 <_dtoa_r+0x498>
 8008dd8:	9c03      	ldr	r4, [sp, #12]
 8008dda:	46b8      	mov	r8, r7
 8008ddc:	4625      	mov	r5, r4
 8008dde:	e7f4      	b.n	8008dca <_dtoa_r+0x94a>
 8008de0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008de4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	f000 8101 	beq.w	8008fee <_dtoa_r+0xb6e>
 8008dec:	2e00      	cmp	r6, #0
 8008dee:	dd05      	ble.n	8008dfc <_dtoa_r+0x97c>
 8008df0:	4629      	mov	r1, r5
 8008df2:	4632      	mov	r2, r6
 8008df4:	4648      	mov	r0, r9
 8008df6:	f000 fc19 	bl	800962c <__lshift>
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d05c      	beq.n	8008ebc <_dtoa_r+0xa3c>
 8008e02:	6869      	ldr	r1, [r5, #4]
 8008e04:	4648      	mov	r0, r9
 8008e06:	f000 fa0b 	bl	8009220 <_Balloc>
 8008e0a:	4606      	mov	r6, r0
 8008e0c:	b928      	cbnz	r0, 8008e1a <_dtoa_r+0x99a>
 8008e0e:	4b82      	ldr	r3, [pc, #520]	@ (8009018 <_dtoa_r+0xb98>)
 8008e10:	4602      	mov	r2, r0
 8008e12:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008e16:	f7ff bb4a 	b.w	80084ae <_dtoa_r+0x2e>
 8008e1a:	692a      	ldr	r2, [r5, #16]
 8008e1c:	3202      	adds	r2, #2
 8008e1e:	0092      	lsls	r2, r2, #2
 8008e20:	f105 010c 	add.w	r1, r5, #12
 8008e24:	300c      	adds	r0, #12
 8008e26:	f001 f807 	bl	8009e38 <memcpy>
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4648      	mov	r0, r9
 8008e30:	f000 fbfc 	bl	800962c <__lshift>
 8008e34:	f10a 0301 	add.w	r3, sl, #1
 8008e38:	9300      	str	r3, [sp, #0]
 8008e3a:	eb0a 030b 	add.w	r3, sl, fp
 8008e3e:	9308      	str	r3, [sp, #32]
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	462f      	mov	r7, r5
 8008e48:	9306      	str	r3, [sp, #24]
 8008e4a:	4605      	mov	r5, r0
 8008e4c:	9b00      	ldr	r3, [sp, #0]
 8008e4e:	9802      	ldr	r0, [sp, #8]
 8008e50:	4621      	mov	r1, r4
 8008e52:	f103 3bff 	add.w	fp, r3, #4294967295
 8008e56:	f7ff fa8a 	bl	800836e <quorem>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	3330      	adds	r3, #48	@ 0x30
 8008e5e:	9003      	str	r0, [sp, #12]
 8008e60:	4639      	mov	r1, r7
 8008e62:	9802      	ldr	r0, [sp, #8]
 8008e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e66:	f000 fc4d 	bl	8009704 <__mcmp>
 8008e6a:	462a      	mov	r2, r5
 8008e6c:	9004      	str	r0, [sp, #16]
 8008e6e:	4621      	mov	r1, r4
 8008e70:	4648      	mov	r0, r9
 8008e72:	f000 fc63 	bl	800973c <__mdiff>
 8008e76:	68c2      	ldr	r2, [r0, #12]
 8008e78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e7a:	4606      	mov	r6, r0
 8008e7c:	bb02      	cbnz	r2, 8008ec0 <_dtoa_r+0xa40>
 8008e7e:	4601      	mov	r1, r0
 8008e80:	9802      	ldr	r0, [sp, #8]
 8008e82:	f000 fc3f 	bl	8009704 <__mcmp>
 8008e86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e88:	4602      	mov	r2, r0
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4648      	mov	r0, r9
 8008e8e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e90:	9309      	str	r3, [sp, #36]	@ 0x24
 8008e92:	f000 fa05 	bl	80092a0 <_Bfree>
 8008e96:	9b07      	ldr	r3, [sp, #28]
 8008e98:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008e9a:	9e00      	ldr	r6, [sp, #0]
 8008e9c:	ea42 0103 	orr.w	r1, r2, r3
 8008ea0:	9b06      	ldr	r3, [sp, #24]
 8008ea2:	4319      	orrs	r1, r3
 8008ea4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea6:	d10d      	bne.n	8008ec4 <_dtoa_r+0xa44>
 8008ea8:	2b39      	cmp	r3, #57	@ 0x39
 8008eaa:	d027      	beq.n	8008efc <_dtoa_r+0xa7c>
 8008eac:	9a04      	ldr	r2, [sp, #16]
 8008eae:	2a00      	cmp	r2, #0
 8008eb0:	dd01      	ble.n	8008eb6 <_dtoa_r+0xa36>
 8008eb2:	9b03      	ldr	r3, [sp, #12]
 8008eb4:	3331      	adds	r3, #49	@ 0x31
 8008eb6:	f88b 3000 	strb.w	r3, [fp]
 8008eba:	e52e      	b.n	800891a <_dtoa_r+0x49a>
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	e7b9      	b.n	8008e34 <_dtoa_r+0x9b4>
 8008ec0:	2201      	movs	r2, #1
 8008ec2:	e7e2      	b.n	8008e8a <_dtoa_r+0xa0a>
 8008ec4:	9904      	ldr	r1, [sp, #16]
 8008ec6:	2900      	cmp	r1, #0
 8008ec8:	db04      	blt.n	8008ed4 <_dtoa_r+0xa54>
 8008eca:	9807      	ldr	r0, [sp, #28]
 8008ecc:	4301      	orrs	r1, r0
 8008ece:	9806      	ldr	r0, [sp, #24]
 8008ed0:	4301      	orrs	r1, r0
 8008ed2:	d120      	bne.n	8008f16 <_dtoa_r+0xa96>
 8008ed4:	2a00      	cmp	r2, #0
 8008ed6:	ddee      	ble.n	8008eb6 <_dtoa_r+0xa36>
 8008ed8:	9902      	ldr	r1, [sp, #8]
 8008eda:	9300      	str	r3, [sp, #0]
 8008edc:	2201      	movs	r2, #1
 8008ede:	4648      	mov	r0, r9
 8008ee0:	f000 fba4 	bl	800962c <__lshift>
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	9002      	str	r0, [sp, #8]
 8008ee8:	f000 fc0c 	bl	8009704 <__mcmp>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	9b00      	ldr	r3, [sp, #0]
 8008ef0:	dc02      	bgt.n	8008ef8 <_dtoa_r+0xa78>
 8008ef2:	d1e0      	bne.n	8008eb6 <_dtoa_r+0xa36>
 8008ef4:	07da      	lsls	r2, r3, #31
 8008ef6:	d5de      	bpl.n	8008eb6 <_dtoa_r+0xa36>
 8008ef8:	2b39      	cmp	r3, #57	@ 0x39
 8008efa:	d1da      	bne.n	8008eb2 <_dtoa_r+0xa32>
 8008efc:	2339      	movs	r3, #57	@ 0x39
 8008efe:	f88b 3000 	strb.w	r3, [fp]
 8008f02:	4633      	mov	r3, r6
 8008f04:	461e      	mov	r6, r3
 8008f06:	3b01      	subs	r3, #1
 8008f08:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008f0c:	2a39      	cmp	r2, #57	@ 0x39
 8008f0e:	d04e      	beq.n	8008fae <_dtoa_r+0xb2e>
 8008f10:	3201      	adds	r2, #1
 8008f12:	701a      	strb	r2, [r3, #0]
 8008f14:	e501      	b.n	800891a <_dtoa_r+0x49a>
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	dd03      	ble.n	8008f22 <_dtoa_r+0xaa2>
 8008f1a:	2b39      	cmp	r3, #57	@ 0x39
 8008f1c:	d0ee      	beq.n	8008efc <_dtoa_r+0xa7c>
 8008f1e:	3301      	adds	r3, #1
 8008f20:	e7c9      	b.n	8008eb6 <_dtoa_r+0xa36>
 8008f22:	9a00      	ldr	r2, [sp, #0]
 8008f24:	9908      	ldr	r1, [sp, #32]
 8008f26:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008f2a:	428a      	cmp	r2, r1
 8008f2c:	d028      	beq.n	8008f80 <_dtoa_r+0xb00>
 8008f2e:	9902      	ldr	r1, [sp, #8]
 8008f30:	2300      	movs	r3, #0
 8008f32:	220a      	movs	r2, #10
 8008f34:	4648      	mov	r0, r9
 8008f36:	f000 f9d5 	bl	80092e4 <__multadd>
 8008f3a:	42af      	cmp	r7, r5
 8008f3c:	9002      	str	r0, [sp, #8]
 8008f3e:	f04f 0300 	mov.w	r3, #0
 8008f42:	f04f 020a 	mov.w	r2, #10
 8008f46:	4639      	mov	r1, r7
 8008f48:	4648      	mov	r0, r9
 8008f4a:	d107      	bne.n	8008f5c <_dtoa_r+0xadc>
 8008f4c:	f000 f9ca 	bl	80092e4 <__multadd>
 8008f50:	4607      	mov	r7, r0
 8008f52:	4605      	mov	r5, r0
 8008f54:	9b00      	ldr	r3, [sp, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	e777      	b.n	8008e4c <_dtoa_r+0x9cc>
 8008f5c:	f000 f9c2 	bl	80092e4 <__multadd>
 8008f60:	4629      	mov	r1, r5
 8008f62:	4607      	mov	r7, r0
 8008f64:	2300      	movs	r3, #0
 8008f66:	220a      	movs	r2, #10
 8008f68:	4648      	mov	r0, r9
 8008f6a:	f000 f9bb 	bl	80092e4 <__multadd>
 8008f6e:	4605      	mov	r5, r0
 8008f70:	e7f0      	b.n	8008f54 <_dtoa_r+0xad4>
 8008f72:	f1bb 0f00 	cmp.w	fp, #0
 8008f76:	bfcc      	ite	gt
 8008f78:	465e      	movgt	r6, fp
 8008f7a:	2601      	movle	r6, #1
 8008f7c:	4456      	add	r6, sl
 8008f7e:	2700      	movs	r7, #0
 8008f80:	9902      	ldr	r1, [sp, #8]
 8008f82:	9300      	str	r3, [sp, #0]
 8008f84:	2201      	movs	r2, #1
 8008f86:	4648      	mov	r0, r9
 8008f88:	f000 fb50 	bl	800962c <__lshift>
 8008f8c:	4621      	mov	r1, r4
 8008f8e:	9002      	str	r0, [sp, #8]
 8008f90:	f000 fbb8 	bl	8009704 <__mcmp>
 8008f94:	2800      	cmp	r0, #0
 8008f96:	dcb4      	bgt.n	8008f02 <_dtoa_r+0xa82>
 8008f98:	d102      	bne.n	8008fa0 <_dtoa_r+0xb20>
 8008f9a:	9b00      	ldr	r3, [sp, #0]
 8008f9c:	07db      	lsls	r3, r3, #31
 8008f9e:	d4b0      	bmi.n	8008f02 <_dtoa_r+0xa82>
 8008fa0:	4633      	mov	r3, r6
 8008fa2:	461e      	mov	r6, r3
 8008fa4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008fa8:	2a30      	cmp	r2, #48	@ 0x30
 8008faa:	d0fa      	beq.n	8008fa2 <_dtoa_r+0xb22>
 8008fac:	e4b5      	b.n	800891a <_dtoa_r+0x49a>
 8008fae:	459a      	cmp	sl, r3
 8008fb0:	d1a8      	bne.n	8008f04 <_dtoa_r+0xa84>
 8008fb2:	2331      	movs	r3, #49	@ 0x31
 8008fb4:	f108 0801 	add.w	r8, r8, #1
 8008fb8:	f88a 3000 	strb.w	r3, [sl]
 8008fbc:	e4ad      	b.n	800891a <_dtoa_r+0x49a>
 8008fbe:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008fc0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800901c <_dtoa_r+0xb9c>
 8008fc4:	b11b      	cbz	r3, 8008fce <_dtoa_r+0xb4e>
 8008fc6:	f10a 0308 	add.w	r3, sl, #8
 8008fca:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008fcc:	6013      	str	r3, [r2, #0]
 8008fce:	4650      	mov	r0, sl
 8008fd0:	b017      	add	sp, #92	@ 0x5c
 8008fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fd6:	9b07      	ldr	r3, [sp, #28]
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	f77f ae2e 	ble.w	8008c3a <_dtoa_r+0x7ba>
 8008fde:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008fe0:	9308      	str	r3, [sp, #32]
 8008fe2:	2001      	movs	r0, #1
 8008fe4:	e64d      	b.n	8008c82 <_dtoa_r+0x802>
 8008fe6:	f1bb 0f00 	cmp.w	fp, #0
 8008fea:	f77f aed9 	ble.w	8008da0 <_dtoa_r+0x920>
 8008fee:	4656      	mov	r6, sl
 8008ff0:	9802      	ldr	r0, [sp, #8]
 8008ff2:	4621      	mov	r1, r4
 8008ff4:	f7ff f9bb 	bl	800836e <quorem>
 8008ff8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008ffc:	f806 3b01 	strb.w	r3, [r6], #1
 8009000:	eba6 020a 	sub.w	r2, r6, sl
 8009004:	4593      	cmp	fp, r2
 8009006:	ddb4      	ble.n	8008f72 <_dtoa_r+0xaf2>
 8009008:	9902      	ldr	r1, [sp, #8]
 800900a:	2300      	movs	r3, #0
 800900c:	220a      	movs	r2, #10
 800900e:	4648      	mov	r0, r9
 8009010:	f000 f968 	bl	80092e4 <__multadd>
 8009014:	9002      	str	r0, [sp, #8]
 8009016:	e7eb      	b.n	8008ff0 <_dtoa_r+0xb70>
 8009018:	0800a250 	.word	0x0800a250
 800901c:	0800a1d4 	.word	0x0800a1d4

08009020 <_free_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4605      	mov	r5, r0
 8009024:	2900      	cmp	r1, #0
 8009026:	d041      	beq.n	80090ac <_free_r+0x8c>
 8009028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800902c:	1f0c      	subs	r4, r1, #4
 800902e:	2b00      	cmp	r3, #0
 8009030:	bfb8      	it	lt
 8009032:	18e4      	addlt	r4, r4, r3
 8009034:	f000 f8e8 	bl	8009208 <__malloc_lock>
 8009038:	4a1d      	ldr	r2, [pc, #116]	@ (80090b0 <_free_r+0x90>)
 800903a:	6813      	ldr	r3, [r2, #0]
 800903c:	b933      	cbnz	r3, 800904c <_free_r+0x2c>
 800903e:	6063      	str	r3, [r4, #4]
 8009040:	6014      	str	r4, [r2, #0]
 8009042:	4628      	mov	r0, r5
 8009044:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009048:	f000 b8e4 	b.w	8009214 <__malloc_unlock>
 800904c:	42a3      	cmp	r3, r4
 800904e:	d908      	bls.n	8009062 <_free_r+0x42>
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	1821      	adds	r1, r4, r0
 8009054:	428b      	cmp	r3, r1
 8009056:	bf01      	itttt	eq
 8009058:	6819      	ldreq	r1, [r3, #0]
 800905a:	685b      	ldreq	r3, [r3, #4]
 800905c:	1809      	addeq	r1, r1, r0
 800905e:	6021      	streq	r1, [r4, #0]
 8009060:	e7ed      	b.n	800903e <_free_r+0x1e>
 8009062:	461a      	mov	r2, r3
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	b10b      	cbz	r3, 800906c <_free_r+0x4c>
 8009068:	42a3      	cmp	r3, r4
 800906a:	d9fa      	bls.n	8009062 <_free_r+0x42>
 800906c:	6811      	ldr	r1, [r2, #0]
 800906e:	1850      	adds	r0, r2, r1
 8009070:	42a0      	cmp	r0, r4
 8009072:	d10b      	bne.n	800908c <_free_r+0x6c>
 8009074:	6820      	ldr	r0, [r4, #0]
 8009076:	4401      	add	r1, r0
 8009078:	1850      	adds	r0, r2, r1
 800907a:	4283      	cmp	r3, r0
 800907c:	6011      	str	r1, [r2, #0]
 800907e:	d1e0      	bne.n	8009042 <_free_r+0x22>
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	685b      	ldr	r3, [r3, #4]
 8009084:	6053      	str	r3, [r2, #4]
 8009086:	4408      	add	r0, r1
 8009088:	6010      	str	r0, [r2, #0]
 800908a:	e7da      	b.n	8009042 <_free_r+0x22>
 800908c:	d902      	bls.n	8009094 <_free_r+0x74>
 800908e:	230c      	movs	r3, #12
 8009090:	602b      	str	r3, [r5, #0]
 8009092:	e7d6      	b.n	8009042 <_free_r+0x22>
 8009094:	6820      	ldr	r0, [r4, #0]
 8009096:	1821      	adds	r1, r4, r0
 8009098:	428b      	cmp	r3, r1
 800909a:	bf04      	itt	eq
 800909c:	6819      	ldreq	r1, [r3, #0]
 800909e:	685b      	ldreq	r3, [r3, #4]
 80090a0:	6063      	str	r3, [r4, #4]
 80090a2:	bf04      	itt	eq
 80090a4:	1809      	addeq	r1, r1, r0
 80090a6:	6021      	streq	r1, [r4, #0]
 80090a8:	6054      	str	r4, [r2, #4]
 80090aa:	e7ca      	b.n	8009042 <_free_r+0x22>
 80090ac:	bd38      	pop	{r3, r4, r5, pc}
 80090ae:	bf00      	nop
 80090b0:	200005e4 	.word	0x200005e4

080090b4 <malloc>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	@ (80090c0 <malloc+0xc>)
 80090b6:	4601      	mov	r1, r0
 80090b8:	6818      	ldr	r0, [r3, #0]
 80090ba:	f000 b825 	b.w	8009108 <_malloc_r>
 80090be:	bf00      	nop
 80090c0:	20000038 	.word	0x20000038

080090c4 <sbrk_aligned>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	4e0f      	ldr	r6, [pc, #60]	@ (8009104 <sbrk_aligned+0x40>)
 80090c8:	460c      	mov	r4, r1
 80090ca:	6831      	ldr	r1, [r6, #0]
 80090cc:	4605      	mov	r5, r0
 80090ce:	b911      	cbnz	r1, 80090d6 <sbrk_aligned+0x12>
 80090d0:	f000 fea2 	bl	8009e18 <_sbrk_r>
 80090d4:	6030      	str	r0, [r6, #0]
 80090d6:	4621      	mov	r1, r4
 80090d8:	4628      	mov	r0, r5
 80090da:	f000 fe9d 	bl	8009e18 <_sbrk_r>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	d103      	bne.n	80090ea <sbrk_aligned+0x26>
 80090e2:	f04f 34ff 	mov.w	r4, #4294967295
 80090e6:	4620      	mov	r0, r4
 80090e8:	bd70      	pop	{r4, r5, r6, pc}
 80090ea:	1cc4      	adds	r4, r0, #3
 80090ec:	f024 0403 	bic.w	r4, r4, #3
 80090f0:	42a0      	cmp	r0, r4
 80090f2:	d0f8      	beq.n	80090e6 <sbrk_aligned+0x22>
 80090f4:	1a21      	subs	r1, r4, r0
 80090f6:	4628      	mov	r0, r5
 80090f8:	f000 fe8e 	bl	8009e18 <_sbrk_r>
 80090fc:	3001      	adds	r0, #1
 80090fe:	d1f2      	bne.n	80090e6 <sbrk_aligned+0x22>
 8009100:	e7ef      	b.n	80090e2 <sbrk_aligned+0x1e>
 8009102:	bf00      	nop
 8009104:	200005e0 	.word	0x200005e0

08009108 <_malloc_r>:
 8009108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800910c:	1ccd      	adds	r5, r1, #3
 800910e:	f025 0503 	bic.w	r5, r5, #3
 8009112:	3508      	adds	r5, #8
 8009114:	2d0c      	cmp	r5, #12
 8009116:	bf38      	it	cc
 8009118:	250c      	movcc	r5, #12
 800911a:	2d00      	cmp	r5, #0
 800911c:	4606      	mov	r6, r0
 800911e:	db01      	blt.n	8009124 <_malloc_r+0x1c>
 8009120:	42a9      	cmp	r1, r5
 8009122:	d904      	bls.n	800912e <_malloc_r+0x26>
 8009124:	230c      	movs	r3, #12
 8009126:	6033      	str	r3, [r6, #0]
 8009128:	2000      	movs	r0, #0
 800912a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800912e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009204 <_malloc_r+0xfc>
 8009132:	f000 f869 	bl	8009208 <__malloc_lock>
 8009136:	f8d8 3000 	ldr.w	r3, [r8]
 800913a:	461c      	mov	r4, r3
 800913c:	bb44      	cbnz	r4, 8009190 <_malloc_r+0x88>
 800913e:	4629      	mov	r1, r5
 8009140:	4630      	mov	r0, r6
 8009142:	f7ff ffbf 	bl	80090c4 <sbrk_aligned>
 8009146:	1c43      	adds	r3, r0, #1
 8009148:	4604      	mov	r4, r0
 800914a:	d158      	bne.n	80091fe <_malloc_r+0xf6>
 800914c:	f8d8 4000 	ldr.w	r4, [r8]
 8009150:	4627      	mov	r7, r4
 8009152:	2f00      	cmp	r7, #0
 8009154:	d143      	bne.n	80091de <_malloc_r+0xd6>
 8009156:	2c00      	cmp	r4, #0
 8009158:	d04b      	beq.n	80091f2 <_malloc_r+0xea>
 800915a:	6823      	ldr	r3, [r4, #0]
 800915c:	4639      	mov	r1, r7
 800915e:	4630      	mov	r0, r6
 8009160:	eb04 0903 	add.w	r9, r4, r3
 8009164:	f000 fe58 	bl	8009e18 <_sbrk_r>
 8009168:	4581      	cmp	r9, r0
 800916a:	d142      	bne.n	80091f2 <_malloc_r+0xea>
 800916c:	6821      	ldr	r1, [r4, #0]
 800916e:	1a6d      	subs	r5, r5, r1
 8009170:	4629      	mov	r1, r5
 8009172:	4630      	mov	r0, r6
 8009174:	f7ff ffa6 	bl	80090c4 <sbrk_aligned>
 8009178:	3001      	adds	r0, #1
 800917a:	d03a      	beq.n	80091f2 <_malloc_r+0xea>
 800917c:	6823      	ldr	r3, [r4, #0]
 800917e:	442b      	add	r3, r5
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	f8d8 3000 	ldr.w	r3, [r8]
 8009186:	685a      	ldr	r2, [r3, #4]
 8009188:	bb62      	cbnz	r2, 80091e4 <_malloc_r+0xdc>
 800918a:	f8c8 7000 	str.w	r7, [r8]
 800918e:	e00f      	b.n	80091b0 <_malloc_r+0xa8>
 8009190:	6822      	ldr	r2, [r4, #0]
 8009192:	1b52      	subs	r2, r2, r5
 8009194:	d420      	bmi.n	80091d8 <_malloc_r+0xd0>
 8009196:	2a0b      	cmp	r2, #11
 8009198:	d917      	bls.n	80091ca <_malloc_r+0xc2>
 800919a:	1961      	adds	r1, r4, r5
 800919c:	42a3      	cmp	r3, r4
 800919e:	6025      	str	r5, [r4, #0]
 80091a0:	bf18      	it	ne
 80091a2:	6059      	strne	r1, [r3, #4]
 80091a4:	6863      	ldr	r3, [r4, #4]
 80091a6:	bf08      	it	eq
 80091a8:	f8c8 1000 	streq.w	r1, [r8]
 80091ac:	5162      	str	r2, [r4, r5]
 80091ae:	604b      	str	r3, [r1, #4]
 80091b0:	4630      	mov	r0, r6
 80091b2:	f000 f82f 	bl	8009214 <__malloc_unlock>
 80091b6:	f104 000b 	add.w	r0, r4, #11
 80091ba:	1d23      	adds	r3, r4, #4
 80091bc:	f020 0007 	bic.w	r0, r0, #7
 80091c0:	1ac2      	subs	r2, r0, r3
 80091c2:	bf1c      	itt	ne
 80091c4:	1a1b      	subne	r3, r3, r0
 80091c6:	50a3      	strne	r3, [r4, r2]
 80091c8:	e7af      	b.n	800912a <_malloc_r+0x22>
 80091ca:	6862      	ldr	r2, [r4, #4]
 80091cc:	42a3      	cmp	r3, r4
 80091ce:	bf0c      	ite	eq
 80091d0:	f8c8 2000 	streq.w	r2, [r8]
 80091d4:	605a      	strne	r2, [r3, #4]
 80091d6:	e7eb      	b.n	80091b0 <_malloc_r+0xa8>
 80091d8:	4623      	mov	r3, r4
 80091da:	6864      	ldr	r4, [r4, #4]
 80091dc:	e7ae      	b.n	800913c <_malloc_r+0x34>
 80091de:	463c      	mov	r4, r7
 80091e0:	687f      	ldr	r7, [r7, #4]
 80091e2:	e7b6      	b.n	8009152 <_malloc_r+0x4a>
 80091e4:	461a      	mov	r2, r3
 80091e6:	685b      	ldr	r3, [r3, #4]
 80091e8:	42a3      	cmp	r3, r4
 80091ea:	d1fb      	bne.n	80091e4 <_malloc_r+0xdc>
 80091ec:	2300      	movs	r3, #0
 80091ee:	6053      	str	r3, [r2, #4]
 80091f0:	e7de      	b.n	80091b0 <_malloc_r+0xa8>
 80091f2:	230c      	movs	r3, #12
 80091f4:	6033      	str	r3, [r6, #0]
 80091f6:	4630      	mov	r0, r6
 80091f8:	f000 f80c 	bl	8009214 <__malloc_unlock>
 80091fc:	e794      	b.n	8009128 <_malloc_r+0x20>
 80091fe:	6005      	str	r5, [r0, #0]
 8009200:	e7d6      	b.n	80091b0 <_malloc_r+0xa8>
 8009202:	bf00      	nop
 8009204:	200005e4 	.word	0x200005e4

08009208 <__malloc_lock>:
 8009208:	4801      	ldr	r0, [pc, #4]	@ (8009210 <__malloc_lock+0x8>)
 800920a:	f7ff b8ae 	b.w	800836a <__retarget_lock_acquire_recursive>
 800920e:	bf00      	nop
 8009210:	200005dc 	.word	0x200005dc

08009214 <__malloc_unlock>:
 8009214:	4801      	ldr	r0, [pc, #4]	@ (800921c <__malloc_unlock+0x8>)
 8009216:	f7ff b8a9 	b.w	800836c <__retarget_lock_release_recursive>
 800921a:	bf00      	nop
 800921c:	200005dc 	.word	0x200005dc

08009220 <_Balloc>:
 8009220:	b570      	push	{r4, r5, r6, lr}
 8009222:	69c6      	ldr	r6, [r0, #28]
 8009224:	4604      	mov	r4, r0
 8009226:	460d      	mov	r5, r1
 8009228:	b976      	cbnz	r6, 8009248 <_Balloc+0x28>
 800922a:	2010      	movs	r0, #16
 800922c:	f7ff ff42 	bl	80090b4 <malloc>
 8009230:	4602      	mov	r2, r0
 8009232:	61e0      	str	r0, [r4, #28]
 8009234:	b920      	cbnz	r0, 8009240 <_Balloc+0x20>
 8009236:	4b18      	ldr	r3, [pc, #96]	@ (8009298 <_Balloc+0x78>)
 8009238:	4818      	ldr	r0, [pc, #96]	@ (800929c <_Balloc+0x7c>)
 800923a:	216b      	movs	r1, #107	@ 0x6b
 800923c:	f000 fe0a 	bl	8009e54 <__assert_func>
 8009240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009244:	6006      	str	r6, [r0, #0]
 8009246:	60c6      	str	r6, [r0, #12]
 8009248:	69e6      	ldr	r6, [r4, #28]
 800924a:	68f3      	ldr	r3, [r6, #12]
 800924c:	b183      	cbz	r3, 8009270 <_Balloc+0x50>
 800924e:	69e3      	ldr	r3, [r4, #28]
 8009250:	68db      	ldr	r3, [r3, #12]
 8009252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009256:	b9b8      	cbnz	r0, 8009288 <_Balloc+0x68>
 8009258:	2101      	movs	r1, #1
 800925a:	fa01 f605 	lsl.w	r6, r1, r5
 800925e:	1d72      	adds	r2, r6, #5
 8009260:	0092      	lsls	r2, r2, #2
 8009262:	4620      	mov	r0, r4
 8009264:	f000 fe14 	bl	8009e90 <_calloc_r>
 8009268:	b160      	cbz	r0, 8009284 <_Balloc+0x64>
 800926a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800926e:	e00e      	b.n	800928e <_Balloc+0x6e>
 8009270:	2221      	movs	r2, #33	@ 0x21
 8009272:	2104      	movs	r1, #4
 8009274:	4620      	mov	r0, r4
 8009276:	f000 fe0b 	bl	8009e90 <_calloc_r>
 800927a:	69e3      	ldr	r3, [r4, #28]
 800927c:	60f0      	str	r0, [r6, #12]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1e4      	bne.n	800924e <_Balloc+0x2e>
 8009284:	2000      	movs	r0, #0
 8009286:	bd70      	pop	{r4, r5, r6, pc}
 8009288:	6802      	ldr	r2, [r0, #0]
 800928a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800928e:	2300      	movs	r3, #0
 8009290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009294:	e7f7      	b.n	8009286 <_Balloc+0x66>
 8009296:	bf00      	nop
 8009298:	0800a1e1 	.word	0x0800a1e1
 800929c:	0800a261 	.word	0x0800a261

080092a0 <_Bfree>:
 80092a0:	b570      	push	{r4, r5, r6, lr}
 80092a2:	69c6      	ldr	r6, [r0, #28]
 80092a4:	4605      	mov	r5, r0
 80092a6:	460c      	mov	r4, r1
 80092a8:	b976      	cbnz	r6, 80092c8 <_Bfree+0x28>
 80092aa:	2010      	movs	r0, #16
 80092ac:	f7ff ff02 	bl	80090b4 <malloc>
 80092b0:	4602      	mov	r2, r0
 80092b2:	61e8      	str	r0, [r5, #28]
 80092b4:	b920      	cbnz	r0, 80092c0 <_Bfree+0x20>
 80092b6:	4b09      	ldr	r3, [pc, #36]	@ (80092dc <_Bfree+0x3c>)
 80092b8:	4809      	ldr	r0, [pc, #36]	@ (80092e0 <_Bfree+0x40>)
 80092ba:	218f      	movs	r1, #143	@ 0x8f
 80092bc:	f000 fdca 	bl	8009e54 <__assert_func>
 80092c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092c4:	6006      	str	r6, [r0, #0]
 80092c6:	60c6      	str	r6, [r0, #12]
 80092c8:	b13c      	cbz	r4, 80092da <_Bfree+0x3a>
 80092ca:	69eb      	ldr	r3, [r5, #28]
 80092cc:	6862      	ldr	r2, [r4, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80092d4:	6021      	str	r1, [r4, #0]
 80092d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80092da:	bd70      	pop	{r4, r5, r6, pc}
 80092dc:	0800a1e1 	.word	0x0800a1e1
 80092e0:	0800a261 	.word	0x0800a261

080092e4 <__multadd>:
 80092e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092e8:	690d      	ldr	r5, [r1, #16]
 80092ea:	4607      	mov	r7, r0
 80092ec:	460c      	mov	r4, r1
 80092ee:	461e      	mov	r6, r3
 80092f0:	f101 0c14 	add.w	ip, r1, #20
 80092f4:	2000      	movs	r0, #0
 80092f6:	f8dc 3000 	ldr.w	r3, [ip]
 80092fa:	b299      	uxth	r1, r3
 80092fc:	fb02 6101 	mla	r1, r2, r1, r6
 8009300:	0c1e      	lsrs	r6, r3, #16
 8009302:	0c0b      	lsrs	r3, r1, #16
 8009304:	fb02 3306 	mla	r3, r2, r6, r3
 8009308:	b289      	uxth	r1, r1
 800930a:	3001      	adds	r0, #1
 800930c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009310:	4285      	cmp	r5, r0
 8009312:	f84c 1b04 	str.w	r1, [ip], #4
 8009316:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800931a:	dcec      	bgt.n	80092f6 <__multadd+0x12>
 800931c:	b30e      	cbz	r6, 8009362 <__multadd+0x7e>
 800931e:	68a3      	ldr	r3, [r4, #8]
 8009320:	42ab      	cmp	r3, r5
 8009322:	dc19      	bgt.n	8009358 <__multadd+0x74>
 8009324:	6861      	ldr	r1, [r4, #4]
 8009326:	4638      	mov	r0, r7
 8009328:	3101      	adds	r1, #1
 800932a:	f7ff ff79 	bl	8009220 <_Balloc>
 800932e:	4680      	mov	r8, r0
 8009330:	b928      	cbnz	r0, 800933e <__multadd+0x5a>
 8009332:	4602      	mov	r2, r0
 8009334:	4b0c      	ldr	r3, [pc, #48]	@ (8009368 <__multadd+0x84>)
 8009336:	480d      	ldr	r0, [pc, #52]	@ (800936c <__multadd+0x88>)
 8009338:	21ba      	movs	r1, #186	@ 0xba
 800933a:	f000 fd8b 	bl	8009e54 <__assert_func>
 800933e:	6922      	ldr	r2, [r4, #16]
 8009340:	3202      	adds	r2, #2
 8009342:	f104 010c 	add.w	r1, r4, #12
 8009346:	0092      	lsls	r2, r2, #2
 8009348:	300c      	adds	r0, #12
 800934a:	f000 fd75 	bl	8009e38 <memcpy>
 800934e:	4621      	mov	r1, r4
 8009350:	4638      	mov	r0, r7
 8009352:	f7ff ffa5 	bl	80092a0 <_Bfree>
 8009356:	4644      	mov	r4, r8
 8009358:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800935c:	3501      	adds	r5, #1
 800935e:	615e      	str	r6, [r3, #20]
 8009360:	6125      	str	r5, [r4, #16]
 8009362:	4620      	mov	r0, r4
 8009364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009368:	0800a250 	.word	0x0800a250
 800936c:	0800a261 	.word	0x0800a261

08009370 <__hi0bits>:
 8009370:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009374:	4603      	mov	r3, r0
 8009376:	bf36      	itet	cc
 8009378:	0403      	lslcc	r3, r0, #16
 800937a:	2000      	movcs	r0, #0
 800937c:	2010      	movcc	r0, #16
 800937e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009382:	bf3c      	itt	cc
 8009384:	021b      	lslcc	r3, r3, #8
 8009386:	3008      	addcc	r0, #8
 8009388:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800938c:	bf3c      	itt	cc
 800938e:	011b      	lslcc	r3, r3, #4
 8009390:	3004      	addcc	r0, #4
 8009392:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009396:	bf3c      	itt	cc
 8009398:	009b      	lslcc	r3, r3, #2
 800939a:	3002      	addcc	r0, #2
 800939c:	2b00      	cmp	r3, #0
 800939e:	db05      	blt.n	80093ac <__hi0bits+0x3c>
 80093a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80093a4:	f100 0001 	add.w	r0, r0, #1
 80093a8:	bf08      	it	eq
 80093aa:	2020      	moveq	r0, #32
 80093ac:	4770      	bx	lr

080093ae <__lo0bits>:
 80093ae:	6803      	ldr	r3, [r0, #0]
 80093b0:	4602      	mov	r2, r0
 80093b2:	f013 0007 	ands.w	r0, r3, #7
 80093b6:	d00b      	beq.n	80093d0 <__lo0bits+0x22>
 80093b8:	07d9      	lsls	r1, r3, #31
 80093ba:	d421      	bmi.n	8009400 <__lo0bits+0x52>
 80093bc:	0798      	lsls	r0, r3, #30
 80093be:	bf49      	itett	mi
 80093c0:	085b      	lsrmi	r3, r3, #1
 80093c2:	089b      	lsrpl	r3, r3, #2
 80093c4:	2001      	movmi	r0, #1
 80093c6:	6013      	strmi	r3, [r2, #0]
 80093c8:	bf5c      	itt	pl
 80093ca:	6013      	strpl	r3, [r2, #0]
 80093cc:	2002      	movpl	r0, #2
 80093ce:	4770      	bx	lr
 80093d0:	b299      	uxth	r1, r3
 80093d2:	b909      	cbnz	r1, 80093d8 <__lo0bits+0x2a>
 80093d4:	0c1b      	lsrs	r3, r3, #16
 80093d6:	2010      	movs	r0, #16
 80093d8:	b2d9      	uxtb	r1, r3
 80093da:	b909      	cbnz	r1, 80093e0 <__lo0bits+0x32>
 80093dc:	3008      	adds	r0, #8
 80093de:	0a1b      	lsrs	r3, r3, #8
 80093e0:	0719      	lsls	r1, r3, #28
 80093e2:	bf04      	itt	eq
 80093e4:	091b      	lsreq	r3, r3, #4
 80093e6:	3004      	addeq	r0, #4
 80093e8:	0799      	lsls	r1, r3, #30
 80093ea:	bf04      	itt	eq
 80093ec:	089b      	lsreq	r3, r3, #2
 80093ee:	3002      	addeq	r0, #2
 80093f0:	07d9      	lsls	r1, r3, #31
 80093f2:	d403      	bmi.n	80093fc <__lo0bits+0x4e>
 80093f4:	085b      	lsrs	r3, r3, #1
 80093f6:	f100 0001 	add.w	r0, r0, #1
 80093fa:	d003      	beq.n	8009404 <__lo0bits+0x56>
 80093fc:	6013      	str	r3, [r2, #0]
 80093fe:	4770      	bx	lr
 8009400:	2000      	movs	r0, #0
 8009402:	4770      	bx	lr
 8009404:	2020      	movs	r0, #32
 8009406:	4770      	bx	lr

08009408 <__i2b>:
 8009408:	b510      	push	{r4, lr}
 800940a:	460c      	mov	r4, r1
 800940c:	2101      	movs	r1, #1
 800940e:	f7ff ff07 	bl	8009220 <_Balloc>
 8009412:	4602      	mov	r2, r0
 8009414:	b928      	cbnz	r0, 8009422 <__i2b+0x1a>
 8009416:	4b05      	ldr	r3, [pc, #20]	@ (800942c <__i2b+0x24>)
 8009418:	4805      	ldr	r0, [pc, #20]	@ (8009430 <__i2b+0x28>)
 800941a:	f240 1145 	movw	r1, #325	@ 0x145
 800941e:	f000 fd19 	bl	8009e54 <__assert_func>
 8009422:	2301      	movs	r3, #1
 8009424:	6144      	str	r4, [r0, #20]
 8009426:	6103      	str	r3, [r0, #16]
 8009428:	bd10      	pop	{r4, pc}
 800942a:	bf00      	nop
 800942c:	0800a250 	.word	0x0800a250
 8009430:	0800a261 	.word	0x0800a261

08009434 <__multiply>:
 8009434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009438:	4617      	mov	r7, r2
 800943a:	690a      	ldr	r2, [r1, #16]
 800943c:	693b      	ldr	r3, [r7, #16]
 800943e:	429a      	cmp	r2, r3
 8009440:	bfa8      	it	ge
 8009442:	463b      	movge	r3, r7
 8009444:	4689      	mov	r9, r1
 8009446:	bfa4      	itt	ge
 8009448:	460f      	movge	r7, r1
 800944a:	4699      	movge	r9, r3
 800944c:	693d      	ldr	r5, [r7, #16]
 800944e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	eb05 060a 	add.w	r6, r5, sl
 800945a:	42b3      	cmp	r3, r6
 800945c:	b085      	sub	sp, #20
 800945e:	bfb8      	it	lt
 8009460:	3101      	addlt	r1, #1
 8009462:	f7ff fedd 	bl	8009220 <_Balloc>
 8009466:	b930      	cbnz	r0, 8009476 <__multiply+0x42>
 8009468:	4602      	mov	r2, r0
 800946a:	4b41      	ldr	r3, [pc, #260]	@ (8009570 <__multiply+0x13c>)
 800946c:	4841      	ldr	r0, [pc, #260]	@ (8009574 <__multiply+0x140>)
 800946e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009472:	f000 fcef 	bl	8009e54 <__assert_func>
 8009476:	f100 0414 	add.w	r4, r0, #20
 800947a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800947e:	4623      	mov	r3, r4
 8009480:	2200      	movs	r2, #0
 8009482:	4573      	cmp	r3, lr
 8009484:	d320      	bcc.n	80094c8 <__multiply+0x94>
 8009486:	f107 0814 	add.w	r8, r7, #20
 800948a:	f109 0114 	add.w	r1, r9, #20
 800948e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8009492:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009496:	9302      	str	r3, [sp, #8]
 8009498:	1beb      	subs	r3, r5, r7
 800949a:	3b15      	subs	r3, #21
 800949c:	f023 0303 	bic.w	r3, r3, #3
 80094a0:	3304      	adds	r3, #4
 80094a2:	3715      	adds	r7, #21
 80094a4:	42bd      	cmp	r5, r7
 80094a6:	bf38      	it	cc
 80094a8:	2304      	movcc	r3, #4
 80094aa:	9301      	str	r3, [sp, #4]
 80094ac:	9b02      	ldr	r3, [sp, #8]
 80094ae:	9103      	str	r1, [sp, #12]
 80094b0:	428b      	cmp	r3, r1
 80094b2:	d80c      	bhi.n	80094ce <__multiply+0x9a>
 80094b4:	2e00      	cmp	r6, #0
 80094b6:	dd03      	ble.n	80094c0 <__multiply+0x8c>
 80094b8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d055      	beq.n	800956c <__multiply+0x138>
 80094c0:	6106      	str	r6, [r0, #16]
 80094c2:	b005      	add	sp, #20
 80094c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c8:	f843 2b04 	str.w	r2, [r3], #4
 80094cc:	e7d9      	b.n	8009482 <__multiply+0x4e>
 80094ce:	f8b1 a000 	ldrh.w	sl, [r1]
 80094d2:	f1ba 0f00 	cmp.w	sl, #0
 80094d6:	d01f      	beq.n	8009518 <__multiply+0xe4>
 80094d8:	46c4      	mov	ip, r8
 80094da:	46a1      	mov	r9, r4
 80094dc:	2700      	movs	r7, #0
 80094de:	f85c 2b04 	ldr.w	r2, [ip], #4
 80094e2:	f8d9 3000 	ldr.w	r3, [r9]
 80094e6:	fa1f fb82 	uxth.w	fp, r2
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	fb0a 330b 	mla	r3, sl, fp, r3
 80094f0:	443b      	add	r3, r7
 80094f2:	f8d9 7000 	ldr.w	r7, [r9]
 80094f6:	0c12      	lsrs	r2, r2, #16
 80094f8:	0c3f      	lsrs	r7, r7, #16
 80094fa:	fb0a 7202 	mla	r2, sl, r2, r7
 80094fe:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8009502:	b29b      	uxth	r3, r3
 8009504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009508:	4565      	cmp	r5, ip
 800950a:	f849 3b04 	str.w	r3, [r9], #4
 800950e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8009512:	d8e4      	bhi.n	80094de <__multiply+0xaa>
 8009514:	9b01      	ldr	r3, [sp, #4]
 8009516:	50e7      	str	r7, [r4, r3]
 8009518:	9b03      	ldr	r3, [sp, #12]
 800951a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800951e:	3104      	adds	r1, #4
 8009520:	f1b9 0f00 	cmp.w	r9, #0
 8009524:	d020      	beq.n	8009568 <__multiply+0x134>
 8009526:	6823      	ldr	r3, [r4, #0]
 8009528:	4647      	mov	r7, r8
 800952a:	46a4      	mov	ip, r4
 800952c:	f04f 0a00 	mov.w	sl, #0
 8009530:	f8b7 b000 	ldrh.w	fp, [r7]
 8009534:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009538:	fb09 220b 	mla	r2, r9, fp, r2
 800953c:	4452      	add	r2, sl
 800953e:	b29b      	uxth	r3, r3
 8009540:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009544:	f84c 3b04 	str.w	r3, [ip], #4
 8009548:	f857 3b04 	ldr.w	r3, [r7], #4
 800954c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009550:	f8bc 3000 	ldrh.w	r3, [ip]
 8009554:	fb09 330a 	mla	r3, r9, sl, r3
 8009558:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800955c:	42bd      	cmp	r5, r7
 800955e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009562:	d8e5      	bhi.n	8009530 <__multiply+0xfc>
 8009564:	9a01      	ldr	r2, [sp, #4]
 8009566:	50a3      	str	r3, [r4, r2]
 8009568:	3404      	adds	r4, #4
 800956a:	e79f      	b.n	80094ac <__multiply+0x78>
 800956c:	3e01      	subs	r6, #1
 800956e:	e7a1      	b.n	80094b4 <__multiply+0x80>
 8009570:	0800a250 	.word	0x0800a250
 8009574:	0800a261 	.word	0x0800a261

08009578 <__pow5mult>:
 8009578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800957c:	4615      	mov	r5, r2
 800957e:	f012 0203 	ands.w	r2, r2, #3
 8009582:	4607      	mov	r7, r0
 8009584:	460e      	mov	r6, r1
 8009586:	d007      	beq.n	8009598 <__pow5mult+0x20>
 8009588:	4c25      	ldr	r4, [pc, #148]	@ (8009620 <__pow5mult+0xa8>)
 800958a:	3a01      	subs	r2, #1
 800958c:	2300      	movs	r3, #0
 800958e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009592:	f7ff fea7 	bl	80092e4 <__multadd>
 8009596:	4606      	mov	r6, r0
 8009598:	10ad      	asrs	r5, r5, #2
 800959a:	d03d      	beq.n	8009618 <__pow5mult+0xa0>
 800959c:	69fc      	ldr	r4, [r7, #28]
 800959e:	b97c      	cbnz	r4, 80095c0 <__pow5mult+0x48>
 80095a0:	2010      	movs	r0, #16
 80095a2:	f7ff fd87 	bl	80090b4 <malloc>
 80095a6:	4602      	mov	r2, r0
 80095a8:	61f8      	str	r0, [r7, #28]
 80095aa:	b928      	cbnz	r0, 80095b8 <__pow5mult+0x40>
 80095ac:	4b1d      	ldr	r3, [pc, #116]	@ (8009624 <__pow5mult+0xac>)
 80095ae:	481e      	ldr	r0, [pc, #120]	@ (8009628 <__pow5mult+0xb0>)
 80095b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80095b4:	f000 fc4e 	bl	8009e54 <__assert_func>
 80095b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80095bc:	6004      	str	r4, [r0, #0]
 80095be:	60c4      	str	r4, [r0, #12]
 80095c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80095c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80095c8:	b94c      	cbnz	r4, 80095de <__pow5mult+0x66>
 80095ca:	f240 2171 	movw	r1, #625	@ 0x271
 80095ce:	4638      	mov	r0, r7
 80095d0:	f7ff ff1a 	bl	8009408 <__i2b>
 80095d4:	2300      	movs	r3, #0
 80095d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80095da:	4604      	mov	r4, r0
 80095dc:	6003      	str	r3, [r0, #0]
 80095de:	f04f 0900 	mov.w	r9, #0
 80095e2:	07eb      	lsls	r3, r5, #31
 80095e4:	d50a      	bpl.n	80095fc <__pow5mult+0x84>
 80095e6:	4631      	mov	r1, r6
 80095e8:	4622      	mov	r2, r4
 80095ea:	4638      	mov	r0, r7
 80095ec:	f7ff ff22 	bl	8009434 <__multiply>
 80095f0:	4631      	mov	r1, r6
 80095f2:	4680      	mov	r8, r0
 80095f4:	4638      	mov	r0, r7
 80095f6:	f7ff fe53 	bl	80092a0 <_Bfree>
 80095fa:	4646      	mov	r6, r8
 80095fc:	106d      	asrs	r5, r5, #1
 80095fe:	d00b      	beq.n	8009618 <__pow5mult+0xa0>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	b938      	cbnz	r0, 8009614 <__pow5mult+0x9c>
 8009604:	4622      	mov	r2, r4
 8009606:	4621      	mov	r1, r4
 8009608:	4638      	mov	r0, r7
 800960a:	f7ff ff13 	bl	8009434 <__multiply>
 800960e:	6020      	str	r0, [r4, #0]
 8009610:	f8c0 9000 	str.w	r9, [r0]
 8009614:	4604      	mov	r4, r0
 8009616:	e7e4      	b.n	80095e2 <__pow5mult+0x6a>
 8009618:	4630      	mov	r0, r6
 800961a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800961e:	bf00      	nop
 8009620:	0800a314 	.word	0x0800a314
 8009624:	0800a1e1 	.word	0x0800a1e1
 8009628:	0800a261 	.word	0x0800a261

0800962c <__lshift>:
 800962c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009630:	460c      	mov	r4, r1
 8009632:	6849      	ldr	r1, [r1, #4]
 8009634:	6923      	ldr	r3, [r4, #16]
 8009636:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800963a:	68a3      	ldr	r3, [r4, #8]
 800963c:	4607      	mov	r7, r0
 800963e:	4691      	mov	r9, r2
 8009640:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009644:	f108 0601 	add.w	r6, r8, #1
 8009648:	42b3      	cmp	r3, r6
 800964a:	db0b      	blt.n	8009664 <__lshift+0x38>
 800964c:	4638      	mov	r0, r7
 800964e:	f7ff fde7 	bl	8009220 <_Balloc>
 8009652:	4605      	mov	r5, r0
 8009654:	b948      	cbnz	r0, 800966a <__lshift+0x3e>
 8009656:	4602      	mov	r2, r0
 8009658:	4b28      	ldr	r3, [pc, #160]	@ (80096fc <__lshift+0xd0>)
 800965a:	4829      	ldr	r0, [pc, #164]	@ (8009700 <__lshift+0xd4>)
 800965c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009660:	f000 fbf8 	bl	8009e54 <__assert_func>
 8009664:	3101      	adds	r1, #1
 8009666:	005b      	lsls	r3, r3, #1
 8009668:	e7ee      	b.n	8009648 <__lshift+0x1c>
 800966a:	2300      	movs	r3, #0
 800966c:	f100 0114 	add.w	r1, r0, #20
 8009670:	f100 0210 	add.w	r2, r0, #16
 8009674:	4618      	mov	r0, r3
 8009676:	4553      	cmp	r3, sl
 8009678:	db33      	blt.n	80096e2 <__lshift+0xb6>
 800967a:	6920      	ldr	r0, [r4, #16]
 800967c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009680:	f104 0314 	add.w	r3, r4, #20
 8009684:	f019 091f 	ands.w	r9, r9, #31
 8009688:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800968c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009690:	d02b      	beq.n	80096ea <__lshift+0xbe>
 8009692:	f1c9 0e20 	rsb	lr, r9, #32
 8009696:	468a      	mov	sl, r1
 8009698:	2200      	movs	r2, #0
 800969a:	6818      	ldr	r0, [r3, #0]
 800969c:	fa00 f009 	lsl.w	r0, r0, r9
 80096a0:	4310      	orrs	r0, r2
 80096a2:	f84a 0b04 	str.w	r0, [sl], #4
 80096a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80096aa:	459c      	cmp	ip, r3
 80096ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80096b0:	d8f3      	bhi.n	800969a <__lshift+0x6e>
 80096b2:	ebac 0304 	sub.w	r3, ip, r4
 80096b6:	3b15      	subs	r3, #21
 80096b8:	f023 0303 	bic.w	r3, r3, #3
 80096bc:	3304      	adds	r3, #4
 80096be:	f104 0015 	add.w	r0, r4, #21
 80096c2:	4560      	cmp	r0, ip
 80096c4:	bf88      	it	hi
 80096c6:	2304      	movhi	r3, #4
 80096c8:	50ca      	str	r2, [r1, r3]
 80096ca:	b10a      	cbz	r2, 80096d0 <__lshift+0xa4>
 80096cc:	f108 0602 	add.w	r6, r8, #2
 80096d0:	3e01      	subs	r6, #1
 80096d2:	4638      	mov	r0, r7
 80096d4:	612e      	str	r6, [r5, #16]
 80096d6:	4621      	mov	r1, r4
 80096d8:	f7ff fde2 	bl	80092a0 <_Bfree>
 80096dc:	4628      	mov	r0, r5
 80096de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80096e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80096e6:	3301      	adds	r3, #1
 80096e8:	e7c5      	b.n	8009676 <__lshift+0x4a>
 80096ea:	3904      	subs	r1, #4
 80096ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80096f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80096f4:	459c      	cmp	ip, r3
 80096f6:	d8f9      	bhi.n	80096ec <__lshift+0xc0>
 80096f8:	e7ea      	b.n	80096d0 <__lshift+0xa4>
 80096fa:	bf00      	nop
 80096fc:	0800a250 	.word	0x0800a250
 8009700:	0800a261 	.word	0x0800a261

08009704 <__mcmp>:
 8009704:	690a      	ldr	r2, [r1, #16]
 8009706:	4603      	mov	r3, r0
 8009708:	6900      	ldr	r0, [r0, #16]
 800970a:	1a80      	subs	r0, r0, r2
 800970c:	b530      	push	{r4, r5, lr}
 800970e:	d10e      	bne.n	800972e <__mcmp+0x2a>
 8009710:	3314      	adds	r3, #20
 8009712:	3114      	adds	r1, #20
 8009714:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009718:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800971c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009720:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009724:	4295      	cmp	r5, r2
 8009726:	d003      	beq.n	8009730 <__mcmp+0x2c>
 8009728:	d205      	bcs.n	8009736 <__mcmp+0x32>
 800972a:	f04f 30ff 	mov.w	r0, #4294967295
 800972e:	bd30      	pop	{r4, r5, pc}
 8009730:	42a3      	cmp	r3, r4
 8009732:	d3f3      	bcc.n	800971c <__mcmp+0x18>
 8009734:	e7fb      	b.n	800972e <__mcmp+0x2a>
 8009736:	2001      	movs	r0, #1
 8009738:	e7f9      	b.n	800972e <__mcmp+0x2a>
	...

0800973c <__mdiff>:
 800973c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009740:	4689      	mov	r9, r1
 8009742:	4606      	mov	r6, r0
 8009744:	4611      	mov	r1, r2
 8009746:	4648      	mov	r0, r9
 8009748:	4614      	mov	r4, r2
 800974a:	f7ff ffdb 	bl	8009704 <__mcmp>
 800974e:	1e05      	subs	r5, r0, #0
 8009750:	d112      	bne.n	8009778 <__mdiff+0x3c>
 8009752:	4629      	mov	r1, r5
 8009754:	4630      	mov	r0, r6
 8009756:	f7ff fd63 	bl	8009220 <_Balloc>
 800975a:	4602      	mov	r2, r0
 800975c:	b928      	cbnz	r0, 800976a <__mdiff+0x2e>
 800975e:	4b3f      	ldr	r3, [pc, #252]	@ (800985c <__mdiff+0x120>)
 8009760:	f240 2137 	movw	r1, #567	@ 0x237
 8009764:	483e      	ldr	r0, [pc, #248]	@ (8009860 <__mdiff+0x124>)
 8009766:	f000 fb75 	bl	8009e54 <__assert_func>
 800976a:	2301      	movs	r3, #1
 800976c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009770:	4610      	mov	r0, r2
 8009772:	b003      	add	sp, #12
 8009774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009778:	bfbc      	itt	lt
 800977a:	464b      	movlt	r3, r9
 800977c:	46a1      	movlt	r9, r4
 800977e:	4630      	mov	r0, r6
 8009780:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009784:	bfba      	itte	lt
 8009786:	461c      	movlt	r4, r3
 8009788:	2501      	movlt	r5, #1
 800978a:	2500      	movge	r5, #0
 800978c:	f7ff fd48 	bl	8009220 <_Balloc>
 8009790:	4602      	mov	r2, r0
 8009792:	b918      	cbnz	r0, 800979c <__mdiff+0x60>
 8009794:	4b31      	ldr	r3, [pc, #196]	@ (800985c <__mdiff+0x120>)
 8009796:	f240 2145 	movw	r1, #581	@ 0x245
 800979a:	e7e3      	b.n	8009764 <__mdiff+0x28>
 800979c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80097a0:	6926      	ldr	r6, [r4, #16]
 80097a2:	60c5      	str	r5, [r0, #12]
 80097a4:	f109 0310 	add.w	r3, r9, #16
 80097a8:	f109 0514 	add.w	r5, r9, #20
 80097ac:	f104 0e14 	add.w	lr, r4, #20
 80097b0:	f100 0b14 	add.w	fp, r0, #20
 80097b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80097b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80097bc:	9301      	str	r3, [sp, #4]
 80097be:	46d9      	mov	r9, fp
 80097c0:	f04f 0c00 	mov.w	ip, #0
 80097c4:	9b01      	ldr	r3, [sp, #4]
 80097c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80097ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80097ce:	9301      	str	r3, [sp, #4]
 80097d0:	fa1f f38a 	uxth.w	r3, sl
 80097d4:	4619      	mov	r1, r3
 80097d6:	b283      	uxth	r3, r0
 80097d8:	1acb      	subs	r3, r1, r3
 80097da:	0c00      	lsrs	r0, r0, #16
 80097dc:	4463      	add	r3, ip
 80097de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80097e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80097ec:	4576      	cmp	r6, lr
 80097ee:	f849 3b04 	str.w	r3, [r9], #4
 80097f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80097f6:	d8e5      	bhi.n	80097c4 <__mdiff+0x88>
 80097f8:	1b33      	subs	r3, r6, r4
 80097fa:	3b15      	subs	r3, #21
 80097fc:	f023 0303 	bic.w	r3, r3, #3
 8009800:	3415      	adds	r4, #21
 8009802:	3304      	adds	r3, #4
 8009804:	42a6      	cmp	r6, r4
 8009806:	bf38      	it	cc
 8009808:	2304      	movcc	r3, #4
 800980a:	441d      	add	r5, r3
 800980c:	445b      	add	r3, fp
 800980e:	461e      	mov	r6, r3
 8009810:	462c      	mov	r4, r5
 8009812:	4544      	cmp	r4, r8
 8009814:	d30e      	bcc.n	8009834 <__mdiff+0xf8>
 8009816:	f108 0103 	add.w	r1, r8, #3
 800981a:	1b49      	subs	r1, r1, r5
 800981c:	f021 0103 	bic.w	r1, r1, #3
 8009820:	3d03      	subs	r5, #3
 8009822:	45a8      	cmp	r8, r5
 8009824:	bf38      	it	cc
 8009826:	2100      	movcc	r1, #0
 8009828:	440b      	add	r3, r1
 800982a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800982e:	b191      	cbz	r1, 8009856 <__mdiff+0x11a>
 8009830:	6117      	str	r7, [r2, #16]
 8009832:	e79d      	b.n	8009770 <__mdiff+0x34>
 8009834:	f854 1b04 	ldr.w	r1, [r4], #4
 8009838:	46e6      	mov	lr, ip
 800983a:	0c08      	lsrs	r0, r1, #16
 800983c:	fa1c fc81 	uxtah	ip, ip, r1
 8009840:	4471      	add	r1, lr
 8009842:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009846:	b289      	uxth	r1, r1
 8009848:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800984c:	f846 1b04 	str.w	r1, [r6], #4
 8009850:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009854:	e7dd      	b.n	8009812 <__mdiff+0xd6>
 8009856:	3f01      	subs	r7, #1
 8009858:	e7e7      	b.n	800982a <__mdiff+0xee>
 800985a:	bf00      	nop
 800985c:	0800a250 	.word	0x0800a250
 8009860:	0800a261 	.word	0x0800a261

08009864 <__d2b>:
 8009864:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009868:	460f      	mov	r7, r1
 800986a:	2101      	movs	r1, #1
 800986c:	ec59 8b10 	vmov	r8, r9, d0
 8009870:	4616      	mov	r6, r2
 8009872:	f7ff fcd5 	bl	8009220 <_Balloc>
 8009876:	4604      	mov	r4, r0
 8009878:	b930      	cbnz	r0, 8009888 <__d2b+0x24>
 800987a:	4602      	mov	r2, r0
 800987c:	4b23      	ldr	r3, [pc, #140]	@ (800990c <__d2b+0xa8>)
 800987e:	4824      	ldr	r0, [pc, #144]	@ (8009910 <__d2b+0xac>)
 8009880:	f240 310f 	movw	r1, #783	@ 0x30f
 8009884:	f000 fae6 	bl	8009e54 <__assert_func>
 8009888:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800988c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009890:	b10d      	cbz	r5, 8009896 <__d2b+0x32>
 8009892:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009896:	9301      	str	r3, [sp, #4]
 8009898:	f1b8 0300 	subs.w	r3, r8, #0
 800989c:	d023      	beq.n	80098e6 <__d2b+0x82>
 800989e:	4668      	mov	r0, sp
 80098a0:	9300      	str	r3, [sp, #0]
 80098a2:	f7ff fd84 	bl	80093ae <__lo0bits>
 80098a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80098aa:	b1d0      	cbz	r0, 80098e2 <__d2b+0x7e>
 80098ac:	f1c0 0320 	rsb	r3, r0, #32
 80098b0:	fa02 f303 	lsl.w	r3, r2, r3
 80098b4:	430b      	orrs	r3, r1
 80098b6:	40c2      	lsrs	r2, r0
 80098b8:	6163      	str	r3, [r4, #20]
 80098ba:	9201      	str	r2, [sp, #4]
 80098bc:	9b01      	ldr	r3, [sp, #4]
 80098be:	61a3      	str	r3, [r4, #24]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	bf0c      	ite	eq
 80098c4:	2201      	moveq	r2, #1
 80098c6:	2202      	movne	r2, #2
 80098c8:	6122      	str	r2, [r4, #16]
 80098ca:	b1a5      	cbz	r5, 80098f6 <__d2b+0x92>
 80098cc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80098d0:	4405      	add	r5, r0
 80098d2:	603d      	str	r5, [r7, #0]
 80098d4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80098d8:	6030      	str	r0, [r6, #0]
 80098da:	4620      	mov	r0, r4
 80098dc:	b003      	add	sp, #12
 80098de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80098e2:	6161      	str	r1, [r4, #20]
 80098e4:	e7ea      	b.n	80098bc <__d2b+0x58>
 80098e6:	a801      	add	r0, sp, #4
 80098e8:	f7ff fd61 	bl	80093ae <__lo0bits>
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	6163      	str	r3, [r4, #20]
 80098f0:	3020      	adds	r0, #32
 80098f2:	2201      	movs	r2, #1
 80098f4:	e7e8      	b.n	80098c8 <__d2b+0x64>
 80098f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098fa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80098fe:	6038      	str	r0, [r7, #0]
 8009900:	6918      	ldr	r0, [r3, #16]
 8009902:	f7ff fd35 	bl	8009370 <__hi0bits>
 8009906:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800990a:	e7e5      	b.n	80098d8 <__d2b+0x74>
 800990c:	0800a250 	.word	0x0800a250
 8009910:	0800a261 	.word	0x0800a261

08009914 <__sfputc_r>:
 8009914:	6893      	ldr	r3, [r2, #8]
 8009916:	3b01      	subs	r3, #1
 8009918:	2b00      	cmp	r3, #0
 800991a:	b410      	push	{r4}
 800991c:	6093      	str	r3, [r2, #8]
 800991e:	da08      	bge.n	8009932 <__sfputc_r+0x1e>
 8009920:	6994      	ldr	r4, [r2, #24]
 8009922:	42a3      	cmp	r3, r4
 8009924:	db01      	blt.n	800992a <__sfputc_r+0x16>
 8009926:	290a      	cmp	r1, #10
 8009928:	d103      	bne.n	8009932 <__sfputc_r+0x1e>
 800992a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800992e:	f000 b9df 	b.w	8009cf0 <__swbuf_r>
 8009932:	6813      	ldr	r3, [r2, #0]
 8009934:	1c58      	adds	r0, r3, #1
 8009936:	6010      	str	r0, [r2, #0]
 8009938:	7019      	strb	r1, [r3, #0]
 800993a:	4608      	mov	r0, r1
 800993c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009940:	4770      	bx	lr

08009942 <__sfputs_r>:
 8009942:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009944:	4606      	mov	r6, r0
 8009946:	460f      	mov	r7, r1
 8009948:	4614      	mov	r4, r2
 800994a:	18d5      	adds	r5, r2, r3
 800994c:	42ac      	cmp	r4, r5
 800994e:	d101      	bne.n	8009954 <__sfputs_r+0x12>
 8009950:	2000      	movs	r0, #0
 8009952:	e007      	b.n	8009964 <__sfputs_r+0x22>
 8009954:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009958:	463a      	mov	r2, r7
 800995a:	4630      	mov	r0, r6
 800995c:	f7ff ffda 	bl	8009914 <__sfputc_r>
 8009960:	1c43      	adds	r3, r0, #1
 8009962:	d1f3      	bne.n	800994c <__sfputs_r+0xa>
 8009964:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009968 <_vfiprintf_r>:
 8009968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800996c:	460d      	mov	r5, r1
 800996e:	b09d      	sub	sp, #116	@ 0x74
 8009970:	4614      	mov	r4, r2
 8009972:	4698      	mov	r8, r3
 8009974:	4606      	mov	r6, r0
 8009976:	b118      	cbz	r0, 8009980 <_vfiprintf_r+0x18>
 8009978:	6a03      	ldr	r3, [r0, #32]
 800997a:	b90b      	cbnz	r3, 8009980 <_vfiprintf_r+0x18>
 800997c:	f7fe fbec 	bl	8008158 <__sinit>
 8009980:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009982:	07d9      	lsls	r1, r3, #31
 8009984:	d405      	bmi.n	8009992 <_vfiprintf_r+0x2a>
 8009986:	89ab      	ldrh	r3, [r5, #12]
 8009988:	059a      	lsls	r2, r3, #22
 800998a:	d402      	bmi.n	8009992 <_vfiprintf_r+0x2a>
 800998c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800998e:	f7fe fcec 	bl	800836a <__retarget_lock_acquire_recursive>
 8009992:	89ab      	ldrh	r3, [r5, #12]
 8009994:	071b      	lsls	r3, r3, #28
 8009996:	d501      	bpl.n	800999c <_vfiprintf_r+0x34>
 8009998:	692b      	ldr	r3, [r5, #16]
 800999a:	b99b      	cbnz	r3, 80099c4 <_vfiprintf_r+0x5c>
 800999c:	4629      	mov	r1, r5
 800999e:	4630      	mov	r0, r6
 80099a0:	f000 f9e4 	bl	8009d6c <__swsetup_r>
 80099a4:	b170      	cbz	r0, 80099c4 <_vfiprintf_r+0x5c>
 80099a6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80099a8:	07dc      	lsls	r4, r3, #31
 80099aa:	d504      	bpl.n	80099b6 <_vfiprintf_r+0x4e>
 80099ac:	f04f 30ff 	mov.w	r0, #4294967295
 80099b0:	b01d      	add	sp, #116	@ 0x74
 80099b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099b6:	89ab      	ldrh	r3, [r5, #12]
 80099b8:	0598      	lsls	r0, r3, #22
 80099ba:	d4f7      	bmi.n	80099ac <_vfiprintf_r+0x44>
 80099bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80099be:	f7fe fcd5 	bl	800836c <__retarget_lock_release_recursive>
 80099c2:	e7f3      	b.n	80099ac <_vfiprintf_r+0x44>
 80099c4:	2300      	movs	r3, #0
 80099c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80099c8:	2320      	movs	r3, #32
 80099ca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80099d2:	2330      	movs	r3, #48	@ 0x30
 80099d4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009b84 <_vfiprintf_r+0x21c>
 80099d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099dc:	f04f 0901 	mov.w	r9, #1
 80099e0:	4623      	mov	r3, r4
 80099e2:	469a      	mov	sl, r3
 80099e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80099e8:	b10a      	cbz	r2, 80099ee <_vfiprintf_r+0x86>
 80099ea:	2a25      	cmp	r2, #37	@ 0x25
 80099ec:	d1f9      	bne.n	80099e2 <_vfiprintf_r+0x7a>
 80099ee:	ebba 0b04 	subs.w	fp, sl, r4
 80099f2:	d00b      	beq.n	8009a0c <_vfiprintf_r+0xa4>
 80099f4:	465b      	mov	r3, fp
 80099f6:	4622      	mov	r2, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	4630      	mov	r0, r6
 80099fc:	f7ff ffa1 	bl	8009942 <__sfputs_r>
 8009a00:	3001      	adds	r0, #1
 8009a02:	f000 80a7 	beq.w	8009b54 <_vfiprintf_r+0x1ec>
 8009a06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a08:	445a      	add	r2, fp
 8009a0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a0c:	f89a 3000 	ldrb.w	r3, [sl]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	f000 809f 	beq.w	8009b54 <_vfiprintf_r+0x1ec>
 8009a16:	2300      	movs	r3, #0
 8009a18:	f04f 32ff 	mov.w	r2, #4294967295
 8009a1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a20:	f10a 0a01 	add.w	sl, sl, #1
 8009a24:	9304      	str	r3, [sp, #16]
 8009a26:	9307      	str	r3, [sp, #28]
 8009a28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a2e:	4654      	mov	r4, sl
 8009a30:	2205      	movs	r2, #5
 8009a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a36:	4853      	ldr	r0, [pc, #332]	@ (8009b84 <_vfiprintf_r+0x21c>)
 8009a38:	f7f6 fbd2 	bl	80001e0 <memchr>
 8009a3c:	9a04      	ldr	r2, [sp, #16]
 8009a3e:	b9d8      	cbnz	r0, 8009a78 <_vfiprintf_r+0x110>
 8009a40:	06d1      	lsls	r1, r2, #27
 8009a42:	bf44      	itt	mi
 8009a44:	2320      	movmi	r3, #32
 8009a46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a4a:	0713      	lsls	r3, r2, #28
 8009a4c:	bf44      	itt	mi
 8009a4e:	232b      	movmi	r3, #43	@ 0x2b
 8009a50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a54:	f89a 3000 	ldrb.w	r3, [sl]
 8009a58:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a5a:	d015      	beq.n	8009a88 <_vfiprintf_r+0x120>
 8009a5c:	9a07      	ldr	r2, [sp, #28]
 8009a5e:	4654      	mov	r4, sl
 8009a60:	2000      	movs	r0, #0
 8009a62:	f04f 0c0a 	mov.w	ip, #10
 8009a66:	4621      	mov	r1, r4
 8009a68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a6c:	3b30      	subs	r3, #48	@ 0x30
 8009a6e:	2b09      	cmp	r3, #9
 8009a70:	d94b      	bls.n	8009b0a <_vfiprintf_r+0x1a2>
 8009a72:	b1b0      	cbz	r0, 8009aa2 <_vfiprintf_r+0x13a>
 8009a74:	9207      	str	r2, [sp, #28]
 8009a76:	e014      	b.n	8009aa2 <_vfiprintf_r+0x13a>
 8009a78:	eba0 0308 	sub.w	r3, r0, r8
 8009a7c:	fa09 f303 	lsl.w	r3, r9, r3
 8009a80:	4313      	orrs	r3, r2
 8009a82:	9304      	str	r3, [sp, #16]
 8009a84:	46a2      	mov	sl, r4
 8009a86:	e7d2      	b.n	8009a2e <_vfiprintf_r+0xc6>
 8009a88:	9b03      	ldr	r3, [sp, #12]
 8009a8a:	1d19      	adds	r1, r3, #4
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	9103      	str	r1, [sp, #12]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	bfbb      	ittet	lt
 8009a94:	425b      	neglt	r3, r3
 8009a96:	f042 0202 	orrlt.w	r2, r2, #2
 8009a9a:	9307      	strge	r3, [sp, #28]
 8009a9c:	9307      	strlt	r3, [sp, #28]
 8009a9e:	bfb8      	it	lt
 8009aa0:	9204      	strlt	r2, [sp, #16]
 8009aa2:	7823      	ldrb	r3, [r4, #0]
 8009aa4:	2b2e      	cmp	r3, #46	@ 0x2e
 8009aa6:	d10a      	bne.n	8009abe <_vfiprintf_r+0x156>
 8009aa8:	7863      	ldrb	r3, [r4, #1]
 8009aaa:	2b2a      	cmp	r3, #42	@ 0x2a
 8009aac:	d132      	bne.n	8009b14 <_vfiprintf_r+0x1ac>
 8009aae:	9b03      	ldr	r3, [sp, #12]
 8009ab0:	1d1a      	adds	r2, r3, #4
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	9203      	str	r2, [sp, #12]
 8009ab6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009aba:	3402      	adds	r4, #2
 8009abc:	9305      	str	r3, [sp, #20]
 8009abe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009b94 <_vfiprintf_r+0x22c>
 8009ac2:	7821      	ldrb	r1, [r4, #0]
 8009ac4:	2203      	movs	r2, #3
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f7f6 fb8a 	bl	80001e0 <memchr>
 8009acc:	b138      	cbz	r0, 8009ade <_vfiprintf_r+0x176>
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	eba0 000a 	sub.w	r0, r0, sl
 8009ad4:	2240      	movs	r2, #64	@ 0x40
 8009ad6:	4082      	lsls	r2, r0
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	3401      	adds	r4, #1
 8009adc:	9304      	str	r3, [sp, #16]
 8009ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ae2:	4829      	ldr	r0, [pc, #164]	@ (8009b88 <_vfiprintf_r+0x220>)
 8009ae4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ae8:	2206      	movs	r2, #6
 8009aea:	f7f6 fb79 	bl	80001e0 <memchr>
 8009aee:	2800      	cmp	r0, #0
 8009af0:	d03f      	beq.n	8009b72 <_vfiprintf_r+0x20a>
 8009af2:	4b26      	ldr	r3, [pc, #152]	@ (8009b8c <_vfiprintf_r+0x224>)
 8009af4:	bb1b      	cbnz	r3, 8009b3e <_vfiprintf_r+0x1d6>
 8009af6:	9b03      	ldr	r3, [sp, #12]
 8009af8:	3307      	adds	r3, #7
 8009afa:	f023 0307 	bic.w	r3, r3, #7
 8009afe:	3308      	adds	r3, #8
 8009b00:	9303      	str	r3, [sp, #12]
 8009b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b04:	443b      	add	r3, r7
 8009b06:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b08:	e76a      	b.n	80099e0 <_vfiprintf_r+0x78>
 8009b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b0e:	460c      	mov	r4, r1
 8009b10:	2001      	movs	r0, #1
 8009b12:	e7a8      	b.n	8009a66 <_vfiprintf_r+0xfe>
 8009b14:	2300      	movs	r3, #0
 8009b16:	3401      	adds	r4, #1
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	4619      	mov	r1, r3
 8009b1c:	f04f 0c0a 	mov.w	ip, #10
 8009b20:	4620      	mov	r0, r4
 8009b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b26:	3a30      	subs	r2, #48	@ 0x30
 8009b28:	2a09      	cmp	r2, #9
 8009b2a:	d903      	bls.n	8009b34 <_vfiprintf_r+0x1cc>
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d0c6      	beq.n	8009abe <_vfiprintf_r+0x156>
 8009b30:	9105      	str	r1, [sp, #20]
 8009b32:	e7c4      	b.n	8009abe <_vfiprintf_r+0x156>
 8009b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b38:	4604      	mov	r4, r0
 8009b3a:	2301      	movs	r3, #1
 8009b3c:	e7f0      	b.n	8009b20 <_vfiprintf_r+0x1b8>
 8009b3e:	ab03      	add	r3, sp, #12
 8009b40:	9300      	str	r3, [sp, #0]
 8009b42:	462a      	mov	r2, r5
 8009b44:	4b12      	ldr	r3, [pc, #72]	@ (8009b90 <_vfiprintf_r+0x228>)
 8009b46:	a904      	add	r1, sp, #16
 8009b48:	4630      	mov	r0, r6
 8009b4a:	f7fd fec3 	bl	80078d4 <_printf_float>
 8009b4e:	4607      	mov	r7, r0
 8009b50:	1c78      	adds	r0, r7, #1
 8009b52:	d1d6      	bne.n	8009b02 <_vfiprintf_r+0x19a>
 8009b54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009b56:	07d9      	lsls	r1, r3, #31
 8009b58:	d405      	bmi.n	8009b66 <_vfiprintf_r+0x1fe>
 8009b5a:	89ab      	ldrh	r3, [r5, #12]
 8009b5c:	059a      	lsls	r2, r3, #22
 8009b5e:	d402      	bmi.n	8009b66 <_vfiprintf_r+0x1fe>
 8009b60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009b62:	f7fe fc03 	bl	800836c <__retarget_lock_release_recursive>
 8009b66:	89ab      	ldrh	r3, [r5, #12]
 8009b68:	065b      	lsls	r3, r3, #25
 8009b6a:	f53f af1f 	bmi.w	80099ac <_vfiprintf_r+0x44>
 8009b6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b70:	e71e      	b.n	80099b0 <_vfiprintf_r+0x48>
 8009b72:	ab03      	add	r3, sp, #12
 8009b74:	9300      	str	r3, [sp, #0]
 8009b76:	462a      	mov	r2, r5
 8009b78:	4b05      	ldr	r3, [pc, #20]	@ (8009b90 <_vfiprintf_r+0x228>)
 8009b7a:	a904      	add	r1, sp, #16
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	f7fe f941 	bl	8007e04 <_printf_i>
 8009b82:	e7e4      	b.n	8009b4e <_vfiprintf_r+0x1e6>
 8009b84:	0800a2ba 	.word	0x0800a2ba
 8009b88:	0800a2c4 	.word	0x0800a2c4
 8009b8c:	080078d5 	.word	0x080078d5
 8009b90:	08009943 	.word	0x08009943
 8009b94:	0800a2c0 	.word	0x0800a2c0

08009b98 <__sflush_r>:
 8009b98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba0:	0716      	lsls	r6, r2, #28
 8009ba2:	4605      	mov	r5, r0
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	d454      	bmi.n	8009c52 <__sflush_r+0xba>
 8009ba8:	684b      	ldr	r3, [r1, #4]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	dc02      	bgt.n	8009bb4 <__sflush_r+0x1c>
 8009bae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dd48      	ble.n	8009c46 <__sflush_r+0xae>
 8009bb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bb6:	2e00      	cmp	r6, #0
 8009bb8:	d045      	beq.n	8009c46 <__sflush_r+0xae>
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bc0:	682f      	ldr	r7, [r5, #0]
 8009bc2:	6a21      	ldr	r1, [r4, #32]
 8009bc4:	602b      	str	r3, [r5, #0]
 8009bc6:	d030      	beq.n	8009c2a <__sflush_r+0x92>
 8009bc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bca:	89a3      	ldrh	r3, [r4, #12]
 8009bcc:	0759      	lsls	r1, r3, #29
 8009bce:	d505      	bpl.n	8009bdc <__sflush_r+0x44>
 8009bd0:	6863      	ldr	r3, [r4, #4]
 8009bd2:	1ad2      	subs	r2, r2, r3
 8009bd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009bd6:	b10b      	cbz	r3, 8009bdc <__sflush_r+0x44>
 8009bd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bda:	1ad2      	subs	r2, r2, r3
 8009bdc:	2300      	movs	r3, #0
 8009bde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009be0:	6a21      	ldr	r1, [r4, #32]
 8009be2:	4628      	mov	r0, r5
 8009be4:	47b0      	blx	r6
 8009be6:	1c43      	adds	r3, r0, #1
 8009be8:	89a3      	ldrh	r3, [r4, #12]
 8009bea:	d106      	bne.n	8009bfa <__sflush_r+0x62>
 8009bec:	6829      	ldr	r1, [r5, #0]
 8009bee:	291d      	cmp	r1, #29
 8009bf0:	d82b      	bhi.n	8009c4a <__sflush_r+0xb2>
 8009bf2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c9c <__sflush_r+0x104>)
 8009bf4:	40ca      	lsrs	r2, r1
 8009bf6:	07d6      	lsls	r6, r2, #31
 8009bf8:	d527      	bpl.n	8009c4a <__sflush_r+0xb2>
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	6062      	str	r2, [r4, #4]
 8009bfe:	04d9      	lsls	r1, r3, #19
 8009c00:	6922      	ldr	r2, [r4, #16]
 8009c02:	6022      	str	r2, [r4, #0]
 8009c04:	d504      	bpl.n	8009c10 <__sflush_r+0x78>
 8009c06:	1c42      	adds	r2, r0, #1
 8009c08:	d101      	bne.n	8009c0e <__sflush_r+0x76>
 8009c0a:	682b      	ldr	r3, [r5, #0]
 8009c0c:	b903      	cbnz	r3, 8009c10 <__sflush_r+0x78>
 8009c0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c12:	602f      	str	r7, [r5, #0]
 8009c14:	b1b9      	cbz	r1, 8009c46 <__sflush_r+0xae>
 8009c16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c1a:	4299      	cmp	r1, r3
 8009c1c:	d002      	beq.n	8009c24 <__sflush_r+0x8c>
 8009c1e:	4628      	mov	r0, r5
 8009c20:	f7ff f9fe 	bl	8009020 <_free_r>
 8009c24:	2300      	movs	r3, #0
 8009c26:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c28:	e00d      	b.n	8009c46 <__sflush_r+0xae>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	47b0      	blx	r6
 8009c30:	4602      	mov	r2, r0
 8009c32:	1c50      	adds	r0, r2, #1
 8009c34:	d1c9      	bne.n	8009bca <__sflush_r+0x32>
 8009c36:	682b      	ldr	r3, [r5, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d0c6      	beq.n	8009bca <__sflush_r+0x32>
 8009c3c:	2b1d      	cmp	r3, #29
 8009c3e:	d001      	beq.n	8009c44 <__sflush_r+0xac>
 8009c40:	2b16      	cmp	r3, #22
 8009c42:	d11e      	bne.n	8009c82 <__sflush_r+0xea>
 8009c44:	602f      	str	r7, [r5, #0]
 8009c46:	2000      	movs	r0, #0
 8009c48:	e022      	b.n	8009c90 <__sflush_r+0xf8>
 8009c4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c4e:	b21b      	sxth	r3, r3
 8009c50:	e01b      	b.n	8009c8a <__sflush_r+0xf2>
 8009c52:	690f      	ldr	r7, [r1, #16]
 8009c54:	2f00      	cmp	r7, #0
 8009c56:	d0f6      	beq.n	8009c46 <__sflush_r+0xae>
 8009c58:	0793      	lsls	r3, r2, #30
 8009c5a:	680e      	ldr	r6, [r1, #0]
 8009c5c:	bf08      	it	eq
 8009c5e:	694b      	ldreq	r3, [r1, #20]
 8009c60:	600f      	str	r7, [r1, #0]
 8009c62:	bf18      	it	ne
 8009c64:	2300      	movne	r3, #0
 8009c66:	eba6 0807 	sub.w	r8, r6, r7
 8009c6a:	608b      	str	r3, [r1, #8]
 8009c6c:	f1b8 0f00 	cmp.w	r8, #0
 8009c70:	dde9      	ble.n	8009c46 <__sflush_r+0xae>
 8009c72:	6a21      	ldr	r1, [r4, #32]
 8009c74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c76:	4643      	mov	r3, r8
 8009c78:	463a      	mov	r2, r7
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b0      	blx	r6
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	dc08      	bgt.n	8009c94 <__sflush_r+0xfc>
 8009c82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c8a:	81a3      	strh	r3, [r4, #12]
 8009c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c94:	4407      	add	r7, r0
 8009c96:	eba8 0800 	sub.w	r8, r8, r0
 8009c9a:	e7e7      	b.n	8009c6c <__sflush_r+0xd4>
 8009c9c:	20400001 	.word	0x20400001

08009ca0 <_fflush_r>:
 8009ca0:	b538      	push	{r3, r4, r5, lr}
 8009ca2:	690b      	ldr	r3, [r1, #16]
 8009ca4:	4605      	mov	r5, r0
 8009ca6:	460c      	mov	r4, r1
 8009ca8:	b913      	cbnz	r3, 8009cb0 <_fflush_r+0x10>
 8009caa:	2500      	movs	r5, #0
 8009cac:	4628      	mov	r0, r5
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	b118      	cbz	r0, 8009cba <_fflush_r+0x1a>
 8009cb2:	6a03      	ldr	r3, [r0, #32]
 8009cb4:	b90b      	cbnz	r3, 8009cba <_fflush_r+0x1a>
 8009cb6:	f7fe fa4f 	bl	8008158 <__sinit>
 8009cba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d0f3      	beq.n	8009caa <_fflush_r+0xa>
 8009cc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cc4:	07d0      	lsls	r0, r2, #31
 8009cc6:	d404      	bmi.n	8009cd2 <_fflush_r+0x32>
 8009cc8:	0599      	lsls	r1, r3, #22
 8009cca:	d402      	bmi.n	8009cd2 <_fflush_r+0x32>
 8009ccc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cce:	f7fe fb4c 	bl	800836a <__retarget_lock_acquire_recursive>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	f7ff ff5f 	bl	8009b98 <__sflush_r>
 8009cda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cdc:	07da      	lsls	r2, r3, #31
 8009cde:	4605      	mov	r5, r0
 8009ce0:	d4e4      	bmi.n	8009cac <_fflush_r+0xc>
 8009ce2:	89a3      	ldrh	r3, [r4, #12]
 8009ce4:	059b      	lsls	r3, r3, #22
 8009ce6:	d4e1      	bmi.n	8009cac <_fflush_r+0xc>
 8009ce8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cea:	f7fe fb3f 	bl	800836c <__retarget_lock_release_recursive>
 8009cee:	e7dd      	b.n	8009cac <_fflush_r+0xc>

08009cf0 <__swbuf_r>:
 8009cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf2:	460e      	mov	r6, r1
 8009cf4:	4614      	mov	r4, r2
 8009cf6:	4605      	mov	r5, r0
 8009cf8:	b118      	cbz	r0, 8009d02 <__swbuf_r+0x12>
 8009cfa:	6a03      	ldr	r3, [r0, #32]
 8009cfc:	b90b      	cbnz	r3, 8009d02 <__swbuf_r+0x12>
 8009cfe:	f7fe fa2b 	bl	8008158 <__sinit>
 8009d02:	69a3      	ldr	r3, [r4, #24]
 8009d04:	60a3      	str	r3, [r4, #8]
 8009d06:	89a3      	ldrh	r3, [r4, #12]
 8009d08:	071a      	lsls	r2, r3, #28
 8009d0a:	d501      	bpl.n	8009d10 <__swbuf_r+0x20>
 8009d0c:	6923      	ldr	r3, [r4, #16]
 8009d0e:	b943      	cbnz	r3, 8009d22 <__swbuf_r+0x32>
 8009d10:	4621      	mov	r1, r4
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 f82a 	bl	8009d6c <__swsetup_r>
 8009d18:	b118      	cbz	r0, 8009d22 <__swbuf_r+0x32>
 8009d1a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d1e:	4638      	mov	r0, r7
 8009d20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d22:	6823      	ldr	r3, [r4, #0]
 8009d24:	6922      	ldr	r2, [r4, #16]
 8009d26:	1a98      	subs	r0, r3, r2
 8009d28:	6963      	ldr	r3, [r4, #20]
 8009d2a:	b2f6      	uxtb	r6, r6
 8009d2c:	4283      	cmp	r3, r0
 8009d2e:	4637      	mov	r7, r6
 8009d30:	dc05      	bgt.n	8009d3e <__swbuf_r+0x4e>
 8009d32:	4621      	mov	r1, r4
 8009d34:	4628      	mov	r0, r5
 8009d36:	f7ff ffb3 	bl	8009ca0 <_fflush_r>
 8009d3a:	2800      	cmp	r0, #0
 8009d3c:	d1ed      	bne.n	8009d1a <__swbuf_r+0x2a>
 8009d3e:	68a3      	ldr	r3, [r4, #8]
 8009d40:	3b01      	subs	r3, #1
 8009d42:	60a3      	str	r3, [r4, #8]
 8009d44:	6823      	ldr	r3, [r4, #0]
 8009d46:	1c5a      	adds	r2, r3, #1
 8009d48:	6022      	str	r2, [r4, #0]
 8009d4a:	701e      	strb	r6, [r3, #0]
 8009d4c:	6962      	ldr	r2, [r4, #20]
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d004      	beq.n	8009d5e <__swbuf_r+0x6e>
 8009d54:	89a3      	ldrh	r3, [r4, #12]
 8009d56:	07db      	lsls	r3, r3, #31
 8009d58:	d5e1      	bpl.n	8009d1e <__swbuf_r+0x2e>
 8009d5a:	2e0a      	cmp	r6, #10
 8009d5c:	d1df      	bne.n	8009d1e <__swbuf_r+0x2e>
 8009d5e:	4621      	mov	r1, r4
 8009d60:	4628      	mov	r0, r5
 8009d62:	f7ff ff9d 	bl	8009ca0 <_fflush_r>
 8009d66:	2800      	cmp	r0, #0
 8009d68:	d0d9      	beq.n	8009d1e <__swbuf_r+0x2e>
 8009d6a:	e7d6      	b.n	8009d1a <__swbuf_r+0x2a>

08009d6c <__swsetup_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4b29      	ldr	r3, [pc, #164]	@ (8009e14 <__swsetup_r+0xa8>)
 8009d70:	4605      	mov	r5, r0
 8009d72:	6818      	ldr	r0, [r3, #0]
 8009d74:	460c      	mov	r4, r1
 8009d76:	b118      	cbz	r0, 8009d80 <__swsetup_r+0x14>
 8009d78:	6a03      	ldr	r3, [r0, #32]
 8009d7a:	b90b      	cbnz	r3, 8009d80 <__swsetup_r+0x14>
 8009d7c:	f7fe f9ec 	bl	8008158 <__sinit>
 8009d80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d84:	0719      	lsls	r1, r3, #28
 8009d86:	d422      	bmi.n	8009dce <__swsetup_r+0x62>
 8009d88:	06da      	lsls	r2, r3, #27
 8009d8a:	d407      	bmi.n	8009d9c <__swsetup_r+0x30>
 8009d8c:	2209      	movs	r2, #9
 8009d8e:	602a      	str	r2, [r5, #0]
 8009d90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d94:	81a3      	strh	r3, [r4, #12]
 8009d96:	f04f 30ff 	mov.w	r0, #4294967295
 8009d9a:	e033      	b.n	8009e04 <__swsetup_r+0x98>
 8009d9c:	0758      	lsls	r0, r3, #29
 8009d9e:	d512      	bpl.n	8009dc6 <__swsetup_r+0x5a>
 8009da0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009da2:	b141      	cbz	r1, 8009db6 <__swsetup_r+0x4a>
 8009da4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009da8:	4299      	cmp	r1, r3
 8009daa:	d002      	beq.n	8009db2 <__swsetup_r+0x46>
 8009dac:	4628      	mov	r0, r5
 8009dae:	f7ff f937 	bl	8009020 <_free_r>
 8009db2:	2300      	movs	r3, #0
 8009db4:	6363      	str	r3, [r4, #52]	@ 0x34
 8009db6:	89a3      	ldrh	r3, [r4, #12]
 8009db8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009dbc:	81a3      	strh	r3, [r4, #12]
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	6063      	str	r3, [r4, #4]
 8009dc2:	6923      	ldr	r3, [r4, #16]
 8009dc4:	6023      	str	r3, [r4, #0]
 8009dc6:	89a3      	ldrh	r3, [r4, #12]
 8009dc8:	f043 0308 	orr.w	r3, r3, #8
 8009dcc:	81a3      	strh	r3, [r4, #12]
 8009dce:	6923      	ldr	r3, [r4, #16]
 8009dd0:	b94b      	cbnz	r3, 8009de6 <__swsetup_r+0x7a>
 8009dd2:	89a3      	ldrh	r3, [r4, #12]
 8009dd4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009dd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ddc:	d003      	beq.n	8009de6 <__swsetup_r+0x7a>
 8009dde:	4621      	mov	r1, r4
 8009de0:	4628      	mov	r0, r5
 8009de2:	f000 f8c1 	bl	8009f68 <__smakebuf_r>
 8009de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dea:	f013 0201 	ands.w	r2, r3, #1
 8009dee:	d00a      	beq.n	8009e06 <__swsetup_r+0x9a>
 8009df0:	2200      	movs	r2, #0
 8009df2:	60a2      	str	r2, [r4, #8]
 8009df4:	6962      	ldr	r2, [r4, #20]
 8009df6:	4252      	negs	r2, r2
 8009df8:	61a2      	str	r2, [r4, #24]
 8009dfa:	6922      	ldr	r2, [r4, #16]
 8009dfc:	b942      	cbnz	r2, 8009e10 <__swsetup_r+0xa4>
 8009dfe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009e02:	d1c5      	bne.n	8009d90 <__swsetup_r+0x24>
 8009e04:	bd38      	pop	{r3, r4, r5, pc}
 8009e06:	0799      	lsls	r1, r3, #30
 8009e08:	bf58      	it	pl
 8009e0a:	6962      	ldrpl	r2, [r4, #20]
 8009e0c:	60a2      	str	r2, [r4, #8]
 8009e0e:	e7f4      	b.n	8009dfa <__swsetup_r+0x8e>
 8009e10:	2000      	movs	r0, #0
 8009e12:	e7f7      	b.n	8009e04 <__swsetup_r+0x98>
 8009e14:	20000038 	.word	0x20000038

08009e18 <_sbrk_r>:
 8009e18:	b538      	push	{r3, r4, r5, lr}
 8009e1a:	4d06      	ldr	r5, [pc, #24]	@ (8009e34 <_sbrk_r+0x1c>)
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	4604      	mov	r4, r0
 8009e20:	4608      	mov	r0, r1
 8009e22:	602b      	str	r3, [r5, #0]
 8009e24:	f7f7 ff92 	bl	8001d4c <_sbrk>
 8009e28:	1c43      	adds	r3, r0, #1
 8009e2a:	d102      	bne.n	8009e32 <_sbrk_r+0x1a>
 8009e2c:	682b      	ldr	r3, [r5, #0]
 8009e2e:	b103      	cbz	r3, 8009e32 <_sbrk_r+0x1a>
 8009e30:	6023      	str	r3, [r4, #0]
 8009e32:	bd38      	pop	{r3, r4, r5, pc}
 8009e34:	200005d8 	.word	0x200005d8

08009e38 <memcpy>:
 8009e38:	440a      	add	r2, r1
 8009e3a:	4291      	cmp	r1, r2
 8009e3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e40:	d100      	bne.n	8009e44 <memcpy+0xc>
 8009e42:	4770      	bx	lr
 8009e44:	b510      	push	{r4, lr}
 8009e46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e4e:	4291      	cmp	r1, r2
 8009e50:	d1f9      	bne.n	8009e46 <memcpy+0xe>
 8009e52:	bd10      	pop	{r4, pc}

08009e54 <__assert_func>:
 8009e54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e56:	4614      	mov	r4, r2
 8009e58:	461a      	mov	r2, r3
 8009e5a:	4b09      	ldr	r3, [pc, #36]	@ (8009e80 <__assert_func+0x2c>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	4605      	mov	r5, r0
 8009e60:	68d8      	ldr	r0, [r3, #12]
 8009e62:	b14c      	cbz	r4, 8009e78 <__assert_func+0x24>
 8009e64:	4b07      	ldr	r3, [pc, #28]	@ (8009e84 <__assert_func+0x30>)
 8009e66:	9100      	str	r1, [sp, #0]
 8009e68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e6c:	4906      	ldr	r1, [pc, #24]	@ (8009e88 <__assert_func+0x34>)
 8009e6e:	462b      	mov	r3, r5
 8009e70:	f000 f842 	bl	8009ef8 <fiprintf>
 8009e74:	f000 f8d6 	bl	800a024 <abort>
 8009e78:	4b04      	ldr	r3, [pc, #16]	@ (8009e8c <__assert_func+0x38>)
 8009e7a:	461c      	mov	r4, r3
 8009e7c:	e7f3      	b.n	8009e66 <__assert_func+0x12>
 8009e7e:	bf00      	nop
 8009e80:	20000038 	.word	0x20000038
 8009e84:	0800a2d5 	.word	0x0800a2d5
 8009e88:	0800a2e2 	.word	0x0800a2e2
 8009e8c:	0800a310 	.word	0x0800a310

08009e90 <_calloc_r>:
 8009e90:	b570      	push	{r4, r5, r6, lr}
 8009e92:	fba1 5402 	umull	r5, r4, r1, r2
 8009e96:	b934      	cbnz	r4, 8009ea6 <_calloc_r+0x16>
 8009e98:	4629      	mov	r1, r5
 8009e9a:	f7ff f935 	bl	8009108 <_malloc_r>
 8009e9e:	4606      	mov	r6, r0
 8009ea0:	b928      	cbnz	r0, 8009eae <_calloc_r+0x1e>
 8009ea2:	4630      	mov	r0, r6
 8009ea4:	bd70      	pop	{r4, r5, r6, pc}
 8009ea6:	220c      	movs	r2, #12
 8009ea8:	6002      	str	r2, [r0, #0]
 8009eaa:	2600      	movs	r6, #0
 8009eac:	e7f9      	b.n	8009ea2 <_calloc_r+0x12>
 8009eae:	462a      	mov	r2, r5
 8009eb0:	4621      	mov	r1, r4
 8009eb2:	f7fe f9dc 	bl	800826e <memset>
 8009eb6:	e7f4      	b.n	8009ea2 <_calloc_r+0x12>

08009eb8 <__ascii_mbtowc>:
 8009eb8:	b082      	sub	sp, #8
 8009eba:	b901      	cbnz	r1, 8009ebe <__ascii_mbtowc+0x6>
 8009ebc:	a901      	add	r1, sp, #4
 8009ebe:	b142      	cbz	r2, 8009ed2 <__ascii_mbtowc+0x1a>
 8009ec0:	b14b      	cbz	r3, 8009ed6 <__ascii_mbtowc+0x1e>
 8009ec2:	7813      	ldrb	r3, [r2, #0]
 8009ec4:	600b      	str	r3, [r1, #0]
 8009ec6:	7812      	ldrb	r2, [r2, #0]
 8009ec8:	1e10      	subs	r0, r2, #0
 8009eca:	bf18      	it	ne
 8009ecc:	2001      	movne	r0, #1
 8009ece:	b002      	add	sp, #8
 8009ed0:	4770      	bx	lr
 8009ed2:	4610      	mov	r0, r2
 8009ed4:	e7fb      	b.n	8009ece <__ascii_mbtowc+0x16>
 8009ed6:	f06f 0001 	mvn.w	r0, #1
 8009eda:	e7f8      	b.n	8009ece <__ascii_mbtowc+0x16>

08009edc <__ascii_wctomb>:
 8009edc:	4603      	mov	r3, r0
 8009ede:	4608      	mov	r0, r1
 8009ee0:	b141      	cbz	r1, 8009ef4 <__ascii_wctomb+0x18>
 8009ee2:	2aff      	cmp	r2, #255	@ 0xff
 8009ee4:	d904      	bls.n	8009ef0 <__ascii_wctomb+0x14>
 8009ee6:	228a      	movs	r2, #138	@ 0x8a
 8009ee8:	601a      	str	r2, [r3, #0]
 8009eea:	f04f 30ff 	mov.w	r0, #4294967295
 8009eee:	4770      	bx	lr
 8009ef0:	700a      	strb	r2, [r1, #0]
 8009ef2:	2001      	movs	r0, #1
 8009ef4:	4770      	bx	lr
	...

08009ef8 <fiprintf>:
 8009ef8:	b40e      	push	{r1, r2, r3}
 8009efa:	b503      	push	{r0, r1, lr}
 8009efc:	4601      	mov	r1, r0
 8009efe:	ab03      	add	r3, sp, #12
 8009f00:	4805      	ldr	r0, [pc, #20]	@ (8009f18 <fiprintf+0x20>)
 8009f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f06:	6800      	ldr	r0, [r0, #0]
 8009f08:	9301      	str	r3, [sp, #4]
 8009f0a:	f7ff fd2d 	bl	8009968 <_vfiprintf_r>
 8009f0e:	b002      	add	sp, #8
 8009f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f14:	b003      	add	sp, #12
 8009f16:	4770      	bx	lr
 8009f18:	20000038 	.word	0x20000038

08009f1c <__swhatbuf_r>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	460c      	mov	r4, r1
 8009f20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f24:	2900      	cmp	r1, #0
 8009f26:	b096      	sub	sp, #88	@ 0x58
 8009f28:	4615      	mov	r5, r2
 8009f2a:	461e      	mov	r6, r3
 8009f2c:	da0d      	bge.n	8009f4a <__swhatbuf_r+0x2e>
 8009f2e:	89a3      	ldrh	r3, [r4, #12]
 8009f30:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009f34:	f04f 0100 	mov.w	r1, #0
 8009f38:	bf14      	ite	ne
 8009f3a:	2340      	movne	r3, #64	@ 0x40
 8009f3c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009f40:	2000      	movs	r0, #0
 8009f42:	6031      	str	r1, [r6, #0]
 8009f44:	602b      	str	r3, [r5, #0]
 8009f46:	b016      	add	sp, #88	@ 0x58
 8009f48:	bd70      	pop	{r4, r5, r6, pc}
 8009f4a:	466a      	mov	r2, sp
 8009f4c:	f000 f848 	bl	8009fe0 <_fstat_r>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	dbec      	blt.n	8009f2e <__swhatbuf_r+0x12>
 8009f54:	9901      	ldr	r1, [sp, #4]
 8009f56:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009f5a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009f5e:	4259      	negs	r1, r3
 8009f60:	4159      	adcs	r1, r3
 8009f62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009f66:	e7eb      	b.n	8009f40 <__swhatbuf_r+0x24>

08009f68 <__smakebuf_r>:
 8009f68:	898b      	ldrh	r3, [r1, #12]
 8009f6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f6c:	079d      	lsls	r5, r3, #30
 8009f6e:	4606      	mov	r6, r0
 8009f70:	460c      	mov	r4, r1
 8009f72:	d507      	bpl.n	8009f84 <__smakebuf_r+0x1c>
 8009f74:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009f78:	6023      	str	r3, [r4, #0]
 8009f7a:	6123      	str	r3, [r4, #16]
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	6163      	str	r3, [r4, #20]
 8009f80:	b003      	add	sp, #12
 8009f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f84:	ab01      	add	r3, sp, #4
 8009f86:	466a      	mov	r2, sp
 8009f88:	f7ff ffc8 	bl	8009f1c <__swhatbuf_r>
 8009f8c:	9f00      	ldr	r7, [sp, #0]
 8009f8e:	4605      	mov	r5, r0
 8009f90:	4639      	mov	r1, r7
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff f8b8 	bl	8009108 <_malloc_r>
 8009f98:	b948      	cbnz	r0, 8009fae <__smakebuf_r+0x46>
 8009f9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f9e:	059a      	lsls	r2, r3, #22
 8009fa0:	d4ee      	bmi.n	8009f80 <__smakebuf_r+0x18>
 8009fa2:	f023 0303 	bic.w	r3, r3, #3
 8009fa6:	f043 0302 	orr.w	r3, r3, #2
 8009faa:	81a3      	strh	r3, [r4, #12]
 8009fac:	e7e2      	b.n	8009f74 <__smakebuf_r+0xc>
 8009fae:	89a3      	ldrh	r3, [r4, #12]
 8009fb0:	6020      	str	r0, [r4, #0]
 8009fb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009fb6:	81a3      	strh	r3, [r4, #12]
 8009fb8:	9b01      	ldr	r3, [sp, #4]
 8009fba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009fbe:	b15b      	cbz	r3, 8009fd8 <__smakebuf_r+0x70>
 8009fc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009fc4:	4630      	mov	r0, r6
 8009fc6:	f000 f81d 	bl	800a004 <_isatty_r>
 8009fca:	b128      	cbz	r0, 8009fd8 <__smakebuf_r+0x70>
 8009fcc:	89a3      	ldrh	r3, [r4, #12]
 8009fce:	f023 0303 	bic.w	r3, r3, #3
 8009fd2:	f043 0301 	orr.w	r3, r3, #1
 8009fd6:	81a3      	strh	r3, [r4, #12]
 8009fd8:	89a3      	ldrh	r3, [r4, #12]
 8009fda:	431d      	orrs	r5, r3
 8009fdc:	81a5      	strh	r5, [r4, #12]
 8009fde:	e7cf      	b.n	8009f80 <__smakebuf_r+0x18>

08009fe0 <_fstat_r>:
 8009fe0:	b538      	push	{r3, r4, r5, lr}
 8009fe2:	4d07      	ldr	r5, [pc, #28]	@ (800a000 <_fstat_r+0x20>)
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	4604      	mov	r4, r0
 8009fe8:	4608      	mov	r0, r1
 8009fea:	4611      	mov	r1, r2
 8009fec:	602b      	str	r3, [r5, #0]
 8009fee:	f7f7 fe85 	bl	8001cfc <_fstat>
 8009ff2:	1c43      	adds	r3, r0, #1
 8009ff4:	d102      	bne.n	8009ffc <_fstat_r+0x1c>
 8009ff6:	682b      	ldr	r3, [r5, #0]
 8009ff8:	b103      	cbz	r3, 8009ffc <_fstat_r+0x1c>
 8009ffa:	6023      	str	r3, [r4, #0]
 8009ffc:	bd38      	pop	{r3, r4, r5, pc}
 8009ffe:	bf00      	nop
 800a000:	200005d8 	.word	0x200005d8

0800a004 <_isatty_r>:
 800a004:	b538      	push	{r3, r4, r5, lr}
 800a006:	4d06      	ldr	r5, [pc, #24]	@ (800a020 <_isatty_r+0x1c>)
 800a008:	2300      	movs	r3, #0
 800a00a:	4604      	mov	r4, r0
 800a00c:	4608      	mov	r0, r1
 800a00e:	602b      	str	r3, [r5, #0]
 800a010:	f7f7 fe84 	bl	8001d1c <_isatty>
 800a014:	1c43      	adds	r3, r0, #1
 800a016:	d102      	bne.n	800a01e <_isatty_r+0x1a>
 800a018:	682b      	ldr	r3, [r5, #0]
 800a01a:	b103      	cbz	r3, 800a01e <_isatty_r+0x1a>
 800a01c:	6023      	str	r3, [r4, #0]
 800a01e:	bd38      	pop	{r3, r4, r5, pc}
 800a020:	200005d8 	.word	0x200005d8

0800a024 <abort>:
 800a024:	b508      	push	{r3, lr}
 800a026:	2006      	movs	r0, #6
 800a028:	f000 f82c 	bl	800a084 <raise>
 800a02c:	2001      	movs	r0, #1
 800a02e:	f7f7 fe15 	bl	8001c5c <_exit>

0800a032 <_raise_r>:
 800a032:	291f      	cmp	r1, #31
 800a034:	b538      	push	{r3, r4, r5, lr}
 800a036:	4605      	mov	r5, r0
 800a038:	460c      	mov	r4, r1
 800a03a:	d904      	bls.n	800a046 <_raise_r+0x14>
 800a03c:	2316      	movs	r3, #22
 800a03e:	6003      	str	r3, [r0, #0]
 800a040:	f04f 30ff 	mov.w	r0, #4294967295
 800a044:	bd38      	pop	{r3, r4, r5, pc}
 800a046:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a048:	b112      	cbz	r2, 800a050 <_raise_r+0x1e>
 800a04a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a04e:	b94b      	cbnz	r3, 800a064 <_raise_r+0x32>
 800a050:	4628      	mov	r0, r5
 800a052:	f000 f831 	bl	800a0b8 <_getpid_r>
 800a056:	4622      	mov	r2, r4
 800a058:	4601      	mov	r1, r0
 800a05a:	4628      	mov	r0, r5
 800a05c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a060:	f000 b818 	b.w	800a094 <_kill_r>
 800a064:	2b01      	cmp	r3, #1
 800a066:	d00a      	beq.n	800a07e <_raise_r+0x4c>
 800a068:	1c59      	adds	r1, r3, #1
 800a06a:	d103      	bne.n	800a074 <_raise_r+0x42>
 800a06c:	2316      	movs	r3, #22
 800a06e:	6003      	str	r3, [r0, #0]
 800a070:	2001      	movs	r0, #1
 800a072:	e7e7      	b.n	800a044 <_raise_r+0x12>
 800a074:	2100      	movs	r1, #0
 800a076:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a07a:	4620      	mov	r0, r4
 800a07c:	4798      	blx	r3
 800a07e:	2000      	movs	r0, #0
 800a080:	e7e0      	b.n	800a044 <_raise_r+0x12>
	...

0800a084 <raise>:
 800a084:	4b02      	ldr	r3, [pc, #8]	@ (800a090 <raise+0xc>)
 800a086:	4601      	mov	r1, r0
 800a088:	6818      	ldr	r0, [r3, #0]
 800a08a:	f7ff bfd2 	b.w	800a032 <_raise_r>
 800a08e:	bf00      	nop
 800a090:	20000038 	.word	0x20000038

0800a094 <_kill_r>:
 800a094:	b538      	push	{r3, r4, r5, lr}
 800a096:	4d07      	ldr	r5, [pc, #28]	@ (800a0b4 <_kill_r+0x20>)
 800a098:	2300      	movs	r3, #0
 800a09a:	4604      	mov	r4, r0
 800a09c:	4608      	mov	r0, r1
 800a09e:	4611      	mov	r1, r2
 800a0a0:	602b      	str	r3, [r5, #0]
 800a0a2:	f7f7 fdcb 	bl	8001c3c <_kill>
 800a0a6:	1c43      	adds	r3, r0, #1
 800a0a8:	d102      	bne.n	800a0b0 <_kill_r+0x1c>
 800a0aa:	682b      	ldr	r3, [r5, #0]
 800a0ac:	b103      	cbz	r3, 800a0b0 <_kill_r+0x1c>
 800a0ae:	6023      	str	r3, [r4, #0]
 800a0b0:	bd38      	pop	{r3, r4, r5, pc}
 800a0b2:	bf00      	nop
 800a0b4:	200005d8 	.word	0x200005d8

0800a0b8 <_getpid_r>:
 800a0b8:	f7f7 bdb8 	b.w	8001c2c <_getpid>

0800a0bc <roundf>:
 800a0bc:	ee10 0a10 	vmov	r0, s0
 800a0c0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800a0c4:	3a7f      	subs	r2, #127	@ 0x7f
 800a0c6:	2a16      	cmp	r2, #22
 800a0c8:	dc15      	bgt.n	800a0f6 <roundf+0x3a>
 800a0ca:	2a00      	cmp	r2, #0
 800a0cc:	da08      	bge.n	800a0e0 <roundf+0x24>
 800a0ce:	3201      	adds	r2, #1
 800a0d0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800a0d4:	d101      	bne.n	800a0da <roundf+0x1e>
 800a0d6:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800a0da:	ee00 3a10 	vmov	s0, r3
 800a0de:	4770      	bx	lr
 800a0e0:	4907      	ldr	r1, [pc, #28]	@ (800a100 <roundf+0x44>)
 800a0e2:	4111      	asrs	r1, r2
 800a0e4:	4201      	tst	r1, r0
 800a0e6:	d0fa      	beq.n	800a0de <roundf+0x22>
 800a0e8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800a0ec:	4113      	asrs	r3, r2
 800a0ee:	4403      	add	r3, r0
 800a0f0:	ea23 0301 	bic.w	r3, r3, r1
 800a0f4:	e7f1      	b.n	800a0da <roundf+0x1e>
 800a0f6:	2a80      	cmp	r2, #128	@ 0x80
 800a0f8:	d1f1      	bne.n	800a0de <roundf+0x22>
 800a0fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a0fe:	4770      	bx	lr
 800a100:	007fffff 	.word	0x007fffff

0800a104 <_init>:
 800a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a106:	bf00      	nop
 800a108:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a10a:	bc08      	pop	{r3}
 800a10c:	469e      	mov	lr, r3
 800a10e:	4770      	bx	lr

0800a110 <_fini>:
 800a110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a112:	bf00      	nop
 800a114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a116:	bc08      	pop	{r3}
 800a118:	469e      	mov	lr, r3
 800a11a:	4770      	bx	lr
